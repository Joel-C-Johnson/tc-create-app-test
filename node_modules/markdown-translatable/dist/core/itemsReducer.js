"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.itemsReducer = void 0;

var _deepFreeze = _interopRequireDefault(require("deep-freeze"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var itemsReducer = function itemsReducer(items, action) {
  var _items = _toConsumableArray(items);

  var type = action.type,
      value = action.value;

  switch (type) {
    case 'SET_ITEMS':
      _items = value.items;
      break;

    case 'SET_ITEM':
      _items[value.index] = value.item;
      break;

    default:
      throw new Error("Unsupported action type: ".concat(action.type));
  }

  return (0, _deepFreeze.default)(_items);
};

exports.itemsReducer = itemsReducer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb3JlL2l0ZW1zUmVkdWNlci50cyJdLCJuYW1lcyI6WyJpdGVtc1JlZHVjZXIiLCJpdGVtcyIsImFjdGlvbiIsIl9pdGVtcyIsInR5cGUiLCJ2YWx1ZSIsImluZGV4IiwiaXRlbSIsIkVycm9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFTyxJQUFNQSxZQUFZLEdBQUcsU0FBZkEsWUFBZSxDQUFDQyxLQUFELEVBQVFDLE1BQVIsRUFBbUI7QUFDN0MsTUFBSUMsTUFBTSxzQkFBT0YsS0FBUCxDQUFWOztBQUQ2QyxNQUVyQ0csSUFGcUMsR0FFckJGLE1BRnFCLENBRXJDRSxJQUZxQztBQUFBLE1BRS9CQyxLQUYrQixHQUVyQkgsTUFGcUIsQ0FFL0JHLEtBRitCOztBQUk3QyxVQUFRRCxJQUFSO0FBQ0UsU0FBSyxXQUFMO0FBQ0VELE1BQUFBLE1BQU0sR0FBR0UsS0FBSyxDQUFDSixLQUFmO0FBQ0E7O0FBQ0YsU0FBSyxVQUFMO0FBQ0VFLE1BQUFBLE1BQU0sQ0FBQ0UsS0FBSyxDQUFDQyxLQUFQLENBQU4sR0FBc0JELEtBQUssQ0FBQ0UsSUFBNUI7QUFDQTs7QUFDRjtBQUNFLFlBQU0sSUFBSUMsS0FBSixvQ0FBc0NOLE1BQU0sQ0FBQ0UsSUFBN0MsRUFBTjtBQVJKOztBQVVBLFNBQU8seUJBQVdELE1BQVgsQ0FBUDtBQUNELENBZk0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGVlcEZyZWV6ZSBmcm9tICdkZWVwLWZyZWV6ZSc7XG5cbmV4cG9ydCBjb25zdCBpdGVtc1JlZHVjZXIgPSAoaXRlbXMsIGFjdGlvbikgPT4ge1xuICBsZXQgX2l0ZW1zID0gWy4uLml0ZW1zXTtcbiAgY29uc3QgeyB0eXBlLCB2YWx1ZSB9ID0gYWN0aW9uO1xuXG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ1NFVF9JVEVNUyc6XG4gICAgICBfaXRlbXMgPSB2YWx1ZS5pdGVtcztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ1NFVF9JVEVNJzpcbiAgICAgIF9pdGVtc1t2YWx1ZS5pbmRleF0gPSB2YWx1ZS5pdGVtO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgYWN0aW9uIHR5cGU6ICR7YWN0aW9uLnR5cGV9YCk7XG4gIH1cbiAgcmV0dXJuIGRlZXBGcmVlemUoX2l0ZW1zKTtcbn07Il19