"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.localString = void 0;
// 
// Translate strings into different languages 
// Then use localString(id) to return the language specific string to use
//
// To use:
// 1. Import:
//    import { Tooltip } from '@material-ui/core';
//    import { localString } from '../../core/localStrings';
//
// 2. Update string ids as needed
// 3. Wrap button (if a tooltip):
//    <Tooltip title={localString(iconTooltip)} arrow>
//        <Translate />
//    </Tooltip>
// 4. -or- just call exported function, where a string is needed:
//
//    localString(stringid)
//
var strings = {
  en: {
    Preview: "Preview",
    Save: "Save",
    Blocks: "Blocks",
    NoBlocks: "NoBlocks",
    Sections: "Sections",
    NoSections: "No Sections",

    /* do not remove these two */
    StringMissing: "String Id missing",
    LangNotSupported: "Language not supported"
  },
  el: {
    StringMissing: "λείπει το εργαλείο"
  }
};

var localString = function localString(id) {
  var lang = navigator.language.split(/-|_/)[0]; // if language is unknown (not sure this can actually happen)

  if (lang === undefined) {
    lang = 'en';
  } // if there are no strings for the language


  if (strings[lang] === undefined) {
    lang = 'en';
    return strings[lang]['LangNotSupported'];
  }

  var lstring = strings[lang][id]; // if a string for the message id is missing

  if (lstring === undefined) {
    return strings[lang]['StringMissing'];
  }

  return lstring;
};

exports.localString = localString;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb3JlL2xvY2FsU3RyaW5ncy5qcyJdLCJuYW1lcyI6WyJzdHJpbmdzIiwiZW4iLCJQcmV2aWV3IiwiU2F2ZSIsIkJsb2NrcyIsIk5vQmxvY2tzIiwiU2VjdGlvbnMiLCJOb1NlY3Rpb25zIiwiU3RyaW5nTWlzc2luZyIsIkxhbmdOb3RTdXBwb3J0ZWQiLCJlbCIsImxvY2FsU3RyaW5nIiwiaWQiLCJsYW5nIiwibmF2aWdhdG9yIiwibGFuZ3VhZ2UiLCJzcGxpdCIsInVuZGVmaW5lZCIsImxzdHJpbmciXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQU1BLE9BQU8sR0FBRztBQUNaQyxFQUFBQSxFQUFFLEVBQUM7QUFDQ0MsSUFBQUEsT0FBTyxFQUFFLFNBRFY7QUFFQ0MsSUFBQUEsSUFBSSxFQUFFLE1BRlA7QUFHQ0MsSUFBQUEsTUFBTSxFQUFFLFFBSFQ7QUFJQ0MsSUFBQUEsUUFBUSxFQUFFLFVBSlg7QUFLQ0MsSUFBQUEsUUFBUSxFQUFFLFVBTFg7QUFNQ0MsSUFBQUEsVUFBVSxFQUFFLGFBTmI7O0FBT0M7QUFDQUMsSUFBQUEsYUFBYSxFQUFDLG1CQVJmO0FBU0NDLElBQUFBLGdCQUFnQixFQUFFO0FBVG5CLEdBRFM7QUFZWkMsRUFBQUEsRUFBRSxFQUFFO0FBQ0FGLElBQUFBLGFBQWEsRUFBQztBQURkO0FBWlEsQ0FBaEI7O0FBaUJPLElBQU1HLFdBQVcsR0FBRyxTQUFkQSxXQUFjLENBQUNDLEVBQUQsRUFBUTtBQUMvQixNQUFJQyxJQUFJLEdBQUdDLFNBQVMsQ0FBQ0MsUUFBVixDQUFtQkMsS0FBbkIsQ0FBeUIsS0FBekIsRUFBZ0MsQ0FBaEMsQ0FBWCxDQUQrQixDQUUvQjs7QUFDQSxNQUFLSCxJQUFJLEtBQUtJLFNBQWQsRUFBMEI7QUFDdEJKLElBQUFBLElBQUksR0FBRyxJQUFQO0FBQ0gsR0FMOEIsQ0FNL0I7OztBQUNBLE1BQUtiLE9BQU8sQ0FBQ2EsSUFBRCxDQUFQLEtBQWtCSSxTQUF2QixFQUFtQztBQUMvQkosSUFBQUEsSUFBSSxHQUFHLElBQVA7QUFDQSxXQUFPYixPQUFPLENBQUNhLElBQUQsQ0FBUCxDQUFjLGtCQUFkLENBQVA7QUFDSDs7QUFDRCxNQUFJSyxPQUFPLEdBQUdsQixPQUFPLENBQUNhLElBQUQsQ0FBUCxDQUFjRCxFQUFkLENBQWQsQ0FYK0IsQ0FZL0I7O0FBQ0EsTUFBS00sT0FBTyxLQUFLRCxTQUFqQixFQUE2QjtBQUN6QixXQUFPakIsT0FBTyxDQUFDYSxJQUFELENBQVAsQ0FBYyxlQUFkLENBQVA7QUFDSDs7QUFDRCxTQUFPSyxPQUFQO0FBQ0gsQ0FqQk0iLCJzb3VyY2VzQ29udGVudCI6WyIvLyBcclxuLy8gVHJhbnNsYXRlIHN0cmluZ3MgaW50byBkaWZmZXJlbnQgbGFuZ3VhZ2VzIFxyXG4vLyBUaGVuIHVzZSBsb2NhbFN0cmluZyhpZCkgdG8gcmV0dXJuIHRoZSBsYW5ndWFnZSBzcGVjaWZpYyBzdHJpbmcgdG8gdXNlXHJcbi8vXHJcbi8vIFRvIHVzZTpcclxuLy8gMS4gSW1wb3J0OlxyXG4vLyAgICBpbXBvcnQgeyBUb29sdGlwIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUnO1xyXG4vLyAgICBpbXBvcnQgeyBsb2NhbFN0cmluZyB9IGZyb20gJy4uLy4uL2NvcmUvbG9jYWxTdHJpbmdzJztcclxuLy9cclxuLy8gMi4gVXBkYXRlIHN0cmluZyBpZHMgYXMgbmVlZGVkXHJcbi8vIDMuIFdyYXAgYnV0dG9uIChpZiBhIHRvb2x0aXApOlxyXG4vLyAgICA8VG9vbHRpcCB0aXRsZT17bG9jYWxTdHJpbmcoaWNvblRvb2x0aXApfSBhcnJvdz5cclxuLy8gICAgICAgIDxUcmFuc2xhdGUgLz5cclxuLy8gICAgPC9Ub29sdGlwPlxyXG4vLyA0LiAtb3ItIGp1c3QgY2FsbCBleHBvcnRlZCBmdW5jdGlvbiwgd2hlcmUgYSBzdHJpbmcgaXMgbmVlZGVkOlxyXG4vL1xyXG4vLyAgICBsb2NhbFN0cmluZyhzdHJpbmdpZClcclxuLy9cclxuY29uc3Qgc3RyaW5ncyA9IHtcclxuICAgIGVuOntcclxuICAgICAgICBQcmV2aWV3OiBcIlByZXZpZXdcIixcclxuICAgICAgICBTYXZlOiBcIlNhdmVcIixcclxuICAgICAgICBCbG9ja3M6IFwiQmxvY2tzXCIsXHJcbiAgICAgICAgTm9CbG9ja3M6IFwiTm9CbG9ja3NcIixcclxuICAgICAgICBTZWN0aW9uczogXCJTZWN0aW9uc1wiLFxyXG4gICAgICAgIE5vU2VjdGlvbnM6IFwiTm8gU2VjdGlvbnNcIixcclxuICAgICAgICAvKiBkbyBub3QgcmVtb3ZlIHRoZXNlIHR3byAqL1xyXG4gICAgICAgIFN0cmluZ01pc3Npbmc6XCJTdHJpbmcgSWQgbWlzc2luZ1wiLFxyXG4gICAgICAgIExhbmdOb3RTdXBwb3J0ZWQ6IFwiTGFuZ3VhZ2Ugbm90IHN1cHBvcnRlZFwiXHJcbiAgICB9LFxyXG4gICAgZWw6IHtcclxuICAgICAgICBTdHJpbmdNaXNzaW5nOlwizrvOtc6vz4DOtc65IM+Ezr8gzrXPgc6zzrHOu861zq/Ov1wiXHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgbG9jYWxTdHJpbmcgPSAoaWQpID0+IHtcclxuICAgIGxldCBsYW5nID0gbmF2aWdhdG9yLmxhbmd1YWdlLnNwbGl0KC8tfF8vKVswXTtcclxuICAgIC8vIGlmIGxhbmd1YWdlIGlzIHVua25vd24gKG5vdCBzdXJlIHRoaXMgY2FuIGFjdHVhbGx5IGhhcHBlbilcclxuICAgIGlmICggbGFuZyA9PT0gdW5kZWZpbmVkICkge1xyXG4gICAgICAgIGxhbmcgPSAnZW4nO1xyXG4gICAgfVxyXG4gICAgLy8gaWYgdGhlcmUgYXJlIG5vIHN0cmluZ3MgZm9yIHRoZSBsYW5ndWFnZVxyXG4gICAgaWYgKCBzdHJpbmdzW2xhbmddID09PSB1bmRlZmluZWQgKSB7XHJcbiAgICAgICAgbGFuZyA9ICdlbic7XHJcbiAgICAgICAgcmV0dXJuIHN0cmluZ3NbbGFuZ11bJ0xhbmdOb3RTdXBwb3J0ZWQnXTtcclxuICAgIH1cclxuICAgIGxldCBsc3RyaW5nID0gc3RyaW5nc1tsYW5nXVtpZF07XHJcbiAgICAvLyBpZiBhIHN0cmluZyBmb3IgdGhlIG1lc3NhZ2UgaWQgaXMgbWlzc2luZ1xyXG4gICAgaWYgKCBsc3RyaW5nID09PSB1bmRlZmluZWQgKSB7XHJcbiAgICAgICAgcmV0dXJuIHN0cmluZ3NbbGFuZ11bJ1N0cmluZ01pc3NpbmcnXVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGxzdHJpbmc7XHJcbn07XHJcbiJdfQ==