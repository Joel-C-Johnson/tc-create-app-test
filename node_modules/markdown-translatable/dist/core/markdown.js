"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.markdownFromSections = exports.sectionsFromMarkdown = exports.markdownFromBlocks = exports.blocksFromMarkdown = void 0;

var blocksFromMarkdown = function blocksFromMarkdown(_ref) {
  var markdown = _ref.markdown;
  var blocks = markdown.replace(/<br>/gi, '\n').split(/\n\n/g);
  var _blocks = [];
  blocks.forEach(function (block) {
    // Delete a block by emptying it.
    if (block.length > 0) {
      _blocks.push(block);
    }
  });

  if (_blocks.length == 0) {
    _blocks.push("");
  }

  return _blocks;
};

exports.blocksFromMarkdown = blocksFromMarkdown;

var markdownFromBlocks = function markdownFromBlocks(_ref2) {
  var blocks = _ref2.blocks;
  return blocks.join("\n\n");
};

exports.markdownFromBlocks = markdownFromBlocks;

var sectionsFromMarkdown = function sectionsFromMarkdown(_ref3) {
  var markdown = _ref3.markdown;
  var sections = [];
  var section = [];
  var blocks = markdown.replace(/<br>/gi, '\n').split(/\n\n/g);
  blocks.forEach(function (block) {
    var headingRegex = /^\s?#+/;
    var heading = headingRegex.test(block);

    if (section.length > 0 && heading) {
      sections.push(section);
      section = [];
    } // Delete a block by emptying it.


    if (block.length > 0) {
      section.push(block);
    }
  }); // don't leave a dangling section (orphaned)

  if (section !== []) {
    sections.push(section);
    section = [];
  } // Don't allow empty section,
  // (since originalBlocks will be compared to translationBlock).


  if (sections.length == 0) {
    sections.push("");
  }

  sections = sections.map(function (blocks) {
    return blocks.join("\n\n");
  });
  return sections;
};

exports.sectionsFromMarkdown = sectionsFromMarkdown;

var markdownFromSections = function markdownFromSections(_ref4) {
  var sections = _ref4.sections;
  return sections.join("\n\n");
};

exports.markdownFromSections = markdownFromSections;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb3JlL21hcmtkb3duLnRzIl0sIm5hbWVzIjpbImJsb2Nrc0Zyb21NYXJrZG93biIsIm1hcmtkb3duIiwiYmxvY2tzIiwicmVwbGFjZSIsInNwbGl0IiwiX2Jsb2NrcyIsImZvckVhY2giLCJibG9jayIsImxlbmd0aCIsInB1c2giLCJtYXJrZG93bkZyb21CbG9ja3MiLCJqb2luIiwic2VjdGlvbnNGcm9tTWFya2Rvd24iLCJzZWN0aW9ucyIsInNlY3Rpb24iLCJoZWFkaW5nUmVnZXgiLCJoZWFkaW5nIiwidGVzdCIsIm1hcCIsIm1hcmtkb3duRnJvbVNlY3Rpb25zIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQU8sSUFBTUEsa0JBQWtCLEdBQUcsU0FBckJBLGtCQUFxQixPQUFrQjtBQUFBLE1BQWZDLFFBQWUsUUFBZkEsUUFBZTtBQUNsRCxNQUFNQyxNQUFNLEdBQUdELFFBQVEsQ0FBQ0UsT0FBVCxDQUFpQixRQUFqQixFQUEyQixJQUEzQixFQUFpQ0MsS0FBakMsQ0FBdUMsT0FBdkMsQ0FBZjtBQUVBLE1BQU1DLE9BQU8sR0FBRyxFQUFoQjtBQUNBSCxFQUFBQSxNQUFNLENBQUNJLE9BQVAsQ0FBZSxVQUFDQyxLQUFELEVBQVc7QUFDeEI7QUFDQSxRQUFJQSxLQUFLLENBQUNDLE1BQU4sR0FBZSxDQUFuQixFQUFzQjtBQUNwQkgsTUFBQUEsT0FBTyxDQUFDSSxJQUFSLENBQWFGLEtBQWI7QUFDRDtBQUNGLEdBTEQ7O0FBT0EsTUFBSUYsT0FBTyxDQUFDRyxNQUFSLElBQWtCLENBQXRCLEVBQXlCO0FBQ3ZCSCxJQUFBQSxPQUFPLENBQUNJLElBQVIsQ0FBYSxFQUFiO0FBQ0Q7O0FBRUQsU0FBT0osT0FBUDtBQUNELENBaEJNOzs7O0FBa0JBLElBQU1LLGtCQUFrQixHQUFHLFNBQXJCQSxrQkFBcUI7QUFBQSxNQUFHUixNQUFILFNBQUdBLE1BQUg7QUFBQSxTQUFnQkEsTUFBTSxDQUFDUyxJQUFQLFFBQWhCO0FBQUEsQ0FBM0I7Ozs7QUFFQSxJQUFNQyxvQkFBb0IsR0FBRyxTQUF2QkEsb0JBQXVCLFFBQWtCO0FBQUEsTUFBZlgsUUFBZSxTQUFmQSxRQUFlO0FBQ3BELE1BQUlZLFFBQWEsR0FBRyxFQUFwQjtBQUNBLE1BQUlDLE9BQWlCLEdBQUcsRUFBeEI7QUFDQSxNQUFNWixNQUFNLEdBQUdELFFBQVEsQ0FBQ0UsT0FBVCxDQUFpQixRQUFqQixFQUEyQixJQUEzQixFQUFpQ0MsS0FBakMsQ0FBdUMsT0FBdkMsQ0FBZjtBQUVBRixFQUFBQSxNQUFNLENBQUNJLE9BQVAsQ0FBZSxVQUFDQyxLQUFELEVBQVc7QUFDeEIsUUFBTVEsWUFBWSxHQUFHLFFBQXJCO0FBQ0EsUUFBTUMsT0FBTyxHQUFHRCxZQUFZLENBQUNFLElBQWIsQ0FBa0JWLEtBQWxCLENBQWhCOztBQUVBLFFBQUlPLE9BQU8sQ0FBQ04sTUFBUixHQUFpQixDQUFqQixJQUFzQlEsT0FBMUIsRUFBbUM7QUFDakNILE1BQUFBLFFBQVEsQ0FBQ0osSUFBVCxDQUFjSyxPQUFkO0FBQ0FBLE1BQUFBLE9BQU8sR0FBRyxFQUFWO0FBQ0QsS0FQdUIsQ0FReEI7OztBQUNBLFFBQUlQLEtBQUssQ0FBQ0MsTUFBTixHQUFlLENBQW5CLEVBQXNCO0FBQ3BCTSxNQUFBQSxPQUFPLENBQUNMLElBQVIsQ0FBYUYsS0FBYjtBQUNEO0FBQ0YsR0FaRCxFQUxvRCxDQWtCcEQ7O0FBQ0EsTUFBSU8sT0FBTyxLQUFLLEVBQWhCLEVBQW9CO0FBQ2xCRCxJQUFBQSxRQUFRLENBQUNKLElBQVQsQ0FBY0ssT0FBZDtBQUNBQSxJQUFBQSxPQUFPLEdBQUcsRUFBVjtBQUNELEdBdEJtRCxDQXVCcEQ7QUFDQTs7O0FBQ0EsTUFBSUQsUUFBUSxDQUFDTCxNQUFULElBQW1CLENBQXZCLEVBQTBCO0FBQ3hCSyxJQUFBQSxRQUFRLENBQUNKLElBQVQsQ0FBYyxFQUFkO0FBQ0Q7O0FBRURJLEVBQUFBLFFBQVEsR0FBR0EsUUFBUSxDQUFDSyxHQUFULENBQWEsVUFBQ2hCLE1BQUQ7QUFBQSxXQUFZQSxNQUFNLENBQUNTLElBQVAsUUFBWjtBQUFBLEdBQWIsQ0FBWDtBQUVBLFNBQU9FLFFBQVA7QUFDRCxDQWhDTTs7OztBQWtDQSxJQUFNTSxvQkFBb0IsR0FBRyxTQUF2QkEsb0JBQXVCO0FBQUEsTUFBR04sUUFBSCxTQUFHQSxRQUFIO0FBQUEsU0FBa0JBLFFBQVEsQ0FBQ0YsSUFBVCxRQUFsQjtBQUFBLENBQTdCIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGJsb2Nrc0Zyb21NYXJrZG93biA9ICh7IG1hcmtkb3duIH0pID0+IHtcbiAgY29uc3QgYmxvY2tzID0gbWFya2Rvd24ucmVwbGFjZSgvPGJyPi9naSwgJ1xcbicpLnNwbGl0KC9cXG5cXG4vZyk7XG5cbiAgY29uc3QgX2Jsb2NrcyA9IFtdO1xuICBibG9ja3MuZm9yRWFjaCgoYmxvY2spID0+IHtcbiAgICAvLyBEZWxldGUgYSBibG9jayBieSBlbXB0eWluZyBpdC5cbiAgICBpZiAoYmxvY2subGVuZ3RoID4gMCkge1xuICAgICAgX2Jsb2Nrcy5wdXNoKGJsb2NrKTtcbiAgICB9XG4gIH0pO1xuXG4gIGlmIChfYmxvY2tzLmxlbmd0aCA9PSAwKSB7XG4gICAgX2Jsb2Nrcy5wdXNoKFwiXCIpO1xuICB9XG5cbiAgcmV0dXJuIF9ibG9ja3M7XG59O1xuXG5leHBvcnQgY29uc3QgbWFya2Rvd25Gcm9tQmxvY2tzID0gKHsgYmxvY2tzIH0pID0+IGJsb2Nrcy5qb2luKGBcXG5cXG5gKTtcblxuZXhwb3J0IGNvbnN0IHNlY3Rpb25zRnJvbU1hcmtkb3duID0gKHsgbWFya2Rvd24gfSkgPT4ge1xuICBsZXQgc2VjdGlvbnM6IGFueSA9IFtdO1xuICBsZXQgc2VjdGlvbjogc3RyaW5nW10gPSBbXTtcbiAgY29uc3QgYmxvY2tzID0gbWFya2Rvd24ucmVwbGFjZSgvPGJyPi9naSwgJ1xcbicpLnNwbGl0KC9cXG5cXG4vZyk7XG5cbiAgYmxvY2tzLmZvckVhY2goKGJsb2NrKSA9PiB7XG4gICAgY29uc3QgaGVhZGluZ1JlZ2V4ID0gL15cXHM/IysvO1xuICAgIGNvbnN0IGhlYWRpbmcgPSBoZWFkaW5nUmVnZXgudGVzdChibG9jayk7XG5cbiAgICBpZiAoc2VjdGlvbi5sZW5ndGggPiAwICYmIGhlYWRpbmcpIHtcbiAgICAgIHNlY3Rpb25zLnB1c2goc2VjdGlvbik7XG4gICAgICBzZWN0aW9uID0gW107XG4gICAgfVxuICAgIC8vIERlbGV0ZSBhIGJsb2NrIGJ5IGVtcHR5aW5nIGl0LlxuICAgIGlmIChibG9jay5sZW5ndGggPiAwKSB7XG4gICAgICBzZWN0aW9uLnB1c2goYmxvY2spO1xuICAgIH1cbiAgfSk7XG4gIC8vIGRvbid0IGxlYXZlIGEgZGFuZ2xpbmcgc2VjdGlvbiAob3JwaGFuZWQpXG4gIGlmIChzZWN0aW9uICE9PSBbXSkge1xuICAgIHNlY3Rpb25zLnB1c2goc2VjdGlvbik7XG4gICAgc2VjdGlvbiA9IFtdO1xuICB9XG4gIC8vIERvbid0IGFsbG93IGVtcHR5IHNlY3Rpb24sXG4gIC8vIChzaW5jZSBvcmlnaW5hbEJsb2NrcyB3aWxsIGJlIGNvbXBhcmVkIHRvIHRyYW5zbGF0aW9uQmxvY2spLlxuICBpZiAoc2VjdGlvbnMubGVuZ3RoID09IDApIHtcbiAgICBzZWN0aW9ucy5wdXNoKFwiXCIpO1xuICB9XG5cbiAgc2VjdGlvbnMgPSBzZWN0aW9ucy5tYXAoKGJsb2NrcykgPT4gYmxvY2tzLmpvaW4oYFxcblxcbmApKTtcblxuICByZXR1cm4gc2VjdGlvbnM7XG59O1xuXG5leHBvcnQgY29uc3QgbWFya2Rvd25Gcm9tU2VjdGlvbnMgPSAoeyBzZWN0aW9ucyB9KSA9PiBzZWN0aW9ucy5qb2luKGBcXG5cXG5gKTtcbiJdfQ==