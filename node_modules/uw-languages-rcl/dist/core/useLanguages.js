"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useLanguages = useLanguages;
exports.default = void 0;

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs3/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/asyncToGenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/slicedToArray"));

var _react = require("react");

var _useDeepCompareEffect = _interopRequireDefault(require("use-deep-compare-effect"));

/* The languages JSON is an array of objects. Sample:
{
  "pk": 6,
  "ang": "Afar",
  "lr": "Africa",
  "gw": false,
  "hc": "ET",
  "ln": "Afaraf",
  "lc": "aa",
  "ld": "ltr",
  "alt": [
    "Afaraf",
    "Danakil",
    "Denkel",
    "Adal",
    "Afar Af",
    "Qafar",
    "Baadu (Ba'adu)"
  ],
  "cc": ["DJ", "ER", "ET", "US", "CA"]
},
*/
function useLanguages() {
  var _useState = (0, _react.useState)([]),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      languages = _useState2[0],
      setLanguages = _useState2[1];

  (0, _useDeepCompareEffect.default)(function () {
    function getLanguages() {
      return _getLanguages.apply(this, arguments);
    }

    function _getLanguages() {
      _getLanguages = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        var langs, _langs;

        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return fetch('https://td.unfoldingword.org/exports/langnames.json');

              case 2:
                langs = _context.sent;
                _context.next = 5;
                return langs.json();

              case 5:
                _langs = _context.sent;
                setLanguages(_langs);

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      return _getLanguages.apply(this, arguments);
    }

    if (languages.length === 0) {
      //console.log("languages is empty... fetching")
      getLanguages();
    }
  }, [languages]);
  var formatLanguage = (0, _react.useCallback)(function (lg) {
    var _context2, _context3, _context4;

    // pattern for uw format: (am) Amharic – አማርኛ (Africa Gateway)
    var lc = lg.lc ? lg.lc : 'UNK';
    var ang = lg.ang ? lg.ang : 'UNK';
    var ln = lg.ln ? lg.ln : 'UNK';
    var lr = lg.lr ? lg.lr : 'UNK';
    return (0, _concat.default)(_context2 = (0, _concat.default)(_context3 = (0, _concat.default)(_context4 = "(".concat(lc, ") ")).call(_context4, ang, " - ")).call(_context3, ln, " (")).call(_context2, lr, ")");
  }, []);

  var getAllLanguages = function getAllLanguages() {
    return languages;
  };

  var getLanguage = (0, _react.useCallback)(function (languageId) {
    for (var i = 0; i < languages.length; i++) {
      if (languages[i].lc === languageId) {
        return languages[i];
      }
    }

    return {};
  }, [languages]);
  var getGatewayLanguages = (0, _react.useCallback)(function () {
    var _languages = [];

    for (var i = 0; i < languages.length; i++) {
      if (languages[i].gw) {
        _languages.push(formatLanguage(languages[i]));
      }
    }

    return _languages;
  }, [languages, formatLanguage]);
  var actions = {
    getAllLanguages: getAllLanguages,
    getLanguage: getLanguage,
    getGatewayLanguages: getGatewayLanguages,
    formatLanguage: formatLanguage
  }; // We return these computed values for the passed date prop to our hook

  return {
    state: languages,
    actions: actions
  };
}

;
var _default = useLanguages;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb3JlL3VzZUxhbmd1YWdlcy5qcyJdLCJuYW1lcyI6WyJ1c2VMYW5ndWFnZXMiLCJsYW5ndWFnZXMiLCJzZXRMYW5ndWFnZXMiLCJnZXRMYW5ndWFnZXMiLCJmZXRjaCIsImxhbmdzIiwianNvbiIsIl9sYW5ncyIsImxlbmd0aCIsImZvcm1hdExhbmd1YWdlIiwibGciLCJsYyIsImFuZyIsImxuIiwibHIiLCJnZXRBbGxMYW5ndWFnZXMiLCJnZXRMYW5ndWFnZSIsImxhbmd1YWdlSWQiLCJpIiwiZ2V0R2F0ZXdheUxhbmd1YWdlcyIsIl9sYW5ndWFnZXMiLCJndyIsInB1c2giLCJhY3Rpb25zIiwic3RhdGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRU8sU0FBU0EsWUFBVCxHQUF3QjtBQUM3QixrQkFBa0MscUJBQVMsRUFBVCxDQUFsQztBQUFBO0FBQUEsTUFBT0MsU0FBUDtBQUFBLE1BQWtCQyxZQUFsQjs7QUFFQSxxQ0FBc0IsWUFBTTtBQUFBLGFBQ1hDLFlBRFc7QUFBQTtBQUFBOztBQUFBO0FBQUEsOEZBQzFCO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHVCQUN1QkMsS0FBSyxDQUFDLHFEQUFELENBRDVCOztBQUFBO0FBQ1FDLGdCQUFBQSxLQURSO0FBQUE7QUFBQSx1QkFFdUJBLEtBQUssQ0FBQ0MsSUFBTixFQUZ2Qjs7QUFBQTtBQUVRQyxnQkFBQUEsTUFGUjtBQUdFTCxnQkFBQUEsWUFBWSxDQUFDSyxNQUFELENBQVo7O0FBSEY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsT0FEMEI7QUFBQTtBQUFBOztBQU8xQixRQUFJTixTQUFTLENBQUNPLE1BQVYsS0FBcUIsQ0FBekIsRUFBNEI7QUFDMUI7QUFDQUwsTUFBQUEsWUFBWTtBQUNiO0FBQ0YsR0FYRCxFQVdHLENBQUNGLFNBQUQsQ0FYSDtBQWNBLE1BQU1RLGNBQWMsR0FBRyx3QkFBWSxVQUFDQyxFQUFELEVBQVE7QUFBQTs7QUFDekM7QUFDQSxRQUFNQyxFQUFFLEdBQUdELEVBQUUsQ0FBQ0MsRUFBSCxHQUFRRCxFQUFFLENBQUNDLEVBQVgsR0FBZ0IsS0FBM0I7QUFDQSxRQUFNQyxHQUFHLEdBQUdGLEVBQUUsQ0FBQ0UsR0FBSCxHQUFTRixFQUFFLENBQUNFLEdBQVosR0FBa0IsS0FBOUI7QUFDQSxRQUFNQyxFQUFFLEdBQUdILEVBQUUsQ0FBQ0csRUFBSCxHQUFRSCxFQUFFLENBQUNHLEVBQVgsR0FBZ0IsS0FBM0I7QUFDQSxRQUFNQyxFQUFFLEdBQUdKLEVBQUUsQ0FBQ0ksRUFBSCxHQUFRSixFQUFFLENBQUNJLEVBQVgsR0FBZ0IsS0FBM0I7QUFDQSx5SEFBV0gsRUFBWCx5QkFBa0JDLEdBQWxCLDBCQUEyQkMsRUFBM0IseUJBQWtDQyxFQUFsQztBQUNELEdBUHNCLEVBT3BCLEVBUG9CLENBQXZCOztBQVNBLE1BQU1DLGVBQWUsR0FBRyxTQUFsQkEsZUFBa0IsR0FBTTtBQUM1QixXQUFPZCxTQUFQO0FBQ0QsR0FGRDs7QUFJQSxNQUFNZSxXQUFXLEdBQUcsd0JBQVksVUFBQ0MsVUFBRCxFQUFnQjtBQUM5QyxTQUFLLElBQUlDLENBQUMsR0FBQyxDQUFYLEVBQWNBLENBQUMsR0FBQ2pCLFNBQVMsQ0FBQ08sTUFBMUIsRUFBa0NVLENBQUMsRUFBbkMsRUFBdUM7QUFDckMsVUFBSWpCLFNBQVMsQ0FBQ2lCLENBQUQsQ0FBVCxDQUFhUCxFQUFiLEtBQW9CTSxVQUF4QixFQUFvQztBQUNsQyxlQUFPaEIsU0FBUyxDQUFDaUIsQ0FBRCxDQUFoQjtBQUNEO0FBQ0Y7O0FBQ0QsV0FBTyxFQUFQO0FBQ0QsR0FQbUIsRUFPakIsQ0FBQ2pCLFNBQUQsQ0FQaUIsQ0FBcEI7QUFTQSxNQUFNa0IsbUJBQW1CLEdBQUcsd0JBQVksWUFBTTtBQUM1QyxRQUFJQyxVQUFVLEdBQUcsRUFBakI7O0FBQ0EsU0FBSyxJQUFJRixDQUFDLEdBQUMsQ0FBWCxFQUFjQSxDQUFDLEdBQUNqQixTQUFTLENBQUNPLE1BQTFCLEVBQWtDVSxDQUFDLEVBQW5DLEVBQXVDO0FBQ3JDLFVBQUlqQixTQUFTLENBQUNpQixDQUFELENBQVQsQ0FBYUcsRUFBakIsRUFBcUI7QUFDbkJELFFBQUFBLFVBQVUsQ0FBQ0UsSUFBWCxDQUFpQmIsY0FBYyxDQUFDUixTQUFTLENBQUNpQixDQUFELENBQVYsQ0FBL0I7QUFDRDtBQUNGOztBQUNELFdBQU9FLFVBQVA7QUFDRCxHQVIyQixFQVF6QixDQUFDbkIsU0FBRCxFQUFZUSxjQUFaLENBUnlCLENBQTVCO0FBVUEsTUFBTWMsT0FBTyxHQUFHO0FBQ2RSLElBQUFBLGVBQWUsRUFBZkEsZUFEYztBQUVkQyxJQUFBQSxXQUFXLEVBQVhBLFdBRmM7QUFHZEcsSUFBQUEsbUJBQW1CLEVBQW5CQSxtQkFIYztBQUlkVixJQUFBQSxjQUFjLEVBQWRBO0FBSmMsR0FBaEIsQ0FqRDZCLENBeUQ3Qjs7QUFDQSxTQUFPO0FBQ0xlLElBQUFBLEtBQUssRUFBRXZCLFNBREY7QUFFTHNCLElBQUFBLE9BQU8sRUFBUEE7QUFGSyxHQUFQO0FBSUQ7O0FBQUE7ZUFFY3ZCLFkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2sgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHVzZURlZXBDb21wYXJlRWZmZWN0IGZyb20gJ3VzZS1kZWVwLWNvbXBhcmUtZWZmZWN0JztcclxuXHJcblxyXG4vKiBUaGUgbGFuZ3VhZ2VzIEpTT04gaXMgYW4gYXJyYXkgb2Ygb2JqZWN0cy4gU2FtcGxlOlxyXG57XHJcbiAgXCJwa1wiOiA2LFxyXG4gIFwiYW5nXCI6IFwiQWZhclwiLFxyXG4gIFwibHJcIjogXCJBZnJpY2FcIixcclxuICBcImd3XCI6IGZhbHNlLFxyXG4gIFwiaGNcIjogXCJFVFwiLFxyXG4gIFwibG5cIjogXCJBZmFyYWZcIixcclxuICBcImxjXCI6IFwiYWFcIixcclxuICBcImxkXCI6IFwibHRyXCIsXHJcbiAgXCJhbHRcIjogW1xyXG4gICAgXCJBZmFyYWZcIixcclxuICAgIFwiRGFuYWtpbFwiLFxyXG4gICAgXCJEZW5rZWxcIixcclxuICAgIFwiQWRhbFwiLFxyXG4gICAgXCJBZmFyIEFmXCIsXHJcbiAgICBcIlFhZmFyXCIsXHJcbiAgICBcIkJhYWR1IChCYSdhZHUpXCJcclxuICBdLFxyXG4gIFwiY2NcIjogW1wiREpcIiwgXCJFUlwiLCBcIkVUXCIsIFwiVVNcIiwgXCJDQVwiXVxyXG59LFxyXG4qL1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZUxhbmd1YWdlcygpIHtcclxuICBjb25zdCBbbGFuZ3VhZ2VzLCBzZXRMYW5ndWFnZXNdID0gdXNlU3RhdGUoW10pO1xyXG5cclxuICB1c2VEZWVwQ29tcGFyZUVmZmVjdCggKCkgPT4ge1xyXG4gICAgYXN5bmMgZnVuY3Rpb24gZ2V0TGFuZ3VhZ2VzKCkge1xyXG4gICAgICBjb25zdCBsYW5ncyA9IChhd2FpdCBmZXRjaCgnaHR0cHM6Ly90ZC51bmZvbGRpbmd3b3JkLm9yZy9leHBvcnRzL2xhbmduYW1lcy5qc29uJykpXHJcbiAgICAgIGNvbnN0IF9sYW5ncyA9IGF3YWl0IGxhbmdzLmpzb24oKVxyXG4gICAgICBzZXRMYW5ndWFnZXMoX2xhbmdzKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobGFuZ3VhZ2VzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAvL2NvbnNvbGUubG9nKFwibGFuZ3VhZ2VzIGlzIGVtcHR5Li4uIGZldGNoaW5nXCIpXHJcbiAgICAgIGdldExhbmd1YWdlcygpO1xyXG4gICAgfVxyXG4gIH0sIFtsYW5ndWFnZXNdXHJcbiAgKTtcclxuXHJcbiAgY29uc3QgZm9ybWF0TGFuZ3VhZ2UgPSB1c2VDYWxsYmFjaygobGcpID0+IHtcclxuICAgIC8vIHBhdHRlcm4gZm9yIHV3IGZvcm1hdDogKGFtKSBBbWhhcmljIOKAkyDhiqDhiJvhiK3hipsgKEFmcmljYSBHYXRld2F5KVxyXG4gICAgY29uc3QgbGMgPSBsZy5sYyA/IGxnLmxjIDogJ1VOSyc7XHJcbiAgICBjb25zdCBhbmcgPSBsZy5hbmcgPyBsZy5hbmcgOiAnVU5LJztcclxuICAgIGNvbnN0IGxuID0gbGcubG4gPyBsZy5sbiA6ICdVTksnO1xyXG4gICAgY29uc3QgbHIgPSBsZy5sciA/IGxnLmxyIDogJ1VOSyc7XHJcbiAgICByZXR1cm4gYCgke2xjfSkgJHthbmd9IC0gJHtsbn0gKCR7bHJ9KWBcclxuICB9LCBbXSk7XHJcbiAgXHJcbiAgY29uc3QgZ2V0QWxsTGFuZ3VhZ2VzID0gKCkgPT4ge1xyXG4gICAgcmV0dXJuIGxhbmd1YWdlcztcclxuICB9O1xyXG5cclxuICBjb25zdCBnZXRMYW5ndWFnZSA9IHVzZUNhbGxiYWNrKChsYW5ndWFnZUlkKSA9PiB7XHJcbiAgICBmb3IgKGxldCBpPTA7IGk8bGFuZ3VhZ2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlmIChsYW5ndWFnZXNbaV0ubGMgPT09IGxhbmd1YWdlSWQpIHtcclxuICAgICAgICByZXR1cm4gbGFuZ3VhZ2VzW2ldXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB7fTsgIFxyXG4gIH0sIFtsYW5ndWFnZXNdKTtcclxuICBcclxuICBjb25zdCBnZXRHYXRld2F5TGFuZ3VhZ2VzID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgbGV0IF9sYW5ndWFnZXMgPSBbXTtcclxuICAgIGZvciAobGV0IGk9MDsgaTxsYW5ndWFnZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgaWYgKGxhbmd1YWdlc1tpXS5ndykge1xyXG4gICAgICAgIF9sYW5ndWFnZXMucHVzaCggZm9ybWF0TGFuZ3VhZ2UobGFuZ3VhZ2VzW2ldKSApXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBfbGFuZ3VhZ2VzO1xyXG4gIH0sIFtsYW5ndWFnZXMsIGZvcm1hdExhbmd1YWdlXSk7XHJcblxyXG4gIGNvbnN0IGFjdGlvbnMgPSB7XHJcbiAgICBnZXRBbGxMYW5ndWFnZXMsXHJcbiAgICBnZXRMYW5ndWFnZSxcclxuICAgIGdldEdhdGV3YXlMYW5ndWFnZXMsXHJcbiAgICBmb3JtYXRMYW5ndWFnZSxcclxuICB9O1xyXG5cclxuXHJcbiAgLy8gV2UgcmV0dXJuIHRoZXNlIGNvbXB1dGVkIHZhbHVlcyBmb3IgdGhlIHBhc3NlZCBkYXRlIHByb3AgdG8gb3VyIGhvb2tcclxuICByZXR1cm4geyBcclxuICAgIHN0YXRlOiBsYW5ndWFnZXMsXHJcbiAgICBhY3Rpb25zLFxyXG4gfTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHVzZUxhbmd1YWdlczsiXX0=