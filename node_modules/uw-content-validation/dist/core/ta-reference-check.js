"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.checkSupportReferenceInTA = checkSupportReferenceInTA;var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _getApi = require("../core/getApi");

var _utilities = require("./utilities");function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {(0, _defineProperty2.default)(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}


// const TA_REFERENCE_VALIDATOR_VERSION_STRING = '0.3.2';
function

checkSupportReferenceInTA(_x, _x2, _x3, _x4) {return _checkSupportReferenceInTA.apply(this, arguments);}
















































































































// end of checkSupportReferenceInTA function
function _checkSupportReferenceInTA() {_checkSupportReferenceInTA = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(fieldName, fieldText, givenLocation, checkingOptions) {var ourLocation, ctarResult, addNoticePartial, taRepoUsername, taRepoBranch, taRepoLanguageCode, taRepoSectionName, taRepoName, filepath, taFileContent, getFile_;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:addNoticePartial = function _addNoticePartial(noticeObject) {// functionLog(`checkSupportReferenceInTA Notice: (priority=${priority}) ${message}${characterIndex > 0 ? ` (at character ${characterIndex})` : ""}${excerpt ? ` ${excerpt}` : ""}${location}`);
              //parameterAssert(noticeObject.priority !== undefined, "cTAref addNoticePartial: 'priority' parameter should be defined");
              //parameterAssert(typeof noticeObject.priority === 'number', `cTAref addNoticePartial: 'priority' parameter should be a number not a '${typeof noticeObject.priority}': ${noticeObject.priority}`);
              //parameterAssert(noticeObject.message !== undefined, "cTAref addNoticePartial: 'message' parameter should be defined");
              //parameterAssert(typeof noticeObject.message === 'string', `cTAref addNoticePartial: 'message' parameter should be a string not a '${typeof noticeObject.message}': ${noticeObject.message}`);
              // //parameterAssert(characterIndex !== undefined, "cTAref addNoticePartial: 'characterIndex' parameter should be defined");
              if (noticeObject.characterIndex) {//parameterAssert(typeof noticeObject.characterIndex === 'number', `cTAref addNoticePartial: 'characterIndex' parameter should be a number not a '${typeof noticeObject.characterIndex}': ${noticeObject.characterIndex}`);
              } // //parameterAssert(excerpt !== undefined, "cTAref addNoticePartial: 'excerpt' parameter should be defined");
              if (noticeObject.excerpt) {//parameterAssert(typeof noticeObject.excerpt === 'string', `cTAref addNoticePartial: 'excerpt' parameter should be a string not a '${typeof noticeObject.excerpt}': ${noticeObject.excerpt}`);
              } //parameterAssert(noticeObject.location !== undefined, "cTAref addNoticePartial: 'location' parameter should be defined");
              //parameterAssert(typeof noticeObject.location === 'string', `cTAref addNoticePartial: 'location' parameter should be a string not a '${typeof noticeObject.location}': ${noticeObject.location}`);
              ctarResult.noticeList.push(_objectSpread(_objectSpread({}, noticeObject), {}, { fieldName: fieldName }));}; // This is for the case of the full SupportReference field being the article link
            //  which is assumed to be in the translate part of the TA manual.
            // We fetch the TA link from Door43 to test that it’s really there
            //  -- you can control this with:
            //      checkingOptions?.taRepoUsername
            //      checkingOptions?.taRepoBranch (or tag)
            //      checkingOptions?.taRepoLanguageCode
            //      checkingOptions?.taRepoSectionName
            //      checkingOptions?.expectFullLink (bool)
            // functionLog(`checkSupportReferenceInTA v${TA_REFERENCE_VALIDATOR_VERSION_STRING} (${fieldName}, (${fieldText.length}) '${fieldText}', ${givenLocation}, …)`);
            //parameterAssert(fieldName !== undefined, "checkSupportReferenceInTA: 'fieldText' parameter should be defined");
            //parameterAssert(typeof fieldName === 'string', `checkSupportReferenceInTA: 'fieldText' parameter should be a string not a '${typeof fieldName}'`);
            //parameterAssert(fieldText !== undefined, "checkSupportReferenceInTA: 'fieldText' parameter should be defined");
            //parameterAssert(typeof fieldText === 'string', `checkSupportReferenceInTA: 'fieldText' parameter should be a string not a '${typeof fieldText}'`);
            //parameterAssert(givenLocation !== undefined, "checkSupportReferenceInTA: 'fieldText' parameter should be defined");
            //parameterAssert(typeof givenLocation === 'string', `checkSupportReferenceInTA: 'fieldText' parameter should be a string not a '${typeof givenLocation}'`);
            //parameterAssert(fieldName === 'SupportReference', `Unexpected checkSupportReferenceInTA fieldName='${fieldName}'`); // so far
            //parameterAssert(givenLocation.indexOf(fieldName) < 0, `checkSupportReferenceInTA: 'givenLocation' parameter should be not contain fieldName=${fieldName}`);
            //parameterAssert(fieldName === 'SupportReference');
            ourLocation = givenLocation;if (ourLocation && ourLocation[0] !== ' ') ourLocation = " ".concat(ourLocation);ctarResult = { noticeList: [] };try {taRepoUsername = checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.taRepoUsername;} catch (trcUNerror) {}if (!taRepoUsername) taRepoUsername = 'Door43-Catalog'; // or unfoldingWord ???
            try {taRepoBranch = checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.taRepoBranch;} catch (trcBRerror) {}if (!taRepoBranch) taRepoBranch = 'master';try {taRepoLanguageCode = checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.taRepoLanguageCode;} catch (trcLCerror) {}if (!taRepoLanguageCode) taRepoLanguageCode = 'en';try {taRepoSectionName = checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.taRepoSectionName;} catch (trcSNerror) {}if (!taRepoSectionName) taRepoSectionName = 'translate';taRepoName = "".concat(taRepoLanguageCode, "_ta");if (checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.expectFullLink) {// debugLog("checkSupportReferenceInTA expect full link")
              if (!fieldText.startsWith('rc://*/')) addNoticePartial({ priority: 879, message: "Badly formatted Resource Container link", excerpt: fieldText, location: "".concat(ourLocation, " ").concat(filepath) });filepath = "".concat(fieldText.replace('rc://*/ta/man/', ''), "/01.md"); // Other files are title.md, sub-title.md
            } else filepath = "".concat(taRepoSectionName, "/").concat(fieldText, "/01.md"); // Other files are title.md, sub-title.md
            // debugLog("checkSupportReferenceInTA filepath", filepath);
            // debugLog(`Need to check against ${taRepoName}`);
            _context.prev = 14;getFile_ = checkingOptions && checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.getFile ? checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.getFile : _getApi.cachedGetFile;_context.next = 18;return getFile_({ username: taRepoUsername, repository: taRepoName, path: filepath, branch: taRepoBranch });case 18:taFileContent = _context.sent; // debugLog("Fetched fileContent for", taRepoName, filepath, typeof fileContent, fileContent.length);
            if (!taFileContent) addNoticePartial({ priority: 889, message: "Unable to find/load TA article", details: "linked from TN ".concat(fieldName), excerpt: fieldText, location: "".concat(ourLocation, " ").concat(filepath) });else if (taFileContent.length < 10) addNoticePartial({ priority: 887, message: "TA article seems empty", details: "linked from TN ".concat(fieldName), excerpt: fieldText, location: "".concat(ourLocation, " ").concat(filepath) });_context.next = 25;break;case 22:_context.prev = 22;_context.t0 = _context["catch"](14); // console.error("checkSupportReferenceInTA() failed to load", taRepoUsername, taRepoName, filepath, taRepoBranch, trcGCerror.message);
            addNoticePartial({ priority: 888, message: "Error loading TA article", details: "linked from TN ".concat(fieldName), excerpt: fieldText, location: "".concat(ourLocation, " ").concat(filepath, ": ").concat(_context.t0) });case 25:return _context.abrupt("return", ctarResult);case 26:case "end":return _context.stop();}}}, _callee, null, [[14, 22]]);}));return _checkSupportReferenceInTA.apply(this, arguments);}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,