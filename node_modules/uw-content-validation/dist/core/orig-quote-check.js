"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _typeof = require("@babel/runtime/helpers/typeof");Object.defineProperty(exports, "__esModule", { value: true });exports.checkOriginalLanguageQuoteAndOccurrence = checkOriginalLanguageQuoteAndOccurrence;var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var books = _interopRequireWildcard(require("../core/books/books"));

var _defaults = require("./defaults");
var _getApi = require("../core/getApi");

var _utilities = require("./utilities");function _getRequireWildcardCache(nodeInterop) {if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {return nodeInterop ? cacheNodeInterop : cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj, nodeInterop) {if (!nodeInterop && obj && obj.__esModule) {return obj;}if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}function _createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}


// const QUOTE_VALIDATOR_VERSION_STRING = '0.9.7';


/**
 *
 * @param {string} languageCode
 * @param {string} repoCode
 * @param {string} fieldName
 * @param {string} fieldText
 * @param {string} occurrenceString
 * @param {string} bookID
 * @param {string} C
 * @param {string} V
 * @param {string} givenLocation
 * @param {Object} checkingOptions
 */function
checkOriginalLanguageQuoteAndOccurrence(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8, _x9, _x10) {return _checkOriginalLanguageQuoteAndOccurrence.apply(this, arguments);}




















































































































































































































































































































































































































































































































// end of checkOriginalLanguageQuoteAndOccurrence function
function _checkOriginalLanguageQuoteAndOccurrence() {_checkOriginalLanguageQuoteAndOccurrence = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(languageCode, repoCode, fieldName, fieldText, occurrenceString, bookID, C, V, givenLocation, checkingOptions) {var discontiguousDivider, wrongDiscontiguousDivider, ourLocation, colqResult, addNotice, getOriginalPassage, _getOriginalPassage, checkFoundQuoteSegment, warnForNotFoundQuoteSegment, excerptLength, excerptHalfLength, excerptHalfLengthPlus, occurrence, characterIndex, excerpt, _excerpt2, quoteBits, _excerpt3, _excerpt4, verseText, numQuoteBits, quoteIndex, bitIndex, partDescription, _excerpt5, verseTextBits, _verseTextBits, actualNumOccurrences, actualOccurrencesText, _excerpt6;return _regenerator.default.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:warnForNotFoundQuoteSegment = function _warnForNotFoundQuote(notFoundQuoteSegment, partDescription, occurrenceString, fullVerseText, location) {// if (partDescription) functionLog(`warnForNotFoundQuoteSegment(${notFoundQuoteSegment}, ${partDescription}, ${fullVerseText}, ${location}) ${C}:${V}…`);
              //parameterAssert(notFoundQuoteSegment !== undefined, "warnForNotFoundQuoteSegment: 'notFoundQuoteSegment' parameter should be defined");
              //parameterAssert(typeof notFoundQuoteSegment === 'string', `warnForNotFoundQuoteSegment: 'notFoundQuoteSegment' parameter should be a string not a '${typeof notFoundQuoteSegment}'`);
              //parameterAssert(notFoundQuoteSegment.indexOf(discontiguousDivider) === -1, `warnForNotFoundQuoteSegment: 'notFoundQuoteSegment' parameter should not contain '${discontiguousDivider}' divider: '${notFoundQuoteSegment}'`);
              //parameterAssert(partDescription !== undefined, "warnForNotFoundQuoteSegment: 'partDescription' parameter should be defined");
              //parameterAssert(typeof partDescription === 'string', `warnForNotFoundQuoteSegment: 'partDescription' parameter should be a string not a '${typeof partDescription}'`);
              //parameterAssert(fullVerseText !== undefined, "warnForNotFoundQuoteSegment: 'fullVerseText' parameter should be defined");
              //parameterAssert(typeof fullVerseText === 'string', `warnForNotFoundQuoteSegment: 'fullVerseText' parameter should be a string not a '${typeof fullVerseText}'`);
              //parameterAssert(location !== undefined, "warnForNotFoundQuoteSegment: 'location' parameter should be defined");
              //parameterAssert(typeof location === 'string', `warnForNotFoundQuoteSegment: 'location' parameter should be a string not a '${typeof location}'`);
              var excerpt = partDescription ? "".concat(partDescription ? '(' + partDescription + ' quote portion)' : '', " '").concat(notFoundQuoteSegment, "'") : '';var noBreakSpaceText = notFoundQuoteSegment.indexOf("\xA0") >= 0 ? "quote which contains No-Break Space shown as '⍽'" : "";if (noBreakSpaceText) notFoundQuoteSegment = notFoundQuoteSegment.replace(/\u00A0/g, '⍽'); // debugLog(`722 fieldText='${fieldText}'${extraText}`);
              // debugLog(`722 verseText='${verseText}'`);
              if (notFoundQuoteSegment[0] === ' ') {if (!excerpt) excerpt = notFoundQuoteSegment.substring(0, excerptLength) + (notFoundQuoteSegment.length > excerptLength ? '…' : '');addNotice({ priority: 916, message: "Unable to find original language quote in verse text", details: "quote which starts with a space" + (noBreakSpaceText ? ' ' + noBreakSpaceText : ''), excerpt: excerpt, location: ourLocation });} else if (notFoundQuoteSegment.endsWith(' ')) {if (!excerpt) excerpt = (notFoundQuoteSegment.length > excerptLength ? '…' : '') + notFoundQuoteSegment.substring(notFoundQuoteSegment.length - excerptLength, notFoundQuoteSegment.length);addNotice({ priority: 916, message: "Unable to find original language quote in verse text", details: "quote which ends with a space" + (noBreakSpaceText ? ' ' + noBreakSpaceText : ''), excerpt: excerpt, location: ourLocation });} else if (notFoundQuoteSegment[0] === "\u2060") {// Word joiner
                if (!excerpt) excerpt = notFoundQuoteSegment.substring(0, excerptLength) + (notFoundQuoteSegment.length > excerptLength ? '…' : '');addNotice({ priority: 916, message: "Unable to find original language quote in verse text", details: "quote which starts with 'word joiner'" + (noBreakSpaceText ? ' ' + noBreakSpaceText : ''), excerpt: excerpt, location: ourLocation });} else if (notFoundQuoteSegment.endsWith("\u2060")) {// Word joiner
                if (!excerpt) excerpt = (notFoundQuoteSegment.length > excerptLength ? '…' : '') + notFoundQuoteSegment.substring(notFoundQuoteSegment.length - excerptLength, notFoundQuoteSegment.length);addNotice({ priority: 916, message: "Unable to find original language quote in verse text", details: "quote which ends with 'word joiner'" + (noBreakSpaceText ? ' ' + noBreakSpaceText : ''), excerpt: excerpt, location: ourLocation });} else if (notFoundQuoteSegment[0] === "\u200B") {// Zero-width space
                if (!excerpt) excerpt = notFoundQuoteSegment.substring(0, excerptLength) + (notFoundQuoteSegment.length > excerptLength ? '…' : '');addNotice({ priority: 916, message: "Unable to find original language quote in verse text", details: "quote which starts with 'zero-width space'" + (noBreakSpaceText ? ' ' + noBreakSpaceText : ''), excerpt: excerpt, location: ourLocation });} else if (notFoundQuoteSegment.endsWith("\u200B")) {// Zero-width space
                if (!excerpt) excerpt = (notFoundQuoteSegment.length > excerptLength ? '…' : '') + notFoundQuoteSegment.substring(notFoundQuoteSegment.length - excerptLength, notFoundQuoteSegment.length);addNotice({ priority: 916, message: "Unable to find original language quote in verse text", details: "quote which ends with 'zero-width space'" + (noBreakSpaceText ? ' ' + noBreakSpaceText : ''), excerpt: excerpt, location: ourLocation });} else if (notFoundQuoteSegment[0] === "\u200D") {// Zero-width joiner
                if (!excerpt) excerpt = notFoundQuoteSegment.substring(0, excerptLength) + (notFoundQuoteSegment.length > excerptLength ? '…' : '');addNotice({ priority: 916, message: "Unable to find original language quote in verse text", details: "quote which starts with 'zero-width joiner'" + (noBreakSpaceText ? ' ' + noBreakSpaceText : ''), excerpt: excerpt, location: ourLocation });} else if (notFoundQuoteSegment.endsWith("\u200D")) {// Zero-width joiner
                if (!excerpt) excerpt = (notFoundQuoteSegment.length > excerptLength ? '…' : '') + notFoundQuoteSegment.substring(notFoundQuoteSegment.length - excerptLength, notFoundQuoteSegment.length);addNotice({ priority: 916, message: "Unable to find original language quote in verse text", details: "quote which ends with 'zero-width joiner'" + (noBreakSpaceText ? ' ' + noBreakSpaceText : ''), excerpt: excerpt, location: ourLocation });} else {if (!excerpt) excerpt = notFoundQuoteSegment.length <= excerptLength ? notFoundQuoteSegment : notFoundQuoteSegment.substring(0, excerptHalfLength) + (notFoundQuoteSegment.length > 2 * excerptHalfLength ? '…' : '') + notFoundQuoteSegment.substring(notFoundQuoteSegment.length - excerptHalfLength, notFoundQuoteSegment.length);addNotice({ priority: 916, message: "Unable to find original language quote in verse text", details: noBreakSpaceText ? noBreakSpaceText : "verse text \u25D7".concat(fullVerseText, "\u25D6"), excerpt: excerpt, location: ourLocation });}};checkFoundQuoteSegment = function _checkFoundQuoteSegme(foundQuoteSegment, partDescription, occurrenceString, partialVerseText, fullVerseText, location) {// if (partDescription) functionLog(`checkFoundQuoteSegment(${foundQuoteSegment}, ${partDescription}, ${verseText}, ${location}) ${C}:${V}…`);
              //parameterAssert(foundQuoteSegment !== undefined, "checkFoundQuoteSegment: 'foundQuoteSegment' parameter should be defined");
              //parameterAssert(typeof foundQuoteSegment === 'string', `checkFoundQuoteSegment: 'foundQuoteSegment' parameter should be a string not a '${typeof foundQuoteSegment}'`);
              //parameterAssert(foundQuoteSegment.indexOf(discontiguousDivider) === -1, `checkFoundQuoteSegment: 'foundQuoteSegment' parameter should not contain '${discontiguousDivider}' divider: '${foundQuoteSegment}'`);
              //parameterAssert(partDescription !== undefined, "checkFoundQuoteSegment: 'partDescription' parameter should be defined");
              //parameterAssert(typeof partDescription === 'string', `checkFoundQuoteSegment: 'partDescription' parameter should be a string not a '${typeof partDescription}'`);
              //parameterAssert(occurrenceString !== undefined, "checkFoundQuoteSegment: 'occurrenceString' parameter should be defined");
              //parameterAssert(typeof occurrenceString === 'string', `checkFoundQuoteSegment: 'occurrenceString' parameter should be a string not a '${typeof occurrenceString}'`);
              //parameterAssert(partialVerseText !== undefined, "checkFoundQuoteSegment: 'partialVerseText' parameter should be defined");
              //parameterAssert(typeof partialVerseText === 'string', `checkFoundQuoteSegment: 'partialVerseText' parameter should be a string not a '${typeof partialVerseText}'`);
              //parameterAssert(fullVerseText !== undefined, "checkFoundQuoteSegment: 'fullVerseText' parameter should be defined");
              //parameterAssert(typeof fullVerseText === 'string', `checkFoundQuoteSegment: 'fullVerseText' parameter should be a string not a '${typeof fullVerseText}'`);
              //parameterAssert(fullVerseText.length >= partialVerseText.length, `checkFoundQuoteSegment: 'partialVerseText' should not be longer`);
              //parameterAssert(location !== undefined, "checkFoundQuoteSegment: 'location' parameter should be defined");
              //parameterAssert(typeof location === 'string', `checkFoundQuoteSegment: 'location' parameter should be a string not a '${typeof location}'`);
              var details = "verse text \u25D7".concat(fullVerseText, "\u25D6");if (partDescription.length) details = "".concat(partDescription, " part of quote = \"").concat(foundQuoteSegment, "\" -- ").concat(details);var remainingVerseBits = partialVerseText.split(foundQuoteSegment); // NOTE: can split (badly) on short strings (like δὲ or εἰ) mid-word
              if (remainingVerseBits.length > 2) // Join the extra bits back up
                remainingVerseBits = [remainingVerseBits[0], remainingVerseBits.slice(1).join(discontiguousDivider)];(0, _utilities.logicAssert)(remainingVerseBits.length === 2, "remaining bits are ".concat(remainingVerseBits.length)); // Note: There's some Hebrew (RTL) characters at the beginning of the following regex
              // Note: Straight quotes are included here (even though unwanted) as other code warns about them
              // Note: We don't give errors for leading or trailing spaces here, coz that's done elsewhere
              var precedingChar = remainingVerseBits[0].slice(-1); // debugLog(`Previous char before ${C}:${V} '${foundQuoteSegment}' is '${precedingChar}'`);
              // const precedingRegex = new RegExp('[ ־*[("\'“‘]', 'g');
              // NOTE: This algorithm has to handle a single word inside another prior word, e.g., searching for δὲ in οὐδὲν δὲ συνκεκαλυμμένον ἐστὶν
              if (foundQuoteSegment.slice(0) !== ' ' && remainingVerseBits[0] && precedingChar && ' ־*[("\'“‘—'.indexOf(precedingChar) === -1 // handle punctuation expected before words
              && (foundQuoteSegment.indexOf(' ') !== -1 || partialVerseText.indexOf(" ".concat(foundQuoteSegment)) === -1) // it's multiword, or there's not another word that fits
              ) {var precederDescription;if (precedingChar === "\u2060") precederDescription = 'WordJoiner';else if (precedingChar === "\u200D") precederDescription = 'ZeroWidth-WordJoiner';else precederDescription = "".concat(precedingChar, "=D").concat(precedingChar.charCodeAt(0), "/H").concat(precedingChar.charCodeAt(0).toString(16)); // debugLog(`Seems ${bookID} ${C}:${V} '${foundQuoteSegment}' might not start at the beginning of a word—it’s preceded by '${precederDescription}' in '${partialVerseText}' of '${fullVerseText}'`);
                  var excerpt = "(".concat(precederDescription, ")").concat(foundQuoteSegment.substring(0, excerptLength - 3)).concat(foundQuoteSegment.length > excerptLength - 3 ? '…' : '').concat(occurrenceString.length ? " occurrence=".concat(occurrenceString) : ''); // We greatly lower the priority if we're less sure that it's a genuine error
                  addNotice({ priority: foundQuoteSegment.indexOf(' ') !== -1 || fullVerseText.search(" ".concat(foundQuoteSegment)) === -1 ? 909 : 389, message: "Seems original language quote might not start at the beginning of a word", details: details, characterIndex: 0, excerpt: excerpt, location: location });}var followingChar = remainingVerseBits[1][0]; // debugLog(`Next char after ${C}:${V} '${foundQuoteSegment}' is '${followingChar}'`);
              // Note: There's some Hebrew (RTL) characters at the beginning of the following string used in regex
              var allowedWordEndChars = ' ׃־.,:;?!–—)…'; // Ellipsis occurs in UGNT, e.g., Rom 3:15, Rev 2:26, 18:7
              // We make up the RegEx on the fly but we need to escape special chars in foundQuoteSegment
              // debugLog(`checkFoundQuoteSegment ${bookID} ${C}:${V} regex will be '${foundQuoteSegment}[${allowedWordEndChars}]'`);
              var escapedFoundQuoteSegment = foundQuoteSegment.replace(/\(/g, '\\(').replace(/\)/g, '\\)'); // Segments may have any one or more of these (not necessarily matched)
              // if (escapedFoundQuoteSegment !== foundQuoteSegment ) debugLog(`checkFoundQuoteSegment ${bookID} ${C}:${V} from '${foundQuoteSegment}' regex will be '${escapedFoundQuoteSegment}[${allowedWordEndChars}]'`);
              var followingRegex = new RegExp("".concat(escapedFoundQuoteSegment, "[").concat(allowedWordEndChars, "]"), 'g');if (foundQuoteSegment.slice(-1) !== ' ' && remainingVerseBits[1] && followingChar && allowedWordEndChars.indexOf(followingChar) === -1 // handle punctuation expected after words
              && (foundQuoteSegment.indexOf(' ') !== -1 || partialVerseText.search(followingRegex) === -1) // it's multiword, or there's not another word that fits
              ) {// No problems if quote is followed by expected terminator-type punctuation
                  // const badCharString = `'${followingChar}'=D${followingChar.charCodeAt(0)}/H${followingChar.charCodeAt(0).toString(16)}`;
                  // debugLog(`Seems ${bookID} ${C}:${V} '${foundQuoteSegment}' might not finish at the end of a word—it’s followed by ${badCharString} in '${partialVerseText}' of '${fullVerseText}'`);
                  var _excerpt = "".concat(foundQuoteSegment.length > excerptLength - 3 ? '…' : '').concat(foundQuoteSegment.substring(foundQuoteSegment.length - excerptLength + 3, foundQuoteSegment.length), "(").concat(followingChar, "=D").concat(remainingVerseBits[1].charCodeAt(0), "/H").concat(remainingVerseBits[1].charCodeAt(0).toString(16), ")").concat(occurrenceString.length ? " occurrence=".concat(occurrenceString) : ''); // We greatly lower the priority if we're less sure that it's a genuine error
                  addNotice({ priority: foundQuoteSegment.indexOf(' ') !== -1 || fullVerseText.search(followingRegex) === -1 ? 908 : 388, message: "Seems original language quote might not finish at the end of a word", details: details, characterIndex: foundQuoteSegment.length, excerpt: _excerpt, location: location });}};_getOriginalPassage = function _getOriginalPassage3() {_getOriginalPassage = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(bookID, C, V, checkingOptions) {var username, branch, getFile_, verseText, originalMarkdown, OBSRepoName, adjC, adjV, OBSPathname, gotIt, searchString, _iterator, _step, line, bookNumberAndName, whichTestament, originalLanguageRepoLanguageCode, originalLanguageRepoCode, originalLanguageRepoName, filename, originalUSFM, foundChapter, foundVerse, _iterator2, _step2, bookLine, ixW, ixEnd, field, bits, adjusted_field;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0: // TODO: Cache these ???
                        // functionLog(`getOriginalPassage(${bookID}, ${C}, ${V})…`);
                        try {username = checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.originalLanguageRepoUsername;} catch (qcoError) {}if (!username) username = languageCode === 'en' ? 'unfoldingWord' : 'Door43-Catalog'; // ??? !!!
                        try {branch = checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.originalLanguageRepoBranch;} catch (qcunError) {}if (!branch) branch = 'master';getFile_ = checkingOptions && checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.getFile ? checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.getFile : _getApi.cachedGetFile;verseText = '';if (!(bookID === 'OBS')) {_context.next = 53;break;}OBSRepoName = "".concat(languageCode, "_obs");adjC = C.length === 2 ? C : '0' + C;adjV = V.length === 2 ? V : '0' + V;OBSPathname = "content/".concat(adjC, ".md");_context.prev = 11;_context.next = 14;return getFile_({ username: username, repository: OBSRepoName, path: OBSPathname, branch: branch });case 14:originalMarkdown = _context.sent;_context.next = 21;break;case 17:_context.prev = 17;_context.t0 = _context["catch"](11);console.error("getOriginalPassage(".concat(bookID, ", ").concat(C, ":").concat(V, ", ").concat(JSON.stringify(checkingOptions), ") failed to load UHB"), username, languageCode, OBSPathname, branch, _context.t0.message);addNotice({ priority: 601, message: "Unable to load", details: "username=".concat(username, " error=").concat(_context.t0), OBSPathname: OBSPathname, location: ourLocation, extra: OBSRepoName });case 21:if (originalMarkdown) {_context.next = 23;break;}return _context.abrupt("return", '');case 23:gotIt = V === 'intro'; // normally false, but true for intro (so grabs first line of text = heading line)
                        searchString = "-".concat(adjC, "-").concat(adjV, "."); // NOTE: Bible references get appended to the last frame text (but I don’t think it does any harm)
                        _iterator = _createForOfIteratorHelper(originalMarkdown.split('\n'));_context.prev = 26;_iterator.s();case 28:if ((_step = _iterator.n()).done) {_context.next = 43;break;}line = _step.value;if (line) {_context.next = 32;break;}return _context.abrupt("continue", 41);case 32:if (!(line.indexOf(searchString) > 0)) {_context.next = 35;break;}gotIt = true;return _context.abrupt("continue", 41);case 35:if (!gotIt) {_context.next = 41;break;}if (!(line.indexOf('[OBS Image]') > 0)) {_context.next = 40;break;}return _context.abrupt("break", 43);case 40:verseText += line;case 41:_context.next = 28;break;case 43:_context.next = 48;break;case 45:_context.prev = 45;_context.t1 = _context["catch"](26);_iterator.e(_context.t1);case 48:_context.prev = 48;_iterator.f();return _context.finish(48);case 51:_context.next = 118;break;case 53: // not OBS, so a USFM Bible book
                        bookNumberAndName = books.usfmNumberName(bookID);try {whichTestament = books.testament(bookID); // returns 'old' or 'new'
                        } catch (bNNerror) {if (books.isValidBookID(bookID)) // must be in FRT, BAK, etc.
                            whichTestament = 'other';}(0, _utilities.logicAssert)(whichTestament === 'old' || whichTestament === 'new', "getOriginalPassage() couldn't find testament for '".concat(bookID, "'"));originalLanguageRepoLanguageCode = whichTestament === 'old' ? 'hbo' : 'el-x-koine';originalLanguageRepoCode = whichTestament === 'old' ? 'UHB' : 'UGNT';originalLanguageRepoName = "".concat(originalLanguageRepoLanguageCode, "_").concat(originalLanguageRepoCode.toLowerCase());filename = "".concat(bookNumberAndName, ".usfm");if (!(originalLanguageRepoCode === 'UHB')) {_context.next = 73;break;}_context.prev = 61;_context.next = 64;return getFile_({ username: username, repository: originalLanguageRepoName, path: filename, branch: branch });case 64:originalUSFM = _context.sent;_context.next = 71;break;case 67:_context.prev = 67;_context.t2 = _context["catch"](61);console.error("getOriginalPassage(".concat(bookID, ", ").concat(C, ":").concat(V, ", ").concat(JSON.stringify(checkingOptions), ") failed to load UHB"), username, originalLanguageRepoCode, filename, branch, _context.t2.message);addNotice({ priority: 601, message: "Unable to load", details: "username=".concat(username, " error=").concat(_context.t2), filename: filename, location: ourLocation, extra: originalLanguageRepoName });case 71:_context.next = 84;break;case 73:if (!(originalLanguageRepoCode === 'UGNT')) {_context.next = 84;break;}_context.prev = 74;_context.next = 77;return getFile_({ username: username, repository: originalLanguageRepoName, path: filename, branch: branch });case 77:originalUSFM = _context.sent;_context.next = 84;break;case 80:_context.prev = 80;_context.t3 = _context["catch"](74);console.error("getOriginalPassage(".concat(bookID, ", ").concat(C, ":").concat(V, ", ").concat(JSON.stringify(checkingOptions), ") failed to load UGNT"), username, originalLanguageRepoCode, filename, branch, _context.t3.message);addNotice({ priority: 601, message: "Unable to load", details: "username=".concat(username, " error=").concat(_context.t3), filename: filename, location: ourLocation, extra: originalLanguageRepoName });case 84:if (originalUSFM) {_context.next = 86;break;}return _context.abrupt("return", '');case 86: // Do global fixes
                        originalUSFM = originalUSFM.replace(/\\k-e\\\*/g, ''); // Remove \k-e self-closed milestones
                        originalUSFM = originalUSFM.replace(/\\k-s.+?\\\*/g, ''); // Remove \k-s self-closed milestones
                        // Now find the desired C:V
                        foundChapter = false, foundVerse = false;_iterator2 = _createForOfIteratorHelper(originalUSFM.split('\n'));_context.prev = 90;_iterator2.s();case 92:if ((_step2 = _iterator2.n()).done) {_context.next = 104;break;}bookLine = _step2.value;if (!(!foundChapter && bookLine === "\\c ".concat(C))) {_context.next = 97;break;}foundChapter = true;return _context.abrupt("continue", 102);case 97:if (foundChapter && !foundVerse && bookLine.startsWith("\\v ".concat(V))) {foundVerse = true;bookLine = bookLine.substring(3 + V.length); // Delete verse number so below bit doesn’t fail
                        }if (!foundVerse) {_context.next = 102;break;}if (!(bookLine.startsWith('\\v ') || bookLine.startsWith('\\c '))) {_context.next = 101;break;}return _context.abrupt("break", 104);case 101: // Don’t go into the next verse or chapter
                        verseText += (bookLine.startsWith('\\f ') ? '' : ' ') + bookLine;case 102:_context.next = 92;break;case 104:_context.next = 109;break;case 106:_context.prev = 106;_context.t4 = _context["catch"](90);_iterator2.e(_context.t4);case 109:_context.prev = 109;_iterator2.f();return _context.finish(109);case 112:verseText = verseText.replace(/\\p/g, '').trim().replace(/ {2}/g, ' '); // debugLog(`Got verse text1: '${verseText}'`);
                        // Remove \w fields (just leaving the actual Bible text words)
                        ixW = verseText.indexOf('\\w ');while (ixW !== -1) {ixEnd = verseText.indexOf('\\w*', ixW);if (ixEnd !== -1) {field = verseText.substring(ixW + 3, ixEnd);bits = field.split('|');adjusted_field = bits[0];verseText = verseText.substring(0, ixW) + adjusted_field + verseText.substring(ixEnd + 3);} else {(0, _utilities.debugLog)("Missing \\w* in ".concat(bookID, " ").concat(C, ":").concat(V, " verseText: '").concat(verseText, "'"));verseText = verseText.replace(/\\w /g, '', 1); // Attempt to limp on
                          }ixW = verseText.indexOf('\\w ', ixW + 1); // Might be another one
                        } // debugLog(`Got verse text2: '${verseText}'`);
                        // Remove footnotes
                        verseText = verseText.replace(/\\f (.+?)\\f\*/g, ''); // Remove alternative versifications
                        verseText = verseText.replace(/\\va (.+?)\\va\*/g, ''); // debugLog(`Got verse text3: '${verseText}'`);
                        // Final clean-up (shouldn’t be necessary, but just in case)
                        verseText = verseText.replace(/ {2}/g, ' '); //parameterAssert(verseText.indexOf('\\w') === -1, `getOriginalPassage: Should be no \\w in ${bookID} ${C}:${V} '${verseText}'`);
                        //parameterAssert(verseText.indexOf('\\k') === -1, `getOriginalPassage: Should be no \\k in ${bookID} ${C}:${V} '${verseText}'`);
                        //parameterAssert(verseText.indexOf('x-') === -1, `getOriginalPassage: Should be no x- in ${bookID} ${C}:${V} '${verseText}'`);
                        //parameterAssert(verseText.indexOf('\\f') === -1, `getOriginalPassage: Should be no \\f in ${bookID} ${C}:${V} '${verseText}'`);
                        //parameterAssert(verseText.indexOf('\\x') === -1, `getOriginalPassage: Should be no \\x in ${bookID} ${C}:${V} '${verseText}'`);
                      case 118:return _context.abrupt("return", verseText);case 119:case "end":return _context.stop();}}}, _callee, null, [[11, 17], [26, 45, 48, 51], [61, 67], [74, 80], [90, 106, 109, 112]]);}));return _getOriginalPassage.apply(this, arguments);};getOriginalPassage = function _getOriginalPassage2(_x11, _x12, _x13, _x14) {return _getOriginalPassage.apply(this, arguments);};addNotice = function _addNotice(noticeObject) {// functionLog(`checkOriginalLanguageQuoteAndOccurrence Notice: (priority=${noticeObject.priority}) ${noticeObject.message}${characterIndex > 0 ? ` (at character ${noticeObject.characterIndex})` : ""}${noticeObject.excerpt ? ` ${noticeObject.excerpt}` : ""}${noticeObject.location}`);
              //parameterAssert(noticeObject.priority !== undefined, "cOLQ addNotice: 'priority' parameter should be defined");
              //parameterAssert(typeof noticeObject.priority === 'number', `cOLQ addNotice: 'priority' parameter should be a number not a '${typeof noticeObject.priority}': ${noticeObject.priority}`);
              //parameterAssert(noticeObject.message !== undefined, "cOLQ addNotice: 'message' parameter should be defined");
              //parameterAssert(typeof noticeObject.message === 'string', `cOLQ addNotice: 'message' parameter should be a string not a '${typeof noticeObject.message}': ${noticeObject.message}`);
              // //parameterAssert(characterIndex !== undefined, "cOLQ addNotice: 'characterIndex' parameter should be defined");
              if (noticeObject.characterIndex) {//parameterAssert(typeof noticeObject.characterIndex === 'number', `cOLQ addNotice: 'characterIndex' parameter should be a number not a '${typeof noticeObject.characterIndex}': ${noticeObject.characterIndex}`);
              } // //parameterAssert(excerpt !== undefined, "cOLQ addNotice: 'excerpt' parameter should be defined");
              if (noticeObject.excerpt) {//parameterAssert(typeof noticeObject.excerpt === 'string', `cOLQ addNotice: 'excerpt' parameter should be a string not a '${typeof noticeObject.excerpt}': ${noticeObject.excerpt} for ${noticeObject.priority}`);
              } //parameterAssert(noticeObject.location !== undefined, "cOLQ addNotice: 'location' parameter should be defined");
              //parameterAssert(typeof noticeObject.location === 'string', `cOLQ addNotice: 'location' parameter should be a string not a '${typeof noticeObject.location}': ${noticeObject.location}`);
              colqResult.noticeList.push(noticeObject);}; // Checks that the Hebrew/Greek quote can be found in the original texts
            // Also checks that the Occurrence is valid
            // bookID is a three-character UPPERCASE USFM book identifier or 'OBS'.
            // Note that the original language verse text can be passed in as
            //      checkingOptions?.originalLanguageVerseText.
            // Alternatively, we can fetch it from Door43 -- you can control this with:
            //      checkingOptions?.originalLanguageRepoUsername
            //      (UHB or UGNT will be used for the repo name)
            //      checkingOptions?.originalLanguageRepoBranch (or tag)
            // functionLog(`checkOriginalLanguageQuoteAndOccurrence v${QUOTE_VALIDATOR_VERSION_STRING} ${languageCode}, ${repoCode}, ${fieldName}, (${fieldText.length}) '${fieldText}', ${occurrenceString}, ${bookID} ${C}:${V} ${givenLocation}, …)…`);
            //parameterAssert(languageCode !== undefined, "checkOriginalLanguageQuoteAndOccurrence: 'languageCode' parameter should be defined");
            //parameterAssert(typeof languageCode === 'string', `checkOriginalLanguageQuoteAndOccurrence: 'languageCode' parameter should be a string not a '${typeof languageCode}'`);
            //parameterAssert(repoCode !== undefined, "checkOriginalLanguageQuoteAndOccurrence: 'repoCode' parameter should be defined");
            //parameterAssert(typeof repoCode === 'string', `checkOriginalLanguageQuoteAndOccurrence: 'repoCode' parameter should be a string not a '${typeof repoCode}'`);
            //parameterAssert(REPO_CODES_LIST.includes(repoCode), `checkOriginalLanguageQuoteAndOccurrence: 'repoCode' parameter should not be '${repoCode}'`);
            //parameterAssert(fieldName !== undefined, "checkOriginalLanguageQuoteAndOccurrence: 'fieldName' parameter should be defined");
            //parameterAssert(typeof fieldName === 'string', `checkOriginalLanguageQuoteAndOccurrence: 'fieldName' parameter should be a string not a '${typeof fieldName}'`);
            //parameterAssert(fieldText !== undefined, "checkOriginalLanguageQuoteAndOccurrence: 'fieldText' parameter should be defined");
            //parameterAssert(typeof fieldText === 'string', `checkOriginalLanguageQuoteAndOccurrence: 'fieldText' parameter should be a string not a '${typeof fieldText}'`);
            //parameterAssert(fieldText.length >= 1, `checkOriginalLanguageQuoteAndOccurrence: 'fieldText' parameter should have text not ${fieldText.length} characters`);
            //parameterAssert(occurrenceString !== undefined, "checkOriginalLanguageQuoteAndOccurrence: 'occurrenceString' parameter should be defined");
            //parameterAssert(typeof occurrenceString === 'string', `checkOriginalLanguageQuoteAndOccurrence: 'occurrenceString' parameter should be a string not a '${typeof occurrenceString}'`);
            //parameterAssert(bookID !== undefined, "checkOriginalLanguageQuoteAndOccurrence: 'bookID' parameter should be defined");
            //parameterAssert(typeof bookID === 'string', `checkOriginalLanguageQuoteAndOccurrence: 'bookID' parameter should be a string not a '${typeof bookID}'`);
            //parameterAssert(bookID.length === 3, `checkOriginalLanguageQuoteAndOccurrence: 'bookID' parameter should be three characters long not ${bookID.length}`);
            //parameterAssert(bookID.toUpperCase() === bookID, `checkOriginalLanguageQuoteAndOccurrence: 'bookID' parameter should be UPPERCASE not '${bookID}'`);
            //parameterAssert(bookID === 'OBS' || books.isValidBookID(bookID), `checkOriginalLanguageQuoteAndOccurrence: '${bookID}' is not a valid USFM book identifier`);
            //parameterAssert(C !== undefined, "checkOriginalLanguageQuoteAndOccurrence: 'C' parameter should be defined");
            //parameterAssert(typeof C === 'string', `checkOriginalLanguageQuoteAndOccurrence: 'C' parameter should be a string not a '${typeof C}'`);
            //parameterAssert(V !== undefined, "checkOriginalLanguageQuoteAndOccurrence: 'V' parameter should be defined");
            //parameterAssert(typeof V === 'string', `checkOriginalLanguageQuoteAndOccurrence: 'V' parameter should be a string not a '${typeof V}'`);
            //parameterAssert(givenLocation !== undefined, "checkOriginalLanguageQuoteAndOccurrence: 'givenLocation' parameter should be defined");
            //parameterAssert(typeof givenLocation === 'string', `checkOriginalLanguageQuoteAndOccurrence: 'givenLocation' parameter should be a string not a '${typeof givenLocation}'`);
            discontiguousDivider = repoCode === 'TN' ? '…' : ' & ';wrongDiscontiguousDivider = repoCode === 'TN' ? '&' : '…'; // leave out the spaces around ampersand
            // debugLog(`Got discontiguousDivider='${discontiguousDivider}' for ${repoCode}`);
            ourLocation = givenLocation;if (ourLocation && ourLocation[0] !== ' ') ourLocation = " ".concat(ourLocation);colqResult = { noticeList: [] };try {excerptLength = checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.excerptLength;} catch (gcELerror) {}if (typeof excerptLength !== 'number' || isNaN(excerptLength)) {excerptLength = _defaults.DEFAULT_EXCERPT_LENGTH; // debugLog(`Using default excerptLength=${excerptLength}`);
            } // else
            // debugLog(`Using supplied excerptLength=${excerptLength}`, `cf. default=${DEFAULT_EXCERPT_LENGTH}`);
            excerptHalfLength = Math.floor(excerptLength / 2); // rounded down
            excerptHalfLengthPlus = Math.floor((excerptLength + 1) / 2); // rounded up
            // debugLog(`Using excerptHalfLength=${excerptHalfLength}`, `excerptHalfLengthPlus=${excerptHalfLengthPlus}`);
            occurrence = 1;try {occurrence = (0, _utilities.ourParseInt)(occurrenceString);} catch (_unused) {(0, _utilities.dataAssert)(false, "NOTE: We got occurrence=".concat(occurrence, " from ").concat(C, ":").concat(V, " '").concat(occurrenceString, "'"));} // errors in this field are noted elsewhere
            // if fieldText.lstrip() !== fieldText:
            //     addNotice({priority:0, message:`Unexpected whitespace at start of ${TNid} '${fieldText}'")
            // if fieldText.rstrip() !== fieldText:
            //     addNotice({priority:0, message:`Unexpected whitespace at end of ${TNid} '${fieldText}'")
            // fieldText = fieldText.strip() # so we don’t get consequential errors
            if ((characterIndex = fieldText.indexOf(wrongDiscontiguousDivider)) !== -1) {excerpt = (characterIndex > excerptHalfLength ? '…' : '') + fieldText.substring(characterIndex - excerptHalfLength, characterIndex + excerptHalfLengthPlus) + (characterIndex + excerptHalfLengthPlus < fieldText.length ? '…' : '');addNotice({ priority: 918, message: "Seems like the wrong divider for discontiguous quote segments", details: "expected \u25D7".concat(discontiguousDivider, "\u25D6"), characterIndex: characterIndex, excerpt: excerpt, location: ourLocation });}if (discontiguousDivider === '…' && (characterIndex = fieldText.indexOf('...')) >= 0) {// debugLog(`Bad ellipse characters in '${fieldText}'`);
              _excerpt2 = (characterIndex > excerptHalfLength ? '…' : '') + fieldText.substring(characterIndex - excerptHalfLength, characterIndex + excerptHalfLengthPlus) + (characterIndex + excerptHalfLengthPlus < fieldText.length ? '…' : '');addNotice({ priority: 159, message: "Should use proper ellipse character (not periods)", characterIndex: characterIndex, excerpt: _excerpt2, location: ourLocation });}if (fieldText.indexOf(discontiguousDivider) >= 0) {quoteBits = fieldText.split(discontiguousDivider);if ((characterIndex = fieldText.indexOf(" ".concat(discontiguousDivider))) >= 0 || (characterIndex = fieldText.indexOf("".concat(discontiguousDivider, " "))) >= 0) {// debugLog(`Unexpected space(s) beside ellipse in '${fieldText}'`);
                _excerpt3 = (characterIndex > excerptHalfLength ? '…' : '') + fieldText.substring(characterIndex - excerptHalfLength, characterIndex + excerptHalfLengthPlus) + (characterIndex + excerptHalfLengthPlus < fieldText.length ? '…' : '');addNotice({ priority: 158, message: "Unexpected space(s) beside divider ".concat(discontiguousDivider), characterIndex: characterIndex, excerpt: _excerpt3, location: ourLocation });} // } else if (fieldText.indexOf('↔') >= 0) {
              //     quoteBits = fieldText.split('↔');
              //     if ((characterIndex = fieldText.indexOf(' ↔')) >= 0 || (characterIndex = fieldText.indexOf('↔ ')) >= 0) {
              //         // debugLog(`Unexpected space(s) beside ellipse in '${fieldText}'`);
              //         const excerpt = (characterIndex > excerptHalfLength ? '…' : '') + fieldText.substring(characterIndex - excerptHalfLength, characterIndex + excerptHalfLengthPlus) + (characterIndex + excerptHalfLengthPlus < fieldText.length ? '…' : '');
              //         addNotice({ priority: 157, message: `Unexpected space(s) beside divider ${discontiguousDivider}`, characterIndex, excerpt, location: ourLocation });
              //     }
            } else if (discontiguousDivider === '…' && fieldText.indexOf('...') >= 0) {// Yes, we still actually allow this
              quoteBits = fieldText.split('...');if ((characterIndex = fieldText.indexOf(' ...')) >= 0 || (characterIndex = fieldText.indexOf('... ')) >= 0) {// debugLog(`Unexpected space(s) beside ellipse characters in '${fieldText}'`);
                _excerpt4 = (characterIndex > excerptHalfLength ? '…' : '') + fieldText.substring(characterIndex - excerptHalfLength, characterIndex + excerptHalfLengthPlus) + (characterIndex + excerptHalfLengthPlus < fieldText.length ? '…' : '');addNotice({ priority: 156, message: "Unexpected space(s) beside ellipse characters", characterIndex: characterIndex, excerpt: _excerpt4, location: ourLocation });}} // debugLog(`Got quoteBits=${quoteBits}`);
            // Find the verse text in the original language
            try {verseText = checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.originalLanguageVerseText;} catch (gcVTerror) {}if (verseText) {_context2.next = 31;break;}if (!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.disableAllLinkFetchingFlag)) {_context2.next = 25;break;}return _context2.abrupt("return", colqResult);case 25:_context2.next = 27;return getOriginalPassage(bookID, C, V, checkingOptions);case 27:verseText = _context2.sent;if (verseText) {_context2.next = 31;break;}addNotice({ priority: 851, message: bookID === 'OBS' ? "Unable to load OBS story text" : "Unable to load original language verse text", location: ourLocation });return _context2.abrupt("return", colqResult);case 31: // Now check if the quote can be found in the verse text
            if (quoteBits) {// it had an ellipsis
              // //parameterAssert(occurrence === 1, `Oh -- can get '${fieldText}' with occurrence=${occurrence} in ${bookID} ${C}:${V}`);
              if (occurrence !== 1) {addNotice({ priority: 50, message: "Is this quote/occurrence correct???", details: "Occurrence=".concat(occurrence), excerpt: fieldText, location: ourLocation });} // TODO: Are we checking the correct occurrence below ???
              numQuoteBits = quoteBits.length;if (numQuoteBits >= 2) {quoteIndex = -1; // These parts have to be in order, i.e., found in the verse one AFTER the other
                for (bitIndex = 0; bitIndex < numQuoteBits; bitIndex++) {// debugLog(`warnForNotFoundQuoteSegment: checking quote part ${bitIndex} '${quoteBits[bitIndex]}' from '${fieldText}' against '${verseText.substring(quoteIndex)}' from '${verseText}'`)
                  partDescription = void 0;if (numQuoteBits === 1) partDescription = '';else if (bitIndex === 0) partDescription = 'beginning';else if (bitIndex === numQuoteBits - 1) partDescription = 'end';else partDescription = "middle".concat(numQuoteBits > 3 ? bitIndex : '');if ((quoteIndex = verseText.indexOf(quoteBits[bitIndex], quoteIndex + 1)) < 0) {// this is what we really want to catch
                    // If the quote has multiple parts, create a description of the current part
                    _excerpt5 = "".concat(partDescription ? '(' + partDescription + ' quote portion)' : '', " '").concat(quoteBits[bitIndex], "'");if (verseText.indexOf(quoteBits[bitIndex]) >= 0) {(0, _utilities.logicAssert)(bitIndex > 0, "This shouldn't happen for bitIndex of zero!"); // debugLog(`914, Unable to find '${fieldText}' ${numQuoteBits === 1 ? '' : `'${quoteBits[bitIndex]}' `}${partDescription ? '(' + partDescription + ') ' : ''}in '${verseText}'`);
                      addNotice({ priority: 914, message: "Unable to find original language quote portion in the right place in the verse text", details: "verse text \u25D7".concat(verseText, "\u25D6"), excerpt: _excerpt5, location: ourLocation });} else {// debugLog(`915, Unable to find '${fieldText}' ${numQuoteBits === 1 ? '' : `'${quoteBits[bitIndex]}' `}${partDescription ? '(' + partDescription + ') ' : ''}in '${verseText}'`);
                      warnForNotFoundQuoteSegment(fieldText, partDescription, occurrenceString, verseText, ourLocation); // addNotice({ priority: 915, message: "Unable to find original language quote portion in verse text", details: `verse text ◗${verseText}◖`, excerpt, location: ourLocation });
                    }} else {// We found this bit
                    // debugLog(`Found ${C}:${V} origQuote portion ${bitIndex} '${quoteBits[bitIndex]}' at ${quoteIndex} (num text chars = ${verseText.length})`);
                    verseTextBits = verseText.split(quoteBits[bitIndex]); // NOTE: can split (badly) on short strings (like δὲ or εἰ) mid-word
                    checkFoundQuoteSegment(quoteBits[bitIndex], partDescription, occurrenceString, "".concat(verseTextBits[occurrence - 1]).concat(quoteBits[bitIndex]).concat(verseTextBits[occurrence]), verseText, ourLocation);}}} else // < 2
                addNotice({ priority: 815, message: "Divider without surrounding snippet", location: ourLocation });} else {// Only a single quote (no discontiguousDivider)
              if (verseText.indexOf(fieldText) >= 0) {if (occurrence > 1) {// functionLog(`checkOriginalLanguageQuoteAndOccurrence is checking for ${occurrence} occurrences of ${fieldText}`);
                  _verseTextBits = verseText.split(fieldText); // NOTE: can split (badly) on short strings (like δὲ or εἰ) mid-word
                  actualNumOccurrences = _verseTextBits.length - 1;if (occurrence > actualNumOccurrences) {// There's not enough of them
                    actualOccurrencesText = actualNumOccurrences === 0 ? 'no' : "only ".concat(actualNumOccurrences);_excerpt6 = fieldText.substring(0, excerptHalfLength) + (fieldText.length > 2 * excerptHalfLength ? '…' : '') + fieldText.substring(fieldText.length - excerptHalfLength, fieldText.length);addNotice({ priority: 917, message: "Unable to find duplicate original language quote in verse text", details: "occurrence=".concat(occurrenceString, " but ").concat(actualOccurrencesText, " occurrence").concat(actualNumOccurrences === 1 ? '' : 's', " found, passage \u25D7").concat(verseText, "\u25D6"), excerpt: _excerpt6, location: ourLocation });} else {checkFoundQuoteSegment(fieldText, '', occurrenceString, "".concat(_verseTextBits[occurrence - 1]).concat(fieldText).concat(_verseTextBits[occurrence]), verseText, ourLocation);}} else {// We only need to check for one occurrence
                  // TODO: The error in the next line has been notified elsewhere, but should we try to handle it more intelligently here ???
                  (0, _utilities.logicAssert)(occurrence === 1 || occurrence === -1, "Expected ".concat(C, ":").concat(V, " occurrence to be 1 or -1 not ").concat(occurrence, " from '").concat(occurrenceString, "' for ").concat(C, ":").concat(V, " '").concat(fieldText, "'")); // Double check that it doesn’t start/stop in the middle of a word
                  // debugLog(`Here with fieldText=${fieldText} and verseText=${verseText}`);
                  // debugLog(`remainingBits=${JSON.stringify(remainingBits)}`);
                  checkFoundQuoteSegment(fieldText, '', occurrenceString, verseText, verseText, ourLocation);}} else {// can’t find the given text
                // debugLog(`916, Unable to find '${fieldText}' in '${verseText}'`);
                warnForNotFoundQuoteSegment(fieldText, '', occurrenceString, verseText, ourLocation);}} // functionLog(`checkOriginalLanguageQuoteAndOccurrence is returning ${ JSON.stringify(colqResult) }`);
            return _context2.abrupt("return", colqResult);case 33:case "end":return _context2.stop();}}}, _callee2);}));return _checkOriginalLanguageQuoteAndOccurrence.apply(this, arguments);}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,