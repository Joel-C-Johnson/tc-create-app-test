"use strict";var _typeof = require("@babel/runtime/helpers/typeof");Object.defineProperty(exports, "__esModule", { value: true });exports.runUsfmJsCheck = runUsfmJsCheck;exports.checkUSFMToJSON = checkUSFMToJSON;var _usfmJs = require("usfm-js");

var books = _interopRequireWildcard(require("../core/books/books"));

var _utilities = require("./utilities");function _getRequireWildcardCache(nodeInterop) {if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {return nodeInterop ? cacheNodeInterop : cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj, nodeInterop) {if (!nodeInterop && obj && obj.__esModule) {return obj;}if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;} // eslint-disable-next-line no-unused-vars
// eslint-disable-next-line no-unused-vars

function runUsfmJsCheck(fileText, convertOptions) {
  // Runs the USFM-JS converter as a check
  //  which can be quite time-consuming on large, complex USFM files
  // debugLog("Running USFM-JS converter check (can take quite a while for a large book)…");

  var jsonResult = (0, _usfmJs.toJSON)(fileText, convertOptions);
  var jsonKeys = Object.keys(jsonResult); // Expect 'headers', 'chapters'
  var numJSONkeys = jsonKeys.length;
  // debugLog(`  Finished USFM-JS converter check with ${numJSONkeys} json key(s)`);
  // debugLog(`  jsonResult: ${JSON.stringify(jsonResult)}`)
  // NOTE: We don’t know how to get the errors out yet

  return { isValidUSFM: numJSONkeys >= 2, returnedJSON: jsonResult }; // Expect 'headers', 'chapters'
}
// end of runUsfmJsCheck function


function checkUSFMToJSON(bookID, filename, givenText, givenLocation, checkingOptions) {
  /*
  This function is only used for the demonstration pages -- not for the core!
   bookID is a three-character UPPERCASE USFM book identifier.
       filename parameter can be an empty string if we don’t have one.
    Returns a result object containing a successList and a noticeList
   */



  // functionLog(`checkUSFMToJSON(${givenText.length.toLocaleString()} chars, '${givenLocation}')…`);
  //parameterAssert(bookID !== undefined, "checkUSFMToJSON: 'bookID' parameter should be defined");
  //parameterAssert(typeof bookID === 'string', `checkUSFMToJSON: 'bookID' parameter should be a string not a '${typeof bookID}': ${bookID}`);
  //parameterAssert(bookID.length === 3, `checkUSFMToJSON: 'bookID' parameter should be three characters long not ${bookID.length}`);
  //parameterAssert(bookID.toUpperCase() === bookID, `checkUSFMToJSON: 'bookID' parameter should be UPPERCASE not '${bookID}'`);
  //parameterAssert(books.isValidBookID(bookID), `checkUSFMToJSON: '${bookID}' is not a valid USFM book identifier`);
  //parameterAssert(filename !== undefined, "checkUSFMToJSON: 'filename' parameter should be defined");
  //parameterAssert(typeof filename === 'string', `checkUSFMToJSON: 'filename' parameter should be a string not a '${typeof filename}': ${filename}`);
  //parameterAssert(givenText !== undefined, "checkUSFMToJSON: 'givenText' parameter should be defined");
  //parameterAssert(typeof givenText === 'string', `checkUSFMToJSON: 'givenText' parameter should be a string not a '${typeof givenText}': ${givenText}`);
  //parameterAssert(givenLocation !== undefined, "checkUSFMToJSON: 'givenRowLocation' parameter should be defined");
  //parameterAssert(typeof givenLocation === 'string', `checkUSFMToJSON: 'givenRowLocation' parameter should be a string not a '${typeof givenLocation}'`);

  var ourLocation = givenLocation;
  if (ourLocation && ourLocation[0] !== ' ') ourLocation = " ".concat(ourLocation);
  // if (filename) ourLocation = ` in ${filename}${ourLocation}`;


  var result = { successList: [], noticeList: [] };

  function addSuccessMessage(successString) {
    // functionLog(`checkUSFMToJSON success: ${successString}`);
    result.successList.push(successString);
  }
  function addNotice6to7(_ref) {var priority = _ref.priority,message = _ref.message,lineNumber = _ref.lineNumber,characterIndex = _ref.characterIndex,excerpt = _ref.excerpt,location = _ref.location;
    /**
    * @description - adds a new notice entry, adding bookID,C,V to the given fields
    * @param {Number} priority - notice priority from 1 (lowest) to 999 (highest)
    * @param {string} message - the text of the notice message
    * @param {Number} characterIndex - where the issue occurs in the line
    * @param {string} excerpt - short excerpt from the line centred on the problem (if available)
    * @param {string} location - description of where the issue is located
    */
    // functionLog(`checkUSFMToJSON notice: (priority=${priority}) ${message}${characterIndex > 0 ? ` (at character ${characterIndex})` : ""}${excerpt ? ` ${excerpt}` : ""}${location}`);
    //parameterAssert(priority !== undefined, "cUSFMjs addNotice6to7: 'priority' parameter should be defined");
    //parameterAssert(typeof priority === 'number', `cUSFMjs addNotice6to7: 'priority' parameter should be a number not a '${typeof priority}': ${priority}`);
    //parameterAssert(message !== undefined, "cUSFMjs addNotice6to7: 'message' parameter should be defined");
    //parameterAssert(typeof message === 'string', `cUSFMjs addNotice6to7: 'message' parameter should be a string not a '${typeof message}': ${message}`);
    // //parameterAssert(characterIndex !== undefined, "cUSFMjs addNotice6to7: 'characterIndex' parameter should be defined");
    if (characterIndex) {//parameterAssert(typeof characterIndex === 'number', `cUSFMjs addNotice6to7: 'characterIndex' parameter should be a number not a '${typeof characterIndex}': ${characterIndex}`);
    }
    // //parameterAssert(excerpt !== undefined, "cUSFMjs addNotice6to7: 'excerpt' parameter should be defined");
    if (excerpt) {//parameterAssert(typeof excerpt === 'string', `cUSFMjs addNotice6to7: 'excerpt' parameter should be a string not a '${typeof excerpt}': ${excerpt}`);
    }
    //parameterAssert(location !== undefined, "cUSFMjs addNotice6to7: 'location' parameter should be defined");
    //parameterAssert(typeof location === 'string', `cUSFMjs addNotice6to7: 'location' parameter should be a string not a '${typeof location}': ${location}`);
    result.noticeList.push({ priority: priority, message: message, bookID: bookID, lineNumber: lineNumber, characterIndex: characterIndex, excerpt: excerpt, location: location });
  }


  // Set your options here -- change values or comment out lines
  var convertOptions = {
    'chunk': false, // true: returns headers/chapters/verses (seems weird???); false: returns headers/chapters only.
    //'content-source': ourLocation, // Seems to be included in every sub-object -- wasted space ???
    'convertToInt': [] };

  var convertCheckResult = runUsfmJsCheck(givenText, convertOptions);
  // NOTE: We haven’t figured out how to get ERRORS out of this parser yet

  if (!convertCheckResult.isValidUSFM)
  addNotice6to7({ priority: 943, message: "USFM3 toJSON Check doesn\u2019t pass", location: ourLocation });

  addSuccessMessage("Checked USFM-JS");
  // debugLog(`  checkUSFMToJSON returning with ${result.successList.length.toLocaleString()} success(es) and ${result.noticeList.length.toLocaleString()} notice(s).`);
  // functionLog(`checkUSFMToJSON result is ${JSON.stringify(result)}`);
  return result;
}
// end of checkUSFMToJSON function
//# sourceMappingURL=data:application/json;charset=utf-8;base64,