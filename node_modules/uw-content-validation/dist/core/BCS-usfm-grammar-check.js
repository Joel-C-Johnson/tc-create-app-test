"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _typeof = require("@babel/runtime/helpers/typeof");Object.defineProperty(exports, "__esModule", { value: true });exports.runBCSGrammarCheck = runBCSGrammarCheck;exports.checkUSFMGrammar = checkUSFMGrammar;var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));var _usfmGrammar = _interopRequireDefault(require("usfm-grammar"));
var books = _interopRequireWildcard(require("../core/books/books"));
var _defaults = require("./defaults");

var _utilities = require("./utilities");function _getRequireWildcardCache(nodeInterop) {if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {return nodeInterop ? cacheNodeInterop : cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj, nodeInterop) {if (!nodeInterop && obj && obj.__esModule) {return obj;}if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {(0, _defineProperty2.default)(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}


// const USFM_GRAMMAR_VALIDATOR_VERSION_STRING = '0.4.5';

var LINE_COLUMN_NUMBERS_REGEX = new RegExp('Line (\\d{1,6}), col (\\d{1,4}):'); // e.g., "Line 1538, col 4: 1537 ..."


/**
 *
 * @param {string} strictnessString -- 'strict' or 'relaxed'
 * @param {string} bookID -- 3-character book ID
 * @param {string} fileText -- the actual USFM text
 * @param {string} filename -- for error messages
 * @param {string} givenLocation -- for error messages
 * @param {Object} checkingOptions -- optional options
 * @returns {Object} including isValidUSFM flag
 */
function runBCSGrammarCheck(strictnessString, bookID, fileText, filename, givenLocation, checkingOptions) {
  // Runs the BCS USFM Grammar checker
  //  which can be quite time-consuming on large, complex USFM files
  // userLog(`Running ${strictnessString} BCS USFM grammar check${givenLocation} (can take quite a while for a large book)…`);
  //parameterAssert(strictnessString === 'strict' || strictnessString === 'relaxed', `Unexpected strictnessString='${strictnessString}'`);

  var excerptLength;
  try {
    excerptLength = checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.excerptLength;
  } catch (usfmELerror) {}
  if (typeof excerptLength !== 'number' || isNaN(excerptLength)) {
    excerptLength = _defaults.DEFAULT_EXCERPT_LENGTH;
    // debugLog(`Using default excerptLength=${excerptLength}`);
  }
  // else
  // debugLog(`Using supplied excerptLength=${excerptLength} cf. default=${DEFAULT_EXCERPT_LENGTH}`);
  var excerptHalfLength = Math.floor(excerptLength / 2); // rounded down
  var excerptHalfLengthPlus = Math.floor((excerptLength + 1) / 2); // rounded up
  // debugLog(`Using excerptHalfLength=${excerptHalfLength}`, `excerptHalfLengthPlus=${excerptHalfLengthPlus}`);

  // Now create the parser and run the check
  var parserToJSONResultObject, parseWarnings;
  try {
    // debugLog(`${new Date().getTime() / 1000} Setting-up the USFMGrammar checker…`);
    var ourUsfmParser = new _usfmGrammar.default.USFMParser(fileText, strictnessString === 'relaxed' ? _usfmGrammar.default.LEVEL.RELAXED : null);
    // Returns a Boolean indicating whether the input USFM text satisfies the grammar or not.
    // This method is available in both default and relaxed modes.
    // const parserResult = ourUsfmParser.validate();
    // debugLog(`${new Date().getTime() / 1000} Running the BCS USFMGrammar checker (may take several seconds)…`);
    // userLog(`Running the BCS USFMGrammar checker for ${bookID} (may take several seconds)…`);
    parserToJSONResultObject = ourUsfmParser.toJSON();
    // debugLog(`${new Date().getTime() / 1000} Got the BCS USFMGrammar checker toJSON result: ${Object.keys(parserToJSONResultObject)}`);
    // debugLog(`${new Date().getTime() / 1000} Got the BCS USFMGrammar checker toJSON _messages: ${Object.keys(parserToJSONResultObject._messages)}`);
    // debugLog(`${new Date().getTime() / 1000} Got the BCS USFMGrammar checker: ${Object.keys(ourUsfmParser)}`);
    parseWarnings = parserToJSONResultObject._warnings ? parserToJSONResultObject._warnings : ourUsfmParser.warnings;
    // debugLog(`${new Date().getTime() / 1000} Got warnings from the BCS USFMGrammar checker: (${parseWarnings.length}) ${parseWarnings}`);
  } catch (parserError) {// This is how the Parser returns USFM errors, i.e., it stops after the first error
    // debugLog(`${new Date().getTime() / 1000} Got an exception when using the BCS USFMGrammar checker: ${parserError}`);
    var _ourErrorObject = {
      priority: 840, message: "USFMGrammar check failed",
      details: parserError,
      filename: filename,
      location: givenLocation };

    try {// See if we can improve the result with line and column numbers
      // NOTE: The following code is quite fragile
      //  as it depends on the precise format of the error message returned from USFMParser
      var regexResultArray = LINE_COLUMN_NUMBERS_REGEX.exec(parserError);
      var _regexResultArray = (0, _slicedToArray2.default)(regexResultArray, 3),totalLink = _regexResultArray[0],_lineNumberString = _regexResultArray[1],columnNumberString = _regexResultArray[2];
      _ourErrorObject.lineNumber = (0, _utilities.ourParseInt)(_lineNumberString);
      _ourErrorObject.characterIndex = (0, _utilities.ourParseInt)(columnNumberString) - 1;
      var errorLineText = fileText.split('\n')[_ourErrorObject.lineNumber - 1];
      _ourErrorObject.excerpt = (_ourErrorObject.characterIndex > excerptHalfLength ? '…' : '') + errorLineText.substring(_ourErrorObject.characterIndex - excerptHalfLength, _ourErrorObject.characterIndex + excerptHalfLengthPlus) + (_ourErrorObject.characterIndex + excerptHalfLengthPlus < errorLineText.length ? '…' : '');
      // NOTE: Not 100% sure that it's more helpful to the user if we do this next line ???
      _ourErrorObject.details = _ourErrorObject.details.substring(totalLink.length); // Delete the line and column numbers that we found
    } catch (secondError) {
      (0, _utilities.debugLog)("USFMGrammar second error: ".concat(secondError));
    }
    return { isValidUSFM: false, error: _ourErrorObject, warnings: [] };
  }
  var parserMessages;
  parserMessages = parserToJSONResultObject._messages; // Throw away the JSON (if any)
  // debugLog(`  Finished BCS USFM grammar check with messages: ${JSON.stringify(parserResult)}\n and warnings: ${JSON.stringify(ourUsfmParser.warnings)}.`);

  // TODO: I think most of the following code is now obsolete and can be deleted
  var parseError;
  parseError = parserMessages._error;
  var ourErrorMessage, lineNumberString, characterIndex, excerpt;
  // NOTE: The following code is quite fragile
  //  as it depends on the precise format of the error message returned from USFMParser
  var ourErrorObject = {};
  if (parseError) {
    (0, _utilities.debugLog)("Oh! This USFMGrammer check code IS still needed!!!");
    var contextRE = /(\d+?)\s\|\s(.+)/g;var _iterator = _createForOfIteratorHelper(
    parseError.split('\n')),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var errorLine = _step.value;
        // debugLog(`BCS errorLine=${errorLine}`);
        if (errorLine.startsWith('>')) {
          var regexResult = contextRE.exec(errorLine.substring(1).trim());
          // debugLog(`  regexResult: ${JSON.stringify(regexResult)}`);
          if (regexResult) {
            lineNumberString = regexResult[1];
            excerpt = regexResult[2];
          }
        } else
        if (errorLine.endsWith('^')) {
          characterIndex = errorLine.indexOf('^') - 8;
          if (characterIndex < 0) characterIndex = 0; // Just in case
          if (excerpt.length)
          excerpt = (characterIndex > excerptHalfLength ? '…' : '') + excerpt.substring(characterIndex - excerptHalfLength, characterIndex + excerptHalfLengthPlus) + (characterIndex + excerptHalfLengthPlus < excerpt.length ? '…' : '');
        } else
        ourErrorMessage = errorLine; // We only want the last one
      }
      // debugLog(`  ourErrorMessage: '${ourErrorMessage}' lineNumberString=${lineNumberString} characterIndex=${characterIndex} excerpt='${excerpt}'`);

      // Some of these "errors" need to be degraded in priority
    } catch (err) {_iterator.e(err);} finally {_iterator.f();}
    var adjustedPriority = 594; // We don’t make these extra high coz the messages are hard for users to interpret
    if (excerpt === '\\s5' // Temporarily, even though \s5 fields are not valid USFM
    || ourErrorMessage.startsWith('Expected "f*", "+"') // Might neeed a OHM schema fix?
    )
      adjustedPriority = 294;

    ourErrorObject = {
      priority: adjustedPriority, message: "USFMGrammar: ".concat(ourErrorMessage),
      filename: filename,
      characterIndex: characterIndex, excerpt: excerpt,
      location: givenLocation };


    // Save our line number
    if (lineNumberString && lineNumberString.length) {
      // ourErrorObject.lineNumber = Number(lineNumberString);
      //  but we need a temporary fix for the BCS bug which doesn’t include blank lines in the count
      var lineNumber = Number(lineNumberString);
      var notified = false;
      var lines = fileText.split('\n');
      for (var n = 1; n <= lines.length; n++) {
        if (n >= lineNumber) break; // Gone far enough
        if (!lines[n - 1]) {
          lineNumber += 1; // Increment error line number for each blank line
          if (!notified) {
            (0, _utilities.userLog)("Temporarily adjusting BCS grammar error line number to account for blank lines");
            notified = true;
          }
        }
      }
      ourErrorObject.lineNumber = lineNumber;
    }
  }

  // debugLog(`  Warnings: ${JSON.stringify(parseWarnings)}`);
  var ourWarnings = [];var _iterator2 = _createForOfIteratorHelper(
  parseWarnings),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var warningString = _step2.value;
      // debugLog(`warningString: '${warningString}'`);
      // Clean up their warnings a little: Remove trailing spaces and periods
      var adjustedString = warningString.trim(); // Removes the trailing space
      if (adjustedString.endsWith('.')) adjustedString = adjustedString.substring(0, adjustedString.length - 1);
      ourWarnings.push(adjustedString);
    }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

  return { isValidUSFM: !parseError, error: ourErrorObject, warnings: ourWarnings };
}
// end of runBCSGrammarCheck function


function checkUSFMGrammar(bookID, strictnessString, filename, givenText, givenLocation, checkingOptions) {
  /*
  This function is only used for the demonstration pages -- not for the core!
   bookID is a three-character UPPERCASE USFM book identifier.
   filename parameter can be an empty string if we don’t have one.
    Returns a result object containing a successList and a noticeList
   */



  (0, _utilities.functionLog)("checkUSFMGrammar(".concat(givenText.length.toLocaleString(), " chars, '").concat(givenLocation, "')\u2026"));
  //parameterAssert(strictnessString === 'strict' || strictnessString === 'relaxed', `Unexpected strictnessString='${strictnessString}'`);

  var ourLocation = givenLocation;
  if (ourLocation && ourLocation[0] !== ' ') ourLocation = " ".concat(ourLocation);


  var cugResult = { successList: [], noticeList: [] };

  /**
   *
   * @param {string} successString
   */
  function addSuccessMessage(successString) {
    // functionLog(`checkUSFMGrammar success: ${successString}`);
    cugResult.successList.push(successString);
  }
  /**
   *
   * @description - adds a new notice entry from the partial fields given -- adding bookID and filename to the given fields
   * @param {Object} noticeObject expected to contain priority, message, characterIndex, exerpt, location
   */
  function addNoticePartial(noticeObject) {
    // functionLog(`checkUSFMGrammar notice: (priority=${priority}) ${message}${characterIndex > 0 ? ` (at character ${characterIndex})` : ""}${excerpt ? ` ${excerpt}` : ""}${location}`);
    //parameterAssert(noticeObject.priority !== undefined, "cUSFMgr addNoticePartial: 'priority' parameter should be defined");
    //parameterAssert(typeof noticeObject.priority === 'number', `cUSFMgr addNoticePartial: 'priority' parameter should be a number not a '${typeof noticeObject.priority}': ${noticeObject.priority}`);
    //parameterAssert(noticeObject.message !== undefined, "cUSFMgr addNoticePartial: 'message' parameter should be defined");
    //parameterAssert(typeof noticeObject.message === 'string', `cUSFMgr addNoticePartial: 'message' parameter should be a string not a '${typeof noticeObject.message}': ${noticeObject.message}`);
    // //parameterAssert(characterIndex !== undefined, "cUSFMgr addNoticePartial: 'characterIndex' parameter should be defined");
    if (noticeObject.characterIndex) {//parameterAssert(typeof noticeObject.characterIndex === 'number', `cUSFMgr addNoticePartial: 'characterIndex' parameter should be a number not a '${typeof noticeObject.characterIndex}': ${noticeObject.characterIndex}`);
    }
    // //parameterAssert(excerpt !== undefined, "cUSFMgr addNoticePartial: 'excerpt' parameter should be defined");
    if (noticeObject.excerpt) {//parameterAssert(typeof noticeObject.excerpt === 'string', `cUSFMgr addNoticePartial: 'excerpt' parameter should be a string not a '${typeof excerpt}': ${noticeObject.excerpt}`);
    }
    //parameterAssert(noticeObject.location !== undefined, "cUSFMgr addNoticePartial: 'location' parameter should be defined");
    //parameterAssert(typeof noticeObject.location === 'string', `cUSFMgr addNoticePartial: 'location' parameter should be a string not a '${typeof noticeObject.location}': ${noticeObject.location}`);
    cugResult.noticeList.push(_objectSpread(_objectSpread({}, noticeObject), {}, { bookID: bookID, filename: filename }));
  }


  // Main code for checkUSFMGrammar function
  if (books.isExtraBookID(bookID)) // doesn’t work for these
    return cugResult;

  var grammarCheckResult = runBCSGrammarCheck(strictnessString, bookID, givenText, filename, ourLocation, checkingOptions);
  // debugLog(`grammarCheckResult=${JSON.stringify(grammarCheckResult)}`);

  if (!grammarCheckResult.isValidUSFM)
  addNoticePartial({ priority: 944, message: "USFM3 Grammar Check (".concat(strictnessString, " mode) doesn\u2019t pass"), filename: filename, location: ourLocation });

  // We only get one error if it fails
  if (grammarCheckResult.error && grammarCheckResult.priority)
  addNoticePartial(grammarCheckResult.error);

  // Display these warnings but with a lowish priority
  var _iterator3 = _createForOfIteratorHelper(grammarCheckResult.warnings),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var warningString = _step3.value;
      addNoticePartial({ priority: 101, message: "USFMGrammar: ".concat(warningString), filename: filename, location: ourLocation });}} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}

  addSuccessMessage("Checked USFM Grammar (".concat(strictnessString, " mode) ").concat(grammarCheckResult.isValidUSFM ? "without errors" : " (but the USFM DIDN’T validate)"));
  // debugLog(`  checkUSFMGrammar returning with ${result.successList.length.toLocaleString()} success(es) and ${result.noticeList.length.toLocaleString()} notice(s).`);
  // functionLog(`checkUSFMGrammar result is ${JSON.stringify(result)}`);
  return cugResult;
}
// end of checkUSFMGrammar function
//# sourceMappingURL=data:application/json;charset=utf-8;base64,