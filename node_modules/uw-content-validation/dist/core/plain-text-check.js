"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.checkPlainText = checkPlainText;var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _defaults = require("./defaults");
var _textHandlingFunctions = require("./text-handling-functions");
var _fieldTextCheck = require("./field-text-check");
var _disabledNotices = require("./disabled-notices");

var _utilities = require("./utilities");function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {(0, _defineProperty2.default)(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}


var PLAIN_TEXT_VALIDATOR_VERSION_STRING = '0.4.0';


/**
 *
 * @param {string} textType 'markdown', 'USFM', 'YAML', 'text', or 'raw'
 * @param {string} repoCode -- e.g., 'TN' or 'TQ2', etc.
 * @param {string} textName
 * @param {string} plainText -- text to be checked
 * @param {string} givenLocation
 * @param {Object} checkingOptions
 */
function checkPlainText(languageCode, repoCode, textType, textName, plainText, givenLocation, checkingOptions) {
  /* This function is optimised for checking the entire text, i.e., all lines.
      It is used in checkFileContents() in book-package-check.js
   TODO: Should languageCode also be a parameter here? (affects other programs using the API)
    Returns a result object containing a successList and a noticeList
   */


  // functionLog(`checkPlainText(${textName}, (${plainText.length} chars), ${givenLocation}, ${JSON.stringify(checkingOptions)})…`);
  //parameterAssert(languageCode !== undefined, "checkPlainText: 'languageCode' parameter should be defined");
  //parameterAssert(typeof languageCode === 'string', `checkPlainText: 'languageCode' parameter should be a string not a '${typeof languageCode}': ${languageCode}`);
  //parameterAssert(languageCode !== 'markdown' && languageCode !== 'USFM' && languageCode !== 'YAML' && languageCode !== 'text' && languageCode !== 'raw' && languageCode !== 'unfoldingWord', `checkPlainText: 'languageCode' ${languageCode} parameter should be not be '${languageCode}'`);
  //parameterAssert(repoCode !== undefined, "checkPlainText: 'repoCode' parameter should be defined");
  //parameterAssert(typeof repoCode === 'string', `checkPlainText: 'repoCode' parameter should be a string not a '${typeof repoCode}': ${repoCode}`);
  //parameterAssert(REPO_CODES_LIST.includes(repoCode), `checkPlainText: 'repoCode' parameter should not be '${repoCode}'`);
  //parameterAssert(textType !== undefined, "checkPlainText: 'textType' parameter should be defined");
  //parameterAssert(typeof textType === 'string', `checkPlainText: 'textType' parameter should be a string not a '${typeof textType}': ${textType}`);
  //parameterAssert(textType === 'markdown' || textType === 'USFM' || textType === 'YAML' || textType === 'text' || textType === 'raw', `checkPlainText: unrecognised 'textType' parameter: '${textType}'`);
  //parameterAssert(textName !== undefined, "checkPlainText: 'textName' parameter should be defined");
  //parameterAssert(typeof textName === 'string', `checkPlainText: 'textName' parameter should be a string not a '${typeof textName}': ${textName}`);
  //parameterAssert(plainText !== undefined, "checkPlainText: 'plainText' parameter should be defined");
  //parameterAssert(typeof plainText === 'string', `checkPlainText: 'plainText' parameter should be a string not a '${typeof plainText}': ${plainText}`);
  //parameterAssert(checkingOptions !== undefined, "checkPlainText: 'checkingOptions' parameter should be defined");

  var ourLocation = givenLocation;
  if (ourLocation && ourLocation[0] !== ' ') ourLocation = " ".concat(ourLocation);

  var excerptLength;
  try {
    excerptLength = checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.excerptLength;
  } catch (ptcError) {}
  if (typeof excerptLength !== 'number' || isNaN(excerptLength)) {
    excerptLength = _defaults.DEFAULT_EXCERPT_LENGTH;
    // debugLog(`Using default excerptLength=${excerptLength}`);
  }
  // else
  // debugLog(`Using supplied excerptLength=${excerptLength}`, `cf. default=${DEFAULT_EXCERPT_LENGTH}`);
  var excerptHalfLength = Math.floor(excerptLength / 2); // rounded down
  var excerptHalfLengthPlus = Math.floor((excerptLength + 1) / 2); // rounded up
  // debugLog(`Using excerptHalfLength=${excerptHalfLength}`, `excerptHalfLengthPlus=${excerptHalfLengthPlus}`);

  var cptResult = { successList: [], noticeList: [] };

  function addSuccessMessage(successString) {
    // functionLog(`checkPlainText success: ${successString}`);
    cptResult.successList.push(successString);
  }
  function addNotice(noticeObject) {
    // bookID is a three-character UPPERCASE USFM book identifier or 'OBS'.
    // functionLog(`checkPlainText notice: (priority=${priority}) ${message}${characterIndex > 0 ? ` (at character ${characterIndex})` : ""}${excerpt ? ` ${excerpt}` : ""}${location}`);
    //parameterAssert(noticeObject.priority !== undefined, "cPT addNotice: 'priority' parameter should be defined");
    //parameterAssert(typeof noticeObject.priority === 'number', `cPT addNotice: 'priority' parameter should be a number not a '${typeof noticeObject.priority}': ${noticeObject.priority}`);
    //parameterAssert(noticeObject.message !== undefined, "cPT addNotice: 'message' parameter should be defined");
    //parameterAssert(typeof noticeObject.message === 'string', `cPT addNotice: 'message' parameter should be a string not a '${typeof noticeObject.message}': ${noticeObject.message}`);
    if (noticeObject.characterIndex) {//parameterAssert(typeof noticeObject.characterIndex === 'number', `cPT addNotice: 'characterIndex' parameter should be a number not a '${typeof noticeObject.characterIndex}': ${noticeObject.characterIndex}`);
    }
    // //parameterAssert(excerpt!==undefined, "cPT addNotice: 'excerpt' parameter should be defined");
    if (noticeObject.excerpt) {//parameterAssert(typeof noticeObject.excerpt === 'string', `cPT addNotice: 'excerpt' parameter should be a string not a '${typeof noticeObject.excerpt}': ${noticeObject.excerpt}`);
    }
    //parameterAssert(noticeObject.location !== undefined, "cPT addNotice: 'location' parameter should be defined");
    //parameterAssert(typeof noticeObject.location === 'string', `cPT addNotice: 'location' parameter should be a string not a '${typeof noticeObject.location}': ${noticeObject.location}`);

    // noticeObject.debugChain = noticeObject.debugChain ? `checkPlainText(${textType}, ${textName}) ${noticeObject.debugChain}` : `checkPlainText(${textType}, ${textName})`;
    cptResult.noticeList.push(noticeObject);
  }

  function ourCheckTextField(lineNumber, fieldText, allowedLinks, optionalFieldLocation, checkingOptions) {
    /**
    * @description - checks the given text field and processes the returned results
    * @param {string} fieldName - name of the field being checked
    * @param {string} fieldText - the actual text of the field being checked
    * @param {boolean} allowedLinks - true if links are allowed in the field, otherwise false
    * @param {string} optionalFieldLocation - description of where the field is located
    * @param {Object} checkingOptions - parameters that might affect the check
    */
    // Does basic checks for small errors like leading/trailing spaces, etc.

    // We assume that checking for compulsory fields is done elsewhere

    // Updates the global list of notices
    // debugLog(`cPT ourCheckTextField(${fieldName}, (${fieldText.length}), ${allowedLinks}, ${fieldLocation}, …)`);
    //parameterAssert(lineNumber !== undefined, "cPT ourCheckTextField: 'lineNumber' parameter should be defined");
    //parameterAssert(typeof lineNumber === 'number', `cPT ourCheckTextField: 'fieldName' parameter should be a number not a '${typeof lineNumber}'`);
    //parameterAssert(fieldText !== undefined, "cPT ourCheckTextField: 'fieldText' parameter should be defined");
    //parameterAssert(typeof fieldText === 'string', `cPT ourCheckTextField: 'fieldText' parameter should be a string not a '${typeof fieldText}'`);
    //parameterAssert(allowedLinks === true || allowedLinks === false, "cPT ourCheckTextField: allowedLinks parameter must be either true or false");
    //parameterAssert(optionalFieldLocation !== undefined, "cPT ourCheckTextField: 'optionalFieldLocation' parameter should be defined");
    //parameterAssert(typeof optionalFieldLocation === 'string', `cPT ourCheckTextField: 'optionalFieldLocation' parameter should be a string not a '${typeof optionalFieldLocation}'`);

    var resultObject = (0, _fieldTextCheck.checkTextField)(languageCode, repoCode, textType, '', fieldText, allowedLinks, optionalFieldLocation, checkingOptions);

    // Choose only ONE of the following
    // This is the fast way of append the results from this field
    // cptResult.noticeList = cptResult.noticeList.concat(resultObject.noticeList);
    // If we need to put everything through addNotice, e.g., for debugging or filtering
    //  process results line by line
    var _iterator = _createForOfIteratorHelper(resultObject.noticeList),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var noticeEntry = _step.value;
        addNotice(_objectSpread(_objectSpread({}, noticeEntry), {}, { lineNumber: lineNumber }));}} catch (err) {_iterator.e(err);} finally {_iterator.f();}
  }
  // end of ourCheckTextField function

  function checkPlainLineContents(lineNumber, lineText, lineLocation) {

    // functionLog(`checkPlainLineContents for '${lineName}', '${lineText}' at${lineLocation}`);
    var thisText = lineText.trimStart(); // So we don’t get "leading space" AND "doubled spaces" errors

    if (thisText)
      // Allow links as that’s more general
      ourCheckTextField(lineNumber, thisText, true, lineLocation, checkingOptions);
  }
  // end of checkPlainLineContents function


  // Main code for checkPlainText function
  if ((0, _textHandlingFunctions.isWhitespace)(plainText)) {
    addNotice({ priority: 638, message: "Only found whitespace", location: ourLocation });
    return cptResult;
  }

  var characterIndex;
  if ((characterIndex = plainText.indexOf('<<<<<<<')) >= 0) {
    var iy = characterIndex + excerptHalfLength; // Want excerpt to focus more on what follows
    var excerpt = (iy > excerptHalfLength ? '…' : '') + plainText.substring(iy - excerptHalfLength, iy + excerptHalfLengthPlus).replace(/ /g, '␣') + (iy + excerptHalfLengthPlus < plainText.length ? '…' : '');
    addNotice({ priority: 993, message: "Unresolved GIT conflict", characterIndex: characterIndex, excerpt: excerpt, location: ourLocation });
  } else if ((characterIndex = plainText.indexOf('=======')) >= 0) {
    var _iy = characterIndex + excerptHalfLength; // Want excerpt to focus more on what follows
    var _excerpt = (_iy > excerptHalfLength ? '…' : '') + plainText.substring(_iy - excerptHalfLength, _iy + excerptHalfLengthPlus).replace(/ /g, '␣') + (_iy + excerptHalfLengthPlus < plainText.length ? '…' : '');
    addNotice({ priority: 992, message: "Unresolved GIT conflict", characterIndex: characterIndex, excerpt: _excerpt, location: ourLocation });
  } else if ((characterIndex = plainText.indexOf('>>>>>>>>')) >= 0) {
    var _iy2 = characterIndex + excerptHalfLength; // Want excerpt to focus more on what follows
    var _excerpt2 = (_iy2 > excerptHalfLength ? '…' : '') + plainText.substring(_iy2 - excerptHalfLength, _iy2 + excerptHalfLengthPlus).replace(/ /g, '␣') + (_iy2 + excerptHalfLengthPlus < plainText.length ? '…' : '');
    addNotice({ priority: 991, message: "Unresolved GIT conflict", characterIndex: characterIndex, excerpt: _excerpt2, location: ourLocation });
  }

  if (plainText[0] === '\n') {
    characterIndex = 0;
    var _excerpt3 = (plainText.length > excerptLength ? '…' : '') + plainText.slice(-excerptLength).replace(/ /g, '␣').replace(/\n/g, '\\n');
    addNotice({ priority: 539, message: "File starts with empty line", characterIndex: characterIndex, excerpt: _excerpt3, location: ourLocation });
  }
  if (!plainText.endsWith('\n') && !textName.endsWith('title.md')) {
    characterIndex = plainText.length - 1;
    var _excerpt4 = (plainText.length > excerptLength ? '…' : '') + plainText.slice(-excerptLength).replace(/ /g, '␣').replace(/\n/g, '\\n');
    addNotice({ priority: 538, message: "File ends without newline character", characterIndex: characterIndex, excerpt: _excerpt4, location: ourLocation });
  } else
  if (plainText.endsWith('\n\n')) {
    characterIndex = plainText.length - 2;
    var _excerpt5 = (plainText.length > excerptLength ? '…' : '') + plainText.slice(-excerptLength).replace(/ /g, '␣').replace(/\n/g, '\\n');
    addNotice({ priority: 138, message: "File ends with additional blank line(s)", characterIndex: characterIndex, excerpt: _excerpt5, location: ourLocation });
  }

  var lines = plainText.split('\n');
  // debugLog(`  '${location}' has ${lines.length.toLocaleString()} total lines`);
  //  checking nested markers (so that we can give the line number in the notice)
  // let headerLevel = 0;
  // let lastNumLeadingSpaces = 0;
  // let lastLineContents;
  // While checking individual lines,
  var openMarkers = [];
  for (var n = 1; n <= lines.length; n++) {

    var line = lines[n - 1];
    if (line) {
      if (textType === 'text' || textType === 'raw') // other file-types do these checks themselves
        checkPlainLineContents(n, line, ourLocation);

      // Check for nested brackets and quotes, etc.
      for (var _characterIndex = 0; _characterIndex < line.length; _characterIndex++) {
        var char = line[_characterIndex];
        var closeCharacterIndex = void 0;
        if (_textHandlingFunctions.PAIRED_PUNCTUATION_OPENERS.indexOf(char) >= 0) {
          // debugLog(`Saving ${openMarkers.length} '${char}' ${n} ${x}`);
          openMarkers.push({ char: char, n: n, x: _characterIndex });
        } else if ((closeCharacterIndex = _textHandlingFunctions.PAIRED_PUNCTUATION_CLOSERS.indexOf(char)) >= 0) {
          // debugLog(`Found '${char}' ${n} ${x}`);
          // debugLog(`Which: ${which} '${openers.charAt(which)}'`)
          if (openMarkers.length) {
            var _openMarkers$slice = openMarkers.slice(-1),_openMarkers$slice2 = (0, _slicedToArray2.default)(_openMarkers$slice, 1),lastEntry = _openMarkers$slice2[0];
            // debugLog(`  Recovered lastEntry=${JSON.stringify(lastEntry)}`);
            // debugLog(`  Comparing found '${char}' with (${which}) '${openers.charAt(which)}' from '${lastEntry.char}'`);
            if (lastEntry.char === _textHandlingFunctions.PAIRED_PUNCTUATION_OPENERS.charAt(closeCharacterIndex)) {
              // debugLog(`  Matched '${char}' with  '${openers.charAt(which)}' ${n} ${x}`);
              openMarkers.pop();
            } else // something is still open and this isn’t a match -- might just be consequential error
              if (char !== '’' // Closing single quote is also used as apostrophe in English
              && (textType !== 'markdown' || char !== '>' || _characterIndex > 4)) {// Markdown uses > or >> or > > or > > > for block indents so ignore these -- might just be consequential error
                var _excerpt6 = (_characterIndex > excerptHalfLength ? '…' : '') + line.substring(_characterIndex - excerptHalfLength, _characterIndex + excerptHalfLengthPlus).replace(/ /g, '␣') + (_characterIndex + excerptHalfLengthPlus < line.length ? '…' : '');
                var details = "'".concat(lastEntry.char, "' opened on line ").concat(lastEntry.n, " character ").concat(lastEntry.x + 1);
                addNotice({ priority: 777, message: "Bad punctuation nesting: ".concat(char, " closing character doesn\u2019t match"), details: details, lineNumber: n, characterIndex: _characterIndex, excerpt: _excerpt6, location: ourLocation });
                // debugLog(`  ERROR 777: mismatched characters: ${details}`);
              }
          } else // Closed something unexpectedly without an opener
            if (char !== '’' // Closing single quote is also used as apostrophe in English
            && (textType !== 'markdown' || char !== '>')) {// Markdown uses > for block indents so ignore these
              var _excerpt7 = (_characterIndex > excerptHalfLength ? '…' : '') + line.substring(_characterIndex - excerptHalfLength, _characterIndex + excerptHalfLengthPlus).replace(/ /g, '␣') + (_characterIndex + excerptHalfLengthPlus < line.length ? '…' : '');
              addNotice({ priority: 774, message: "Unexpected ".concat(char, " closing character (no matching opener)"), lineNumber: n, characterIndex: _characterIndex, excerpt: _excerpt7, location: ourLocation });
              // debugLog(`  ERROR 774: closed with nothing open: ${char}`);
            }
        }

      }
    } else {
        // This is a blank line
      }

    // lastLineContents = line;
  }
  //  At the end of the text -- check for left-over opening characters (unclosed)
  if (openMarkers.length) {
    var _openMarkers$slice3 = openMarkers.slice(-1),_openMarkers$slice4 = (0, _slicedToArray2.default)(_openMarkers$slice3, 1),_openMarkers$slice4$ = _openMarkers$slice4[0],_char = _openMarkers$slice4$.char,_n = _openMarkers$slice4$.n,x = _openMarkers$slice4$.x;
    var _line = lines[_n - 1];
    var _excerpt8 = (x > excerptHalfLength ? '…' : '') + _line.substring(x - excerptHalfLength, x + excerptHalfLengthPlus).replace(/ /g, '␣') + (x + excerptHalfLengthPlus < _line.length ? '…' : '');
    var _details = openMarkers.length > 1 ? "".concat(openMarkers.length, " unclosed set").concat(openMarkers.length === 1 ? '' : 's') : null;
    addNotice({ priority: 768, message: "At end of text with unclosed ".concat(_char, " opening character"), details: _details, lineNumber: _n, characterIndex: x, excerpt: _excerpt8, location: ourLocation });
  }

  // TODO: Is this a duplicate of the above section about nesting?
  // Check matched pairs in the entire file
  var _iterator2 = _createForOfIteratorHelper(_textHandlingFunctions.OPEN_CLOSE_PUNCTUATION_PAIRS),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var punctSet = _step2.value;
      // Can’t check '‘’' coz they might be used as apostrophe
      var leftChar = punctSet[0],rightChar = punctSet[1];
      var leftCount = (0, _textHandlingFunctions.countOccurrences)(plainText, leftChar),
      rightCount = (0, _textHandlingFunctions.countOccurrences)(plainText, rightChar);
      if (leftCount !== rightCount && (
      rightChar !== '’' || leftCount > rightCount) // Closing single quote is also used as apostrophe in English
      && (textType !== 'markdown' || rightChar !== '>')) // markdown uses > as a block quote character
        // NOTE: These are lower priority than similar checks in a field
        //          since they occur only within the entire file
        addNotice({ priority: leftChar === '“' ? 162 : 462, message: "Mismatched ".concat(leftChar).concat(rightChar, " characters"), details: "left=".concat(leftCount.toLocaleString(), ", right=").concat(rightCount.toLocaleString()), location: ourLocation });
    }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

  if (!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.suppressNoticeDisablingFlag)) {
    // functionLog(`checkPlainText: calling removeDisabledNotices(${cptResult.noticeList.length}) having ${JSON.stringify(checkingOptions)}`);
    cptResult.noticeList = (0, _disabledNotices.removeDisabledNotices)(cptResult.noticeList);
  }

  addSuccessMessage("Checked all ".concat(lines.length.toLocaleString(), " line").concat(lines.length === 1 ? '' : 's').concat(ourLocation, "."));
  if (cptResult.noticeList.length)
  addSuccessMessage("checkPlainText v".concat(PLAIN_TEXT_VALIDATOR_VERSION_STRING, " finished with ").concat(cptResult.noticeList.length ? cptResult.noticeList.length.toLocaleString() : "zero", " notice").concat(cptResult.noticeList.length === 1 ? '' : 's'));else

  addSuccessMessage("No errors or warnings found by checkPlainText v".concat(PLAIN_TEXT_VALIDATOR_VERSION_STRING));
  // debugLog(`  checkPlainText returning with ${result.successList.length.toLocaleString()} success(es), ${result.noticeList.length.toLocaleString()} notice(s).`);
  // debugLog("checkPlainText result is", JSON.stringify(result));
  return cptResult;
}
// end of checkPlainText function
//# sourceMappingURL=data:application/json;charset=utf-8;base64,