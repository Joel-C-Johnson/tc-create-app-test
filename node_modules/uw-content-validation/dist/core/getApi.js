"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _typeof = require("@babel/runtime/helpers/typeof");Object.defineProperty(exports, "__esModule", { value: true });exports.clearCaches = clearCaches;exports.formRepoName = formRepoName;exports.cachedGetFile = cachedGetFile;exports.cachedGetBookFilenameFromManifest = cachedGetBookFilenameFromManifest;exports.preloadReposIfNecessary = preloadReposIfNecessary;exports.cachedFetchFileFromServerWithTag = cachedFetchFileFromServerWithTag;exports.repositoryExistsOnDoor43 = repositoryExistsOnDoor43;exports.cachedGetFileUsingFullURL = cachedGetFileUsingFullURL;exports.cachedGetRepositoryZipFile = cachedGetRepositoryZipFile;exports.getFileListFromZip = getFileListFromZip;var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _path = _interopRequireDefault(require("path"));
var _yaml = _interopRequireDefault(require("yaml"));
var _localforage = _interopRequireDefault(require("localforage"));
var _axiosCacheAdapter = require("axios-cache-adapter");
var _jszip = _interopRequireDefault(require("jszip"));
var books = _interopRequireWildcard(require("./books"));
var _notesLinksCheck = require("./notes-links-check");

var _utilities = require("./utilities");function _getRequireWildcardCache(nodeInterop) {if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {return nodeInterop ? cacheNodeInterop : cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj, nodeInterop) {if (!nodeInterop && obj && obj.__esModule) {return obj;}if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}function _createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}


// const GETAPI_VERSION_STRING = '0.8.1';

var MAX_INDIVIDUAL_FILES_TO_DOWNLOAD = 5; // More than this and it downloads the zipfile for the entire repo

var DOOR43_BASE_URL = 'https://git.door43.org/';
var API_PATH = 'api/v1';

var OBS_PICTURE_ZIP_FILENAME = 'obs-images-360px.zip';
var OBS_PICTURE_ZIP_URI = "https://cdn.door43.org/obs/jpg/".concat(OBS_PICTURE_ZIP_FILENAME);


// caches failed http file fetches so we don’t waste time with repeated attempts
var failedStore = _localforage.default.createInstance({
  driver: [_localforage.default.INDEXEDDB],
  name: 'CV-failed-store' });


// caches zip file fetches done by cachedGetRepositoryZipFile()
var zipStore = _localforage.default.createInstance({
  driver: [_localforage.default.INDEXEDDB],
  name: 'CV-zip-store' });


// caches http file fetches done by cachedFetchFileFromServerWithBranch()
var cacheStore = _localforage.default.createInstance({
  driver: [_localforage.default.INDEXEDDB],
  name: 'CV-web-cache' });


// caches the unzipped files requested so we don’t do repeated unzipping of the same file which is slow in JS
var unzipStore = _localforage.default.createInstance({
  driver: [_localforage.default.INDEXEDDB],
  name: 'CV-unzip-store' });


// API for http requests
// NOTE: Even if data expires in this AxiosCacheAdapter, the localforage caches don’t have the same / any expiry ages
//        (We expect the users of the demos to manually clear the caches when an update is required.)
var Door43Api = (0, _axiosCacheAdapter.setup)({
  baseURL: DOOR43_BASE_URL,
  cache: {
    store: cacheStore,
    maxAge: 1 * 60 * 60 * 1000, // 1 hour (unless they manually clear the cache)
    exclude: { query: false },
    key: function key(req) {
      // if (req.params) debugger
      var serialized = req.params instanceof URLSearchParams ?
      req.params.toString() : JSON.stringify(req.params) || '';
      return req.url + serialized;
    } } });




/**
 * Clear all the localforage.INDEXEDDB stores
 * @return {Promise<void>}
 */function
clearCaches() {return _clearCaches.apply(this, arguments);}












/**
 * @description - Forms and returns a Door43 repoName string
 * @param {string} languageCode - the language code, e.g., 'en'
 * @param {string} repoCode - the repo code, e.g., 'TQ2'
 * @return {String} - the Door43 repoName string
 */function _clearCaches() {_clearCaches = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:(0, _utilities.userLog)("Clearing all four CV localforage.INDEXEDDB caches…"); // const tasks = [zipStore, cacheStore].map(localforage.clear);
            // const results = await Promise.all(tasks);
            // results.forEach(x => userLog("Done it", x));
            _context.next = 3;return failedStore.clear();case 3:_context.next = 5;return zipStore.clear();case 5:_context.next = 7;return cacheStore.clear();case 7:_context.next = 9;return unzipStore.clear();case 9:_context.next = 11;return (0, _notesLinksCheck.clearCheckedArticleCache)();case 11:case "end":return _context.stop();}}}, _callee);}));return _clearCaches.apply(this, arguments);}function formRepoName(languageCode, repoCode) {//    userLog(`formRepoName('${languageCode}', '${repoCode}')…`);
  // TODO: Should we also check the username 'unfoldingWord' and/or 'Door43-Catalog' here???
  //        (We don’t currently have the username available in this function.)
  if (repoCode === 'LT') repoCode = languageCode === 'en' ? 'ULT' : 'GLT';
  if (repoCode === 'ST') repoCode = languageCode === 'en' ? 'UST' : 'GST';

  var repo_languageCode = languageCode;
  if (repoCode === 'UHB') repo_languageCode = 'hbo';else
  if (repoCode === 'UGNT') repo_languageCode = 'el-x-koine';

  var repoName;

  // if (repoCode.endsWith('2')) repoCode = repoCode.substring(0, repoCode.length - 1);
  repoName = "".concat(repo_languageCode, "_").concat(repoCode.toLowerCase());
  return repoName;
}


/**
 * add new repo to list if missing
 * @param repos
 * @param newRepo
 */
/*
function addToListIfMissing(repos, newRepo) {
  if (!repos.includes(newRepo)) {
    repos.unshift(newRepo);
  }
}
*/


/**
 * try to get previously unzipped file from cache
 * @param {string} path
 * @return {Promise<unknown>} resolves to file contents or null if not found
 */function
getUnZippedFile(_x) {return _getUnZippedFile.apply(this, arguments);}






/**
 * try to get previously unzipped picture file from cache
 * @param {string} uri
 * @return {Promise<unknown>} resolves to file contents or null if not found
 */function _getUnZippedFile() {_getUnZippedFile = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(path) {var contents;return _regenerator.default.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:_context2.next = 2;return unzipStore.getItem(path.toLowerCase());case 2:contents = _context2.sent;return _context2.abrupt("return", contents);case 4:case "end":return _context2.stop();}}}, _callee2);}));return _getUnZippedFile.apply(this, arguments);}function
getUnZippedPictureFile(_x2) {return _getUnZippedPictureFile.apply(this, arguments);}






/**
 * searches for files in this order:
 *   - cache of uncompressed files (unzipStore)
 *   - cache of zipped repos (zipStore)
 *   - and finally calls cachedFetchFileFromServerWithBranch() which first checks in cacheStore to see if already fetched. * @param {string} username
 * @param {string} repository
 * @param {string} path
 * @param {string} branch
 * @return {Promise<*>}
 */
// This is the function that we call the most from the outside
function _getUnZippedPictureFile() {_getUnZippedPictureFile = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(uri) {var contents;return _regenerator.default.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:_context3.next = 2;return unzipStore.getItem(uri);case 2:contents = _context3.sent;return _context3.abrupt("return", contents);case 4:case "end":return _context3.stop();}}}, _callee3);}));return _getUnZippedPictureFile.apply(this, arguments);}function cachedGetFile(_x3) {return _cachedGetFile.apply(this, arguments);}

































/**
 * Retrieve manifest.yaml from requested repo
 * @param {string} username
 * @param {string} repository
 * @param {string} branch
 * @return {Promise<[]|*[]>} resolves to manifest contents if downloaded (else undefined)
 */function _cachedGetFile() {_cachedGetFile = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(_ref) {var username, repository, path, branch, filePath, contents;return _regenerator.default.wrap(function _callee4$(_context4) {while (1) {switch (_context4.prev = _context4.next) {case 0:username = _ref.username, repository = _ref.repository, path = _ref.path, branch = _ref.branch; // functionLog(`cachedGetFile(${username}, ${repository}, ${path}, ${branch})…`);
            //parameterAssert(typeof username === 'string' && username.length, `cachedGetFile: username parameter should be a non-empty string not ${typeof username}: ${username}`);
            //parameterAssert(typeof repository === 'string' && repository.length, `cachedGetFile: repository parameter should be a non-empty string not ${typeof repository}: ${repository}`);
            //parameterAssert(typeof path === 'string' && path.length, `cachedGetFile: path parameter should be a non-empty string not ${typeof path}: ${path}`);
            //parameterAssert(typeof branch === 'string' && branch.length, `cachedGetFile: branch parameter should be a non-empty string not ${typeof branch}: ${branch}`);
            filePath = _path.default.join(username, repository, path, branch);_context4.next = 4;return getUnZippedFile(filePath);case 4:contents = _context4.sent;if (!contents) {_context4.next = 7;break;}return _context4.abrupt("return", contents);case 7:_context4.next = 9;return getFileFromZip({ username: username, repository: repository, path: path, branchOrRelease: branch });case 9:contents = _context4.sent;if (contents) {_context4.next = 14;break;}_context4.next = 13;return cachedFetchFileFromServerWithBranch({ username: username, repository: repository, path: path, branch: branch });case 13:contents = _context4.sent;case 14:if (!contents) {_context4.next = 17;break;}_context4.next = 17;return unzipStore.setItem(filePath.toLowerCase(), contents);case 17:return _context4.abrupt("return", contents);case 18:case "end":return _context4.stop();}}}, _callee4);}));return _cachedGetFile.apply(this, arguments);}function cachedGetManifest(_x4) {return _cachedGetManifest.apply(this, arguments);}











/**
 * Retrieve manifest.yaml from requested repo
 * @param {string} username
 * @param {string} repository
 * @param {string} branch
 * @param {string} bookID -- 3-character USFM book code
 * @return {Promise<[]|*[]>} resolves to filename from the manifest for the book (else undefined)
 */function _cachedGetManifest() {_cachedGetManifest = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5(_ref2) {var username, repository, branch, manifestContents, formData;return _regenerator.default.wrap(function _callee5$(_context5) {while (1) {switch (_context5.prev = _context5.next) {case 0:username = _ref2.username, repository = _ref2.repository, branch = _ref2.branch;_context5.next = 3;return cachedGetFile({ username: username, repository: repository, path: 'manifest.yaml', branch: branch });case 3:manifestContents = _context5.sent;try {formData = _yaml.default.parse(manifestContents); // debugLog("yaml.parse(YAMLText) got formData", JSON.stringify(formData));
            } catch (yamlError) {console.error("".concat(username, " ").concat(repository, " ").concat(branch, " manifest yaml parse error: ").concat(yamlError.message));}return _context5.abrupt("return", formData);case 6:case "end":return _context5.stop();}}}, _callee5);}));return _cachedGetManifest.apply(this, arguments);}function cachedGetBookFilenameFromManifest(_x5) {return _cachedGetBookFilenameFromManifest.apply(this, arguments);}












/**
 * Preloads any necessary repo zips, before running book package checks
 *   This allows the calling app to clear cache and start loading repos in the backgound as soon as it starts up.
 *      In this case it would not need to use await to wait for results.
 *   TRICKY: note that even if the user is super fast in selecting books and clicking next, it will not hurt anything.
 *            cachedGetFileFromZipOrServer() would just be fetching files directly from repo until the zips are loaded.
 *            After that the files would be pulled out of zipStore.
 * @param {string} username
 * @param {string} languageCode
 * @param {Array} bookIDList - one or more books that will be checked
 * @param {string} branch - optional, defaults to master
 * @param {Array} repoList - optional, list of repos to pre-load
 * @return {Promise<Boolean>} resolves to true if file loads are successful
 */function _cachedGetBookFilenameFromManifest() {_cachedGetBookFilenameFromManifest = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6(_ref3) {var username, repository, branch, bookID, manifestJSON, _iterator, _step, projectEntry, bookPath;return _regenerator.default.wrap(function _callee6$(_context6) {while (1) {switch (_context6.prev = _context6.next) {case 0:username = _ref3.username, repository = _ref3.repository, branch = _ref3.branch, bookID = _ref3.bookID;_context6.next = 3;return cachedGetManifest({ username: username, repository: repository, branch: branch });case 3:manifestJSON = _context6.sent;_iterator = _createForOfIteratorHelper(manifestJSON.projects);_context6.prev = 5;_iterator.s();case 7:if ((_step = _iterator.n()).done) {_context6.next = 15;break;}projectEntry = _step.value;if (!(projectEntry.identifier === bookID)) {_context6.next = 13;break;}bookPath = projectEntry.path;if (bookPath.startsWith('./')) bookPath = bookPath.substring(2);return _context6.abrupt("return", bookPath);case 13:_context6.next = 7;break;case 15:_context6.next = 20;break;case 17:_context6.prev = 17;_context6.t0 = _context6["catch"](5);_iterator.e(_context6.t0);case 20:_context6.prev = 20;_iterator.f();return _context6.finish(20);case 23:case "end":return _context6.stop();}}}, _callee6, null, [[5, 17, 20, 23]]);}));return _cachedGetBookFilenameFromManifest.apply(this, arguments);}function
preloadReposIfNecessary(_x6, _x7, _x8, _x9, _x10) {return _preloadReposIfNecessary.apply(this, arguments);}




























































































/**
 * does http file fetch from server  uses cacheStore to minimize repeated fetches of same file
 * @param {string} username
 * @param {string} repository
 * @param {string} path
 * @param {string} branch
 * @return {Promise<null|any>} resolves to file content
 */function _preloadReposIfNecessary() {_preloadReposIfNecessary = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7(username, languageCode, bookIDList, branchOrRelease, repoList) {var success, repos_, _iterator2, _step2, bookID, whichTestament, origLangRepo, _iterator3, _step3, repoCode, adjustedLanguageCode, adjustedBranchOrRelease, adjustedRepoCode, repoName, zipFetchSucceeded, zipBlob, response, zipArrayBuffer;return _regenerator.default.wrap(function _callee7$(_context7) {while (1) {switch (_context7.prev = _context7.next) {case 0: // NOTE: We preload TA and TW by default because we are likely to have many links to those repos
            //        We preload TQ by default because it has thousands of files (17,337), so individual file fetches might be slow
            //          even for one book which might have several hundred files.
            // functionLog(`preloadReposIfNecessary(${username}, ${languageCode}, ${bookIDList} (${typeof bookID}), ${branchOrRelease}, [${repoList}])…`);
            success = true;repos_ = (0, _toConsumableArray2.default)(repoList);if (bookIDList.includes('OBS')) {if (!repos_.includes('OBS')) repos_.unshift('OBS'); // push to beginning of list
            }if (bookIDList && Array.isArray(bookIDList) && bookIDList.length > MAX_INDIVIDUAL_FILES_TO_DOWNLOAD) {// Fetch individually if checking less books
              // make sure we have the original languages needed
              _iterator2 = _createForOfIteratorHelper(bookIDList);try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {bookID = _step2.value;if (bookID !== 'OBS') {whichTestament = books.testament(bookID); // returns 'old' or 'new'
                    (0, _utilities.logicAssert)(whichTestament === 'old' || whichTestament === 'new', "preloadReposIfNecessary() couldn't find testament for '".concat(bookID, "'"));origLangRepo = whichTestament === 'old' ? 'UHB' : 'UGNT';if (!repos_.includes(origLangRepo)) repos_.unshift(origLangRepo);}}} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}} // debugLog(`  Adjusted repo list: (${repos_.length}) ${JSON.stringify(repos_)}`);
            // // See if the required repos are there already
            // debugLog(`Check if need to preload ${repos_.length} repos: ${repos_}`)
            // const newRepoList = [];
            // for (const repoCode of repos_) {
            //   const repoName = formRepoName(languageCode, repoCode);
            //   // debugLog(`preloadReposIfNecessary: checking zip file for ${repoName}…`);
            //   const uri = zipUri({ username, repository: repoName, branchOrRelease });
            //   const zipBlob = await zipStore.getItem(uri.toLowerCase());
            //   if (!zipBlob) newRepoList.push(repoCode);
            // }
            // if (newRepoList.length) { // Fetch zipped versions of all the repos needing to be preloaded
            //   userLog(`Need to preload ${newRepoList.length} repos: ${newRepoList}`)
            //   for (const repoCode of newRepoList) {
            //     const repoName = formRepoName(languageCode, repoCode);
            //     userLog(`preloadReposIfNecessary: preloading zip file for ${repoName}…`);
            //     const zipFetchSucceeded = await cachedGetRepositoryZipFile({ username, repository: repoName, branchOrRelease });
            //     if (!zipFetchSucceeded) {
            //       userLog(`preloadReposIfNecessary: misfetched zip file for ${repoCode} repo with ${zipFetchSucceeded}`);
            //       success = false;
            //     }
            //   }
            // }
            // else userLog("All repos were cached already!");
            _iterator3 = _createForOfIteratorHelper(repos_);_context7.prev = 5;_iterator3.s();case 7:if ((_step3 = _iterator3.n()).done) {_context7.next = 41;break;}repoCode = _step3.value; // debugLog(`preloadReposIfNecessary: looking at repoCode '${repoCode}'…`);
            adjustedLanguageCode = languageCode;if (languageCode === 'hbo' && repoCode !== 'UHB' || languageCode === 'el-x-koine' && repoCode !== 'UGNT') adjustedLanguageCode = 'en'; // Assume English then
            adjustedBranchOrRelease = branchOrRelease;adjustedRepoCode = repoCode;if (repoCode.endsWith('2')) {adjustedRepoCode = adjustedRepoCode.substring(0, adjustedRepoCode.length - 1); // Remove the '2' from the end
              adjustedBranchOrRelease = 'newFormat';} // else if (repoCode === 'OBS-TN' || repoCode === 'OBS-TQ' || repoCode === 'OBS-SN' || repoCode === 'OBS-SQ')
            //   adjustedBranchOrRelease = 'newFormat';
            repoName = formRepoName(adjustedLanguageCode, adjustedRepoCode); // debugLog(`preloadReposIfNecessary: preloading zip file for ${repoName}…`);
            _context7.next = 17;return cachedGetRepositoryZipFile({ username: username, repository: repoName, branchOrRelease: adjustedBranchOrRelease });case 17:zipFetchSucceeded = _context7.sent;if (!zipFetchSucceeded) {console.error("preloadReposIfNecessary() misfetched zip file for ".concat(repoCode, " (").concat(adjustedRepoCode, ") repo with ").concat(zipFetchSucceeded));success = false;}if (!(repoCode === 'OBS')) {_context7.next = 39;break;}(0, _utilities.debugLog)("preloadReposIfNecessary: preloading OBS zipped pictures file from ".concat(OBS_PICTURE_ZIP_URI, "\u2026"));_context7.next = 23;return zipStore.getItem(OBS_PICTURE_ZIP_FILENAME);case 23:zipBlob = _context7.sent;if (zipBlob) {_context7.next = 39;break;}(0, _utilities.userLog)("downloadingOBSPicturesZipFile(".concat(OBS_PICTURE_ZIP_URI, ")\u2026"));_context7.next = 28;return fetch(OBS_PICTURE_ZIP_URI);case 28:response = _context7.sent;if (!(response.status === 200 || response.status === 0)) {_context7.next = 37;break;}_context7.next = 32;return response.arrayBuffer();case 32:zipArrayBuffer = _context7.sent;_context7.next = 35;return zipStore.setItem(OBS_PICTURE_ZIP_FILENAME, zipArrayBuffer);case 35:_context7.next = 39;break;case 37:console.error("downloadingOBSPicturesZipFile(".concat(OBS_PICTURE_ZIP_URI, ") -- got response status: ").concat(response.status));success = false;case 39:_context7.next = 7;break;case 41:_context7.next = 46;break;case 43:_context7.prev = 43;_context7.t0 = _context7["catch"](5);_iterator3.e(_context7.t0);case 46:_context7.prev = 46;_iterator3.f();return _context7.finish(46);case 49:return _context7.abrupt("return", success);case 50:case "end":return _context7.stop();}}}, _callee7, null, [[5, 43, 46, 49]]);}));return _preloadReposIfNecessary.apply(this, arguments);}function cachedFetchFileFromServerWithBranch(_x11) {return _cachedFetchFileFromServerWithBranch.apply(this, arguments);}function _cachedFetchFileFromServerWithBranch() {_cachedFetchFileFromServerWithBranch = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee8(_ref4) {var username, repository, path, _ref4$branch, branch, uri;return _regenerator.default.wrap(function _callee8$(_context8) {while (1) {switch (_context8.prev = _context8.next) {case 0:username = _ref4.username, repository = _ref4.repository, path = _ref4.path, _ref4$branch = _ref4.branch, branch = _ref4$branch === void 0 ? 'master' : _ref4$branch; // functionLog(`cachedFetchFileFromServerWithBranch(${username}, ${repository}, ${path}, ${branch})…`);
            // TODO: Check how slow this next call is -- can it be avoided or cached?
            // RJH removed this 2Oct2020 -- what’s the point -- it just slows things down --
            //      if it needs to be checked, should be checked before this point
            // const repositoryExistsOnDoor43 = await repositoryExistsOnDoor43({ username, repository });
            // let uri;
            uri = _path.default.join(username, repository, 'raw/branch', branch, path);_context8.next = 4;return cachedFetchFileFromServerWorker(uri, username, repository, path, branch);case 4:return _context8.abrupt("return", _context8.sent);case 5:case "end":return _context8.stop();}}}, _callee8);}));return _cachedFetchFileFromServerWithBranch.apply(this, arguments);}; /**
 * does http file fetch from server  uses cacheStore to minimize repeated fetches of same file
 * @param {string} username
 * @param {string} repository
 * @param {string} path
 * @param {string} tag
 * @return {Promise<null|any>} resolves to file content
 */function cachedFetchFileFromServerWithTag(_x12) {return _cachedFetchFileFromServerWithTag.apply(this, arguments);}function _cachedFetchFileFromServerWithTag() {_cachedFetchFileFromServerWithTag = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee9(_ref5) {var username, repository, path, tag, uri;return _regenerator.default.wrap(function _callee9$(_context9) {while (1) {switch (_context9.prev = _context9.next) {case 0:username = _ref5.username, repository = _ref5.repository, path = _ref5.path, tag = _ref5.tag; // functionLog(`cachedFetchFileFromServerWithTag(${username}, ${repository}, ${path}, ${tag})…`);
            // TODO: Check how slow this next call is -- can it be avoided or cached?
            // RJH removed this 2Oct2020 -- what’s the point -- it just slows things down --
            //      if it needs to be checked, should be checked before this point
            // const repositoryExistsOnDoor43 = await repositoryExistsOnDoor43({ username, repository });
            // let uri;
            uri = _path.default.join(username, repository, 'raw/tag', tag, path);_context9.next = 4;return cachedFetchFileFromServerWorker(uri, username, repository, path, tag);case 4:return _context9.abrupt("return", _context9.sent);case 5:case "end":return _context9.stop();}}}, _callee9);}));return _cachedFetchFileFromServerWithTag.apply(this, arguments);}; /**
 * does http file fetch from server  uses cacheStore to minimize repeated fetches of same file
 * @param {string} username
 * @param {string} repository
 * @param {string} path
 * @param {string} branch
 * @return {Promise<null|any>} resolves to file content
 */function cachedFetchFileFromServerWorker(_x13, _x14, _x15, _x16, _x17) {return _cachedFetchFileFromServerWorker.apply(this, arguments);}function _cachedFetchFileFromServerWorker() {_cachedFetchFileFromServerWorker = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee10(uri, username, repository, path, branchOrTag) {var failMessage, data;return _regenerator.default.wrap(function _callee10$(_context10) {while (1) {switch (_context10.prev = _context10.next) {case 0:_context10.next = 2;return failedStore.getItem(uri.toLowerCase());case 2:failMessage = _context10.sent;if (!failMessage) {_context10.next = 5;break;}return _context10.abrupt("return", null);case 5:_context10.prev = 5;_context10.next = 8;return cachedGetFileUsingPartialURL({ uri: uri });case 8:data = _context10.sent;return _context10.abrupt("return", data);case 12:_context10.prev = 12;_context10.t0 = _context10["catch"](5);console.error("cachedFetchFileFromServerWorker could not fetch ".concat(username, " ").concat(repository, " ").concat(branchOrTag, " ").concat(path, ": ").concat(_context10.t0)); /* await */failedStore.setItem(uri.toLowerCase(), _context10.t0.message);return _context10.abrupt("return", null);case 17:case "end":return _context10.stop();}}}, _callee10, null, [[5, 12]]);}));return _cachedFetchFileFromServerWorker.apply(this, arguments);} // } else { // ! repositoryExistsOnDoor43
//   console.error(`cachedFetchFileFromServerWorker repo ${username} '${repository}' does not exist!`);
//   /* await */ failedStore.setItem(uri.toLowerCase(), `Repo '${repository}' does not exist!`);
//   return null;
// }
;


/**
 *  older getFile without that doesn’t use the unzipStore
 * @param {string} username
 * @param {string} repository
 * @param {string} path
 * @param {string} branch
 * @return {Promise<*>}
 */
/*
async function cachedGetFileFromZipOrServer({ username, repository, path, branch }) {
  // functionLog(`cachedGetFileFromZipOrServer(${username}, ${repository}, ${path}, ${branch})…`);
  let file;
  file = await getFileFromZip({ username, repository, path, branch });
  if (!file) {
    file = await cachedFetchFileFromServerWithBranch({ username, repository, path, branch });
  }
  return file;
}
*/function

getUID(_x18) {return _getUID.apply(this, arguments);}function _getUID() {_getUID = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee11(_ref6) {var username, uri, user, uid;return _regenerator.default.wrap(function _callee11$(_context11) {while (1) {switch (_context11.prev = _context11.next) {case 0:username = _ref6.username;
            // functionLog(`getUID(${username})…`);
            uri = _path.default.join(API_PATH, 'users', username);
            // debugLog(`getUID uri=${uri}`);
            _context11.next = 4;return cachedGetFileUsingPartialURL({ uri: uri });case 4:user = _context11.sent;
            // debugLog(`getUID user=${user}`);
            uid = user.id;
            // debugLog(`  getUID returning: ${uid}`);
            return _context11.abrupt("return", uid);case 7:case "end":return _context11.stop();}}}, _callee11);}));return _getUID.apply(this, arguments);}function


repositoryExistsOnDoor43(_x19) {return _repositoryExistsOnDoor.apply(this, arguments);}function _repositoryExistsOnDoor() {_repositoryExistsOnDoor = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee12(_ref7) {var username, repository, uid, params, uri, retrievedRepoList, _yield$cachedGetFileU, retrievedRepoListData, desiredMatch, filteredRepoList;return _regenerator.default.wrap(function _callee12$(_context12) {while (1) {switch (_context12.prev = _context12.next) {case 0:username = _ref7.username, repository = _ref7.repository;_context12.prev = 1;_context12.next = 4;return (



              getUID({ username: username }));case 4:uid = _context12.sent;_context12.next = 11;break;case 7:_context12.prev = 7;_context12.t0 = _context12["catch"](1);

            console.error("repositoryExistsOnDoor43(".concat(username, ", ").concat(repository, ") - invalid username"), _context12.t0.message);return _context12.abrupt("return",
            false);case 11:

            // debugLog(`repositoryExistsOnDoor43 uid=${uid}`);
            // Default limit is 10 -- way too small
            params = { q: repository, limit: 500, uid: uid }; // Documentation says limit is 50, but larger numbers seem to work ok
            uri = _path.default.join(API_PATH, 'repos', "search");
            // debugLog(`repositoryExistsOnDoor43 uri=${uri}`);
            _context12.prev = 13;_context12.next = 16;return (

              cachedGetFileUsingPartialURL({ uri: uri, params: params }));case 16:_yield$cachedGetFileU = _context12.sent;retrievedRepoListData = _yield$cachedGetFileU.data;
            retrievedRepoList = retrievedRepoListData;_context12.next = 25;break;case 21:_context12.prev = 21;_context12.t1 = _context12["catch"](13);


            console.error("repositoryExistsOnDoor43(".concat(username, ", ").concat(repository, ") - error fetching repo list"), _context12.t1.message);return _context12.abrupt("return",
            false);case 25:if (!(


            retrievedRepoList.length < 1)) {_context12.next = 28;break;}
            (0, _utilities.userLog)("repositoryExistsOnDoor43(".concat(username, ", ").concat(repository, ") - no repos found"));return _context12.abrupt("return",
            false);case 28:

            // debugLog(`repositoryExistsOnDoor43 retrievedRepoList (${retrievedRepoList.length})=${JSON.stringify(retrievedRepoList)}`);
            // for (const thisRepo of retrievedRepoList) userLog(`  thisRepo (${JSON.stringify(Object.keys(thisRepo))}) =${JSON.stringify(thisRepo.name)}`);
            desiredMatch = "".concat(username, "/").concat(repository).toLowerCase();
            filteredRepoList = retrievedRepoList.filter(function (repo) {return repo.full_name.toLowerCase() === desiredMatch;});if (!(
            filteredRepoList.length < 1)) {_context12.next = 33;break;}
            (0, _utilities.userLog)("repositoryExistsOnDoor43(".concat(username, ", ").concat(repository, ") - repo not found ").concat(retrievedRepoList.length, " ").concat(filteredRepoList.length));return _context12.abrupt("return",
            false);case 33:return _context12.abrupt("return",



            true);case 34:case "end":return _context12.stop();}}}, _callee12, null, [[1, 7], [13, 21]]);}));return _repositoryExistsOnDoor.apply(this, arguments);}
;function


cachedGetFileUsingPartialURL(_x20) {return _cachedGetFileUsingPartialURL.apply(this, arguments);}function _cachedGetFileUsingPartialURL() {_cachedGetFileUsingPartialURL = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee13(_ref8) {var uri, params, response;return _regenerator.default.wrap(function _callee13$(_context13) {while (1) {switch (_context13.prev = _context13.next) {case 0:uri = _ref8.uri, params = _ref8.params;_context13.next = 3;return (


              Door43Api.get(DOOR43_BASE_URL + uri, { params: params }));case 3:response = _context13.sent;
            if (response.request.fromCache !== true) (0, _utilities.userLog)("  Door43Api downloaded Door43 ".concat(uri));
            // debugLog(`  cachedGetFileUsingPartialURL returning: ${JSON.stringify(response.data)}`);
            return _context13.abrupt("return", response.data);case 6:case "end":return _context13.stop();}}}, _callee13);}));return _cachedGetFileUsingPartialURL.apply(this, arguments);}
;function

cachedGetFileUsingFullURL(_x21) {return _cachedGetFileUsingFullURL.apply(this, arguments);}function _cachedGetFileUsingFullURL() {_cachedGetFileUsingFullURL = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee14(_ref9) {var uri, params, pictureContents, zipBlob, zip, zipPath, response;return _regenerator.default.wrap(function _callee14$(_context14) {while (1) {switch (_context14.prev = _context14.next) {case 0:uri = _ref9.uri, params = _ref9.params;if (!

            uri.startsWith('https://cdn.door43.org/obs/jpg/360px/obs')) {_context14.next = 29;break;}_context14.next = 4;return (

              getUnZippedPictureFile(uri));case 4:pictureContents = _context14.sent;if (!
            pictureContents) {_context14.next = 7;break;}return _context14.abrupt("return",

            pictureContents);case 7:_context14.next = 9;return (

              zipStore.getItem(OBS_PICTURE_ZIP_FILENAME));case 9:zipBlob = _context14.sent;_context14.prev = 10;if (!


            zipBlob) {_context14.next = 19;break;}_context14.next = 14;return (

              _jszip.default.loadAsync(zipBlob));case 14:zip = _context14.sent;
            // zip.forEach(function (relativePath) {
            // debugLog(`relPath=${relativePath}`); // Displays 'relPath=360px/obs-en-17-09.jpg'
            // })
            zipPath = uri.substring(31); // Drop https://cdn.door43.org/obs/jpg/ to get 360px/obs-en-01-05.jpg
            // debugLog(`  zipPath=${zipPath}`);
            _context14.next = 18;return zip.file(zipPath).async('string');case 18:pictureContents = _context14.sent;case 19:_context14.next = 25;break;case 21:_context14.prev = 21;_context14.t0 = _context14["catch"](10);




            if (_context14.t0.message.indexOf(' is null') < 0)
            console.error("cachedGetFileUsingPartialURL for ".concat(uri, " got: ").concat(_context14.t0.message));
            pictureContents = null;case 25:if (!




            pictureContents) {_context14.next = 29;break;}_context14.next = 28;return (

              unzipStore.setItem(uri, pictureContents));case 28:return _context14.abrupt("return",

            pictureContents);case 29:_context14.next = 31;return (



              Door43Api.get(uri, { params: params }));case 31:response = _context14.sent;
            if (response.request.fromCache !== true) (0, _utilities.userLog)("  Door43Api downloaded ".concat(uri));
            // debugLog(`  cachedGetFileUsingFullURL returning: ${response.data}`);
            return _context14.abrupt("return", response.data);case 34:case "end":return _context14.stop();}}}, _callee14, null, [[10, 21]]);}));return _cachedGetFileUsingFullURL.apply(this, arguments);}
;


/*
function fetchRepositoriesZipFiles({username, languageId, branch}) {
  const repositories = resourceRepositories({languageId});
  const promises = Object.values(repositories).map(repository => {
    return downloadRepositoryZipFile({username, repository, branch});
  });
  const zipArray = await Promise.all(promises);
  return zipArray;
};
*/


/**
 * retrieve repo as zip file
 * @param {string} username
 * @param {string} repository
 * @param {string} branch
 * @param {boolean} forceLoad - if not true, then use existing repo in zipstore
 * @return {Promise<[]|*[]>} resolves to true if downloaded
 */function
cachedGetRepositoryZipFile(_x22) {return _cachedGetRepositoryZipFile.apply(this, arguments);}function _cachedGetRepositoryZipFile() {_cachedGetRepositoryZipFile = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee15(_ref10) {var username,repository,branchOrRelease,forceLoad,zipBlob,_args15 = arguments;return _regenerator.default.wrap(function _callee15$(_context15) {while (1) {switch (_context15.prev = _context15.next) {case 0:username = _ref10.username, repository = _ref10.repository, branchOrRelease = _ref10.branchOrRelease;forceLoad = _args15.length > 1 && _args15[1] !== undefined ? _args15[1] : false;if (



            forceLoad) {_context15.next = 8;break;}_context15.next = 5;return (
              getZipFromStore(username, repository, branchOrRelease));case 5:zipBlob = _context15.sent;if (!
            zipBlob) {_context15.next = 8;break;}return _context15.abrupt("return",

            true);case 8:return _context15.abrupt("return",


            downloadRepositoryZipFile({ username: username, repository: repository, branchOrRelease: branchOrRelease }));case 9:case "end":return _context15.stop();}}}, _callee15);}));return _cachedGetRepositoryZipFile.apply(this, arguments);}
;function


downloadRepositoryZipFile(_x23) {return _downloadRepositoryZipFile.apply(this, arguments);}function _downloadRepositoryZipFile() {_downloadRepositoryZipFile = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee16(_ref11) {var username, repository, branchOrRelease, uri, response, zipArrayBuffer;return _regenerator.default.wrap(function _callee16$(_context16) {while (1) {switch (_context16.prev = _context16.next) {case 0:username = _ref11.username, repository = _ref11.repository, branchOrRelease = _ref11.branchOrRelease;
            (0, _utilities.functionLog)("downloadRepositoryZipFile(".concat(username, ", ").concat(repository, ", ").concat(branchOrRelease, ")\u2026"));
            // RJH removed this 2Oct2020 -- what’s the point -- it just slows things down --
            //      if it needs to be checked, should be checked before this point
            // const repoExists = await repositoryExistsOnDoor43({ username, repository });
            // if (!repoExists) {
            //   console.error(`downloadRepositoryZipFile(${username}, ${repository}, ${branchOrRelease}) -- repo doesn’t even exist`);
            //   return null;
            // }

            // Template is https://git.door43.org/{username}/{repository}/archive/{branchOrRelease}.zip
            uri = zipUri({ username: username, repository: repository, branchOrRelease: branchOrRelease });_context16.next = 5;return (
              fetch(uri));case 5:response = _context16.sent;if (!(
            response.status === 200 || response.status === 0)) {_context16.next = 15;break;}_context16.next = 9;return (
              response.arrayBuffer());case 9:zipArrayBuffer = _context16.sent;_context16.next = 12;return (
              zipStore.setItem(uri.toLowerCase(), zipArrayBuffer));case 12:return _context16.abrupt("return",

            true);case 15:

            console.error("downloadRepositoryZipFile(".concat(username, ", ").concat(repository, ", ").concat(branchOrRelease, ") -- got response status: ").concat(response.status));return _context16.abrupt("return",
            false);case 17:case "end":return _context16.stop();}}}, _callee16);}));return _downloadRepositoryZipFile.apply(this, arguments);}

;


/**
 * pull repo from zipstore and get a file list
 * @param {string} username
 * @param {string} repository
 * @param {string} branchOrRelease
 * @param {string} optionalPrefix - to filter by book, etc.
 * @return {Promise<[]|*[]>}  resolves to file list
 */function
getFileListFromZip(_x24) {return _getFileListFromZip.apply(this, arguments);}

















































/**
 * try to get zip file from cache
 * @param {string} username
 * @param {string} repository
 * @param {string} branchOrRelease
 * @return {Promise<unknown>} resolves to null if not found
 */function _getFileListFromZip() {_getFileListFromZip = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee17(_ref12) {var username, repository, branchOrRelease, optionalPrefix, uri, zipBlob, response, zipArrayBuffer, pathList, zip;return _regenerator.default.wrap(function _callee17$(_context17) {while (1) {switch (_context17.prev = _context17.next) {case 0:username = _ref12.username, repository = _ref12.repository, branchOrRelease = _ref12.branchOrRelease, optionalPrefix = _ref12.optionalPrefix; // functionLog(`getFileListFromZip(${username}, ${repository}, ${branchOrRelease}, ${optionalPrefix})…`);
            uri = zipUri({ username: username, repository: repository, branchOrRelease: branchOrRelease });_context17.next = 4;return getZipFromStore(username, repository, branchOrRelease);case 4:zipBlob = _context17.sent;if (zipBlob) {_context17.next = 20;break;}_context17.next = 8;return fetch(uri);case 8:response = _context17.sent;if (!(response.status === 200 || response.status === 0)) {_context17.next = 18;break;}_context17.next = 12;return response.arrayBuffer();case 12:zipArrayBuffer = _context17.sent;_context17.next = 15;return zipStore.setItem(uri.toLowerCase(), zipArrayBuffer);case 15:zipBlob = _context17.sent;_context17.next = 20;break;case 18:console.error("getFileListFromZip got response status: ".concat(response.status));return _context17.abrupt("return", []);case 20:pathList = [];_context17.prev = 21;if (!zipBlob) {_context17.next = 27;break;}_context17.next = 25;return _jszip.default.loadAsync(zipBlob);case 25:zip = _context17.sent; // debugLog(`  Got zip`);
            // Now we need to fetch the list of files from the repo
            // zip.forEach(function (relativePath, fileObject) {
            zip.forEach(function (relativePath) {// debugLog(`relPath=${relativePath}`)
              // consoleLogObject('fileObject', fileObject);
              if (!relativePath.endsWith('/')) // it’s not a folder
                {if (relativePath.startsWith("".concat(repository, "/"))) // remove repo name prefix
                    relativePath = relativePath.substring(repository.length + 1);if (relativePath.length && !relativePath.startsWith('.git') // skips files in these folders
                  && !relativePath.startsWith('.apps') // skips files in this folder
                  && (!optionalPrefix || relativePath.startsWith(optionalPrefix))) // it’s the correct prefix
                    pathList.push(relativePath);}});case 27:_context17.next = 32;break;case 29:_context17.prev = 29;_context17.t0 = _context17["catch"](21);console.error("getFileListFromZip got: ".concat(_context17.t0.message));case 32:return _context17.abrupt("return", pathList);case 33:case "end":return _context17.stop();}}}, _callee17, null, [[21, 29]]);}));return _getFileListFromZip.apply(this, arguments);}function getZipFromStore(_x25, _x26, _x27) {return _getZipFromStore.apply(this, arguments);} /**
 * pull repo from zipstore and get the unzipped file
 * @param {string} username
 * @param {string} repository
 * @param {string} branchOrRelease
 * @param {object} optionalPrefix
 * @return {Promise<[]|*[]>} resolves to unzipped file if found or null
 */function _getZipFromStore() {_getZipFromStore = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee18(username, repository, branchOrRelease) {var uri, zipBlob;return _regenerator.default.wrap(function _callee18$(_context18) {while (1) {switch (_context18.prev = _context18.next) {case 0: // functionLog(`getZipFromStore(${username}, ${repository}, ${branchOrRelease})…`);
            uri = zipUri({ username: username, repository: repository, branchOrRelease: branchOrRelease }); // debugLog(`  uri=${uri}`);
            _context18.next = 3;return zipStore.getItem(uri.toLowerCase());case 3:zipBlob = _context18.sent;return _context18.abrupt("return", zipBlob);case 5:case "end":return _context18.stop();}}}, _callee18);}));return _getZipFromStore.apply(this, arguments);}function getFileFromZip(_x28) {return _getFileFromZip.apply(this, arguments);}function _getFileFromZip() {_getFileFromZip = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee19(_ref13) {var username, repository, path, branchOrRelease, file, zipBlob, zip, zipPath;return _regenerator.default.wrap(function _callee19$(_context19) {while (1) {switch (_context19.prev = _context19.next) {case 0:username = _ref13.username, repository = _ref13.repository, path = _ref13.path, branchOrRelease = _ref13.branchOrRelease;_context19.next = 3;return (

              getZipFromStore(username, repository, branchOrRelease));case 3:zipBlob = _context19.sent;_context19.prev = 4;if (!

            zipBlob) {_context19.next = 13;break;}_context19.next = 8;return (

              _jszip.default.loadAsync(zipBlob));case 8:zip = _context19.sent;
            zipPath = _path.default.join(repository.toLowerCase(), path);
            // debugLog(`  zipPath=${zipPath}`);
            _context19.next = 12;return zip.file(zipPath).async('string');case 12:file = _context19.sent;case 13:_context19.next = 19;break;case 15:_context19.prev = 15;_context19.t0 = _context19["catch"](4);




            if (_context19.t0.message.indexOf(' is null') < 0)
            console.error("getFileFromZip for ".concat(username, " ").concat(repository, " ").concat(path, " ").concat(branchOrRelease, " got: ").concat(_context19.t0.message));
            file = null;case 19:return _context19.abrupt("return",

            file);case 20:case "end":return _context19.stop();}}}, _callee19, null, [[4, 15]]);}));return _getFileFromZip.apply(this, arguments);}
;


function zipUri(_ref14) {var username = _ref14.username,repository = _ref14.repository,_ref14$branchOrReleas = _ref14.branchOrRelease,branchOrRelease = _ref14$branchOrReleas === void 0 ? 'master' : _ref14$branchOrReleas;
  // functionLog(`zipUri(${username}, ${repository}, ${branchOrRelease})…`);
  var zipPath = _path.default.join(username, repository, 'archive', "".concat(branchOrRelease, ".zip"));
  var zipUri = DOOR43_BASE_URL + zipPath;
  return zipUri;
};


// async function fetchTree({ username, repository, sha = 'master' }) {
//   // functionLog(`fetchTree(${username}, ${repository}, ${sha})…`);
//   let data;
//   try {
//     const uri = Path.join('api/v1/repos', username, repository, 'git/trees', sha);
//     // debugLog(`  uri='${uri}'`);
//     data = await cachedGetFileUsingPartialURL({ uri });
//     // debugLog(`  data (${typeof data})`);
//     return data;
//     // const tree = JSON.parse(data); // RJH: Why was this here???
//     // debugLog(`  tree (${typeof tree})`);
//     // return tree;
//   } catch (error) {
//     console.error(`fetchTree got: ${error.message}`);
//     userLog(`  Data was: ${JSON.stringify(data)}`);
//     return null;
//   }
// };


/*
async function recursiveTree({username, repository, path, sha}) {
  userLog("recurse tree args:",username,repository,path,sha)
  let tree = {};
  const pathArray = path.split();
  const results = fetchTree({username, repository, sha});
  const result = results.tree.filter(item => item.path === pathArray[0])[0];
  if (result) {
    if (result.type === 'tree') {
      const childPath = pathArray.slice(1).join('/');
      const children = recursiveTree({username, repository, path: childPath, sha: result.sha});
      tree[result.path] = children;
    } else if (result.type === 'blob') {
      tree[result.path] = true;
    }
  }
};

async function fileExists({username, repository, path, branch}) {
  // get root listing
  recursiveTree()
  // get recursive path listing
}
*/
//# sourceMappingURL=data:application/json;charset=utf-8;base64,