"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.checkTextField = checkTextField;
var _defaults = require("./defaults");
var _textHandlingFunctions = require("./text-handling-functions");

var _utilities = require("./utilities");function _createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}


// const FIELD_TEXT_VALIDATOR_VERSION_STRING = '0.3.6';


/**
 * @description -- Does basic checks for small errors like leading/trailing spaces, etc.
 * @param {string} languageCode -- can be an empty string
 * @param {string} repoCode -- e.g., 'TN' or 'TQ2', etc.
 * @param {string} fieldType -- classification, e.g., TSV, USFM, YAML, link, markdown, raw
 * @param {string} fieldName -- used for identification
 * @param {string} fieldText -- the field being checked
 * @param {boolean} allowedLinks -- doesn’t check links -- only checks lack of links
 * @param {string} optionalFieldLocation -- used to inform where this field is located
 * @param {Object} checkingOptions
 */
function checkTextField(languageCode, repoCode, fieldType, fieldName, fieldText, allowedLinks, optionalFieldLocation, checkingOptions) {
  // We assume that checking for compulsory fields is done elsewhere

  // Returns a single notice list
  //  The list contains objects with the following fields:
  //      priority (compulsory): the priority number 0..999 (usually 800+ are errors, lower are warnings)
  //      message (compulsory): the error description string
  //      characterIndex: the 0-based index for the position in the string
  //      excerpt: a short excerpt of the string containing the error (or empty-string if irrelevant)
  //      location: the detailed location string
  //  (Returned in this way for more intelligent processing at a higher level)
  // functionLog(`checkTextField(${fieldName}, ${fieldText.length.toLocaleString()} chars, ${allowedLinks}, '${optionalFieldLocation}')…`);
  //parameterAssert(languageCode !== undefined, "checkTextField: 'languageCode' parameter should be defined");
  //parameterAssert(typeof languageCode === 'string', `checkTextField: 'languageCode' parameter should be a string not a '${typeof languageCode}': ${languageCode}`);
  //parameterAssert(languageCode !== 'unfoldingWord', `checkTextField: 'languageCode' ${languageCode} parameter should be not be 'unfoldingWord'`);
  //parameterAssert(repoCode !== undefined, "checkTextField: 'repoCode' parameter should be defined");
  //parameterAssert(typeof repoCode === 'string', `checkTextField: 'repoCode' parameter should be a string not a '${typeof repoCode}': ${repoCode}`);
  //parameterAssert(REPO_CODES_LIST.includes(repoCode), `checkTextField: 'repoCode' parameter should not be '${repoCode}'`);
  //parameterAssert(fieldType !== undefined, "checkTextField: 'fieldType' parameter should be defined");
  //parameterAssert(typeof fieldType === 'string', `checkTextField: 'fieldType' parameter should be a string not a '${typeof fieldType}': ${fieldType}`);
  //parameterAssert(fieldType !== '', `checkTextField: 'fieldType' ${fieldType} parameter should be not be an empty string`);
  //parameterAssert(fieldType === 'markdown' || fieldType === 'USFM' || fieldType === 'YAML' || fieldType === 'text' || fieldType === 'raw' || fieldType === 'link', `checkTextField: unrecognised 'fieldType' parameter: '${fieldType}'`);
  //parameterAssert(fieldName !== undefined, "checkTextField: 'fieldName' parameter should be defined");
  //parameterAssert(typeof fieldName === 'string', `checkTextField: 'fieldName' parameter should be a string not a '${typeof fieldName}': ${fieldName}`);
  // if (fieldType !== 'markdown')
  //     //parameterAssert(fieldName !== '', `checkTextField: ${fieldType} 'fieldName' parameter should be not be an empty string`);
  //parameterAssert(fieldText !== undefined, "checkTextField: 'fieldText' parameter should be defined");
  //parameterAssert(typeof fieldText === 'string', `checkTextField: 'fieldText' parameter should be a string not a '${typeof fieldText}': ${fieldText}`);
  //parameterAssert(allowedLinks === true || allowedLinks === false, "checkTextField: allowedLinks parameter must be either true or false");
  if (!allowedLinks) {//parameterAssert(fieldText.indexOf('x-tw') < 0, `checkTextField should be allowedLinks for ${fieldType} ${fieldName} ${fieldText}`);
  }
  //parameterAssert(optionalFieldLocation !== undefined, "checkTextField: 'optionalFieldLocation' parameter should be defined");
  //parameterAssert(typeof optionalFieldLocation === 'string', `checkTextField: 'optionalFieldLocation' parameter should be a string not a '${typeof optionalFieldLocation}': ${optionalFieldLocation}`);
  //parameterAssert(optionalFieldLocation.indexOf('true') === -1, `checkTextField: 'optionalFieldLocation' parameter should not be '${optionalFieldLocation}'`);
  if (checkingOptions !== undefined) {//parameterAssert(typeof checkingOptions === 'object', `checkTextField: 'checkingOptions' parameter should be an object not a '${typeof checkingOptions}': ${JSON.stringify(checkingOptions)}`);
  }

  var result = { noticeList: [] };

  function addNoticePartial(noticeObject) {
    // We add the fieldName here
    // debugLog(`dBTC Notice: (priority=${priority}) ${message}${characterIndex > 0 ? ` (at character ${characterIndex})` : ""}${excerpt ? ` ${excerpt}` : ""}${location}`);
    //parameterAssert(noticeObject.priority !== undefined, "dBTCs addNoticePartial: 'priority' parameter should be defined");
    //parameterAssert(typeof noticeObject.priority === 'number', `dBTCs addNoticePartial: 'priority' parameter should be a number not a '${typeof noticeObject.priority}': ${noticeObject.priority}`);
    //parameterAssert(noticeObject.message !== undefined, "dBTCs addNoticePartial: 'message' parameter should be defined");
    //parameterAssert(typeof noticeObject.message === 'string', `dBTCs addNoticePartial: 'message' parameter should be a string not a '${typeof noticeObject.message}': ${noticeObject.message}`);
    // //parameterAssert(characterIndex !== undefined, "dBTCs addNoticePartial: 'characterIndex' parameter should be defined");
    if (noticeObject.characterIndex) {//parameterAssert(typeof noticeObject.characterIndex === 'number', `dBTCs addNoticePartial: 'characterIndex' parameter should be a number not a '${typeof noticeObject.characterIndex}': ${noticeObject.characterIndex}`);
    }
    // //parameterAssert(excerpt !== undefined, "dBTCs addNoticePartial: 'excerpt' parameter should be defined");
    if (noticeObject.excerpt) {//parameterAssert(typeof noticeObject.excerpt === 'string', `dBTCs addNoticePartial: 'excerpt' parameter should be a string not a '${typeof noticeObject.excerpt}': ${noticeObject.excerpt}`);
    }
    //parameterAssert(noticeObject.location !== undefined, "dBTCs addNoticePartial: 'location' parameter should be defined");
    //parameterAssert(typeof noticeObject.location === 'string', `dBTCs addNoticePartial: 'location' parameter should be a string not a '${typeof noticeObject.location}': ${noticeObject.location}`);

    // noticeObject.debugChain = noticeObject.debugChain ? `checkTextField(${fieldType}, ${fieldName}, ${allowedLinks}) ${noticeObject.debugChain}` : `checkTextField(${fieldType}, ${fieldName}, ${allowedLinks})`;
    if (fieldName.length) noticeObject.fieldName = fieldName; // Don’t add the field if it’s blank
    result.noticeList.push(noticeObject);
  }


  // Main code for checkTextField()
  if (!fieldText) // Nothing to check
    return result;

  // Create our more detailed location string by prepending the fieldName
  var ourLocation = optionalFieldLocation;
  if (ourLocation && ourLocation[0] !== ' ') ourLocation = " ".concat(ourLocation);

  var excerptLength;
  try {
    excerptLength = checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.excerptLength;
  } catch (btcError) {}
  if (typeof excerptLength !== 'number' || isNaN(excerptLength)) {
    excerptLength = _defaults.DEFAULT_EXCERPT_LENGTH;
    // debugLog(`Using default excerptLength=${excerptLength}`);
  }
  // else
  // debugLog(`Using supplied excerptLength=${excerptLength}`, `cf. default=${DEFAULT_EXCERPT_LENGTH}`);
  var excerptHalfLength = Math.floor(excerptLength / 2); // rounded down
  var excerptHalfLengthPlus = Math.floor((excerptLength + 1) / 2); // rounded up
  // debugLog(`Using excerptHalfLength=${excerptHalfLength}`, `excerptHalfLengthPlus=${excerptHalfLengthPlus}`);

  var suggestion = fieldText.trim();

  var characterIndex;
  if ((!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.cutoffPriorityLevel) || (checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.cutoffPriorityLevel) < 895) &&
  (characterIndex = fieldText.indexOf("\u200B")) >= 0) {
    var charCount = (0, _textHandlingFunctions.countOccurrences)(fieldText, "\u200B");
    var excerpt = (characterIndex > excerptHalfLength ? '…' : '') + fieldText.substring(characterIndex - excerptHalfLength, characterIndex + excerptHalfLengthPlus).replace(/\u200B/g, '‼') + (characterIndex + excerptHalfLengthPlus < fieldText.length ? '…' : '');
    addNoticePartial({ priority: 895, message: "Field contains zero-width space(s)", details: "".concat(charCount, " occurrence").concat(charCount === 1 ? '' : 's', " found"), characterIndex: characterIndex, excerpt: excerpt, location: ourLocation });
    suggestion = suggestion.replace(/\u200B/g, ''); // Or should it be space ???
  }

  if ((!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.cutoffPriorityLevel) || (checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.cutoffPriorityLevel) < 638) &&
  (0, _textHandlingFunctions.isWhitespace)(fieldText)) {
    addNoticePartial({ priority: 638, message: "Only found whitespace", location: ourLocation });
    return result;
  }

  if ((!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.cutoffPriorityLevel) || (checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.cutoffPriorityLevel) < 993) &&
  (characterIndex = fieldText.indexOf('<<<<<<<')) >= 0) {
    var iy = characterIndex + excerptHalfLength; // Want excerpt to focus more on what follows
    var _excerpt = (iy > excerptHalfLength ? '…' : '') + fieldText.substring(iy - excerptHalfLength, iy + excerptHalfLengthPlus).replace(/ /g, '␣') + (iy + excerptHalfLengthPlus < fieldText.length ? '…' : '');

    addNoticePartial({ priority: 993, message: "Unresolved GIT conflict", characterIndex: characterIndex, excerpt: _excerpt, location: ourLocation });
  } else {
    if ((!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.cutoffPriorityLevel) || (checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.cutoffPriorityLevel) < 992) &&
    (characterIndex = fieldText.indexOf('=======')) >= 0) {
      var _iy = characterIndex + excerptHalfLength; // Want excerpt to focus more on what follows
      var _excerpt2 = (_iy > excerptHalfLength ? '…' : '') + fieldText.substring(_iy - excerptHalfLength, _iy + excerptHalfLengthPlus).replace(/ /g, '␣') + (_iy + excerptHalfLengthPlus < fieldText.length ? '…' : '');
      addNoticePartial({ priority: 992, message: "Unresolved GIT conflict", characterIndex: characterIndex, excerpt: _excerpt2, location: ourLocation });
    } else {
      if ((!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.cutoffPriorityLevel) || (checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.cutoffPriorityLevel) < 991) &&
      (characterIndex = fieldText.indexOf('>>>>>>>>')) >= 0) {
        var _iy2 = characterIndex + excerptHalfLength; // Want excerpt to focus more on what follows
        var _excerpt3 = (_iy2 > excerptHalfLength ? '…' : '') + fieldText.substring(_iy2 - excerptHalfLength, _iy2 + excerptHalfLengthPlus).replace(/ /g, '␣') + (_iy2 + excerptHalfLengthPlus < fieldText.length ? '…' : '');
        addNoticePartial({ priority: 991, message: "Unresolved GIT conflict", characterIndex: characterIndex, excerpt: _excerpt3, location: ourLocation });
      }
    }
  }

  if (fieldText[0] === ' ') {
    var _excerpt4 = fieldText.substring(0, excerptLength).replace(/ /g, '␣') + (fieldText.length > excerptLength ? '…' : '');
    if (fieldText[1] === ' ') // spaces plural
      addNoticePartial({ priority: 110, message: "Unexpected leading spaces", characterIndex: 0, excerpt: _excerpt4, location: ourLocation });else

    addNoticePartial({ priority: 109, message: "Unexpected leading space", characterIndex: 0, excerpt: _excerpt4, location: ourLocation });
  } else if (fieldText[0] === "\u2060") {
    var _excerpt5 = fieldText.substring(0, excerptLength).replace(/\u2060/g, '‼') + (fieldText.length > excerptLength ? '…' : '');
    addNoticePartial({ priority: 770, message: "Unexpected leading word-joiner", characterIndex: 0, excerpt: _excerpt5, location: ourLocation });
    if (suggestion[0] === "\u2060") suggestion = suggestion.substring(1);
  } else if (fieldText[0] === "\u200D") {
    var _excerpt6 = fieldText.substring(0, excerptLength).replace(/\u200D/g, '‼') + (fieldText.length > excerptLength ? '…' : '');
    addNoticePartial({ priority: 771, message: "Unexpected leading zero-width joiner", characterIndex: 0, excerpt: _excerpt6, location: ourLocation });
    if (suggestion[0] === "\u200D") suggestion = suggestion.substring(1);
  }
  if ((!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.cutoffPriorityLevel) || (checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.cutoffPriorityLevel) < 64) &&
  (characterIndex = fieldText.indexOf('<br> ')) >= 0) {
    var _excerpt7 = (characterIndex > excerptHalfLength ? '…' : '') + fieldText.substring(characterIndex - excerptHalfLength, characterIndex + excerptHalfLengthPlus).replace(/ /g, '␣') + (characterIndex + excerptHalfLengthPlus < fieldText.length ? '…' : '');
    addNoticePartial({ priority: 64, message: "Unexpected leading space(s) after break", characterIndex: characterIndex, excerpt: _excerpt7, location: ourLocation });
  }
  if ((!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.cutoffPriorityLevel) || (checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.cutoffPriorityLevel) < 63) &&
  (characterIndex = fieldText.indexOf('\\n ')) >= 0) {
    var _excerpt8 = (characterIndex > excerptHalfLength ? '…' : '') + fieldText.substring(characterIndex - excerptHalfLength, characterIndex + excerptHalfLengthPlus).replace(/ /g, '␣') + (characterIndex + excerptHalfLengthPlus < fieldText.length ? '…' : '');
    addNoticePartial({ priority: 63, message: "Unexpected leading space(s) after line break", characterIndex: characterIndex, excerpt: _excerpt8, location: ourLocation });
  }

  if ((!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.cutoffPriorityLevel) || (checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.cutoffPriorityLevel) < 772) &&
  fieldText[fieldText.length - 1] === "\u2060") {
    var _excerpt9 = fieldText.substring(0, excerptLength).replace(/\u2060/g, '‼') + (fieldText.length > excerptLength ? '…' : '');
    addNoticePartial({ priority: 772, message: "Unexpected trailing word-joiner", characterIndex: 0, excerpt: _excerpt9, location: ourLocation });
    if (suggestion[suggestion.length - 1] === "\u2060") suggestion = suggestion.substring(0, suggestion.length - 1);
  } else if ((!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.cutoffPriorityLevel) || (checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.cutoffPriorityLevel) < 773) &&
  fieldText[fieldText.length - 1] === "\u200D") {
    var _excerpt10 = fieldText.substring(0, excerptLength).replace(/\u200D/g, '‼') + (fieldText.length > excerptLength ? '…' : '');
    addNoticePartial({ priority: 773, message: "Unexpected trailing zero-width joiner", characterIndex: 0, excerpt: _excerpt10, location: ourLocation });
    if (suggestion[suggestion.length - 1] === "\u200D") suggestion = suggestion.substring(0, suggestion.length - 1);
  }

  // Find leading line breaks (but not if the whole line is just the line break sequence)
  var fieldTextLower = fieldText.toLowerCase();
  if ((!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.cutoffPriorityLevel) || (checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.cutoffPriorityLevel) < 107) && (
  fieldTextLower.substring(0, 2) === '\\n' || fieldTextLower.substring(0, 4) === '<br>' || fieldTextLower.substring(0, 5) === '<br/>' || fieldTextLower.substring(0, 6) === '<br />') &&
  fieldTextLower !== '\\n' && fieldTextLower !== '<br>' && fieldTextLower !== '<br/>' && fieldTextLower !== '<br />') {
    var _excerpt11 = fieldText.substring(0, excerptLength) + (fieldText.length > excerptLength ? '…' : '');
    addNoticePartial({ priority: 107, message: "Unexpected leading line break", characterIndex: 0, excerpt: _excerpt11, location: ourLocation });
    while (suggestion.toLowerCase().substring(0, 2) === '\\n') {suggestion = suggestion.substring(2);}
    while (suggestion.toLowerCase().substring(0, 4) === '<br>') {suggestion = suggestion.substring(4);}
    while (suggestion.toLowerCase().substring(0, 5) === '<br/>') {suggestion = suggestion.substring(5);}
    while (suggestion.toLowerCase().substring(0, 6) === '<br />') {suggestion = suggestion.substring(6);}
  }

  if ((!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.cutoffPriorityLevel) || (checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.cutoffPriorityLevel) < 95) &&
  fieldText[fieldText.length - 1] === ' ')
    // Markdown gives meaning to two spaces at the end of a line
    if (fieldType !== 'markdown' || fieldText.length < 3 || fieldText[fieldText.length - 2] !== ' ' || fieldText[fieldText.length - 3] === ' ') {
      var _excerpt12 = (fieldText.length > excerptLength ? '…' : '') + fieldText.substring(fieldText.length - 10).replace(/ /g, '␣');
      var notice = { priority: 95, message: "Unexpected trailing space(s)", excerpt: _excerpt12, location: ourLocation };
      if (fieldType !== 'raw' && fieldType !== 'text' || fieldName.substring(0, 6) !== 'from \\')
      notice.characterIndex = fieldText.length - 1; // characterIndex means nothing for processed USFM
      addNoticePartial(notice);
    }
  if ((!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.cutoffPriorityLevel) || (checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.cutoffPriorityLevel) < 94) &&
  (characterIndex = fieldText.indexOf(' <br')) >= 0) {
    var _excerpt13 = (characterIndex > excerptHalfLength ? '…' : '') + fieldText.substring(characterIndex - excerptHalfLength, characterIndex + excerptHalfLengthPlus).replace(/ /g, '␣') + (characterIndex + excerptHalfLengthPlus < fieldText.length ? '…' : '');
    addNoticePartial({ priority: 94, message: "Unexpected trailing space(s) before break", characterIndex: characterIndex, excerpt: _excerpt13, location: ourLocation });
  }
  if ((!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.cutoffPriorityLevel) || (checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.cutoffPriorityLevel) < 93) &&
  (characterIndex = fieldText.indexOf(' \\n')) >= 0) {
    var _excerpt14 = (characterIndex > excerptHalfLength ? '…' : '') + fieldText.substring(characterIndex - excerptHalfLength, characterIndex + excerptHalfLengthPlus).replace(/ /g, '␣') + (characterIndex + excerptHalfLengthPlus < fieldText.length ? '…' : '');
    addNoticePartial({ priority: 93, message: "Unexpected trailing space(s) before line break", characterIndex: characterIndex, excerpt: _excerpt14, location: ourLocation });
  }

  // Find trailing line breaks (but not if the whole line is just the line break sequence)
  if ((!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.cutoffPriorityLevel) || (checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.cutoffPriorityLevel) < 104) && (
  fieldTextLower.substring(fieldTextLower.length - 2) === '\\n' || fieldTextLower.substring(fieldTextLower.length - 4) === '<br>' || fieldTextLower.substring(fieldTextLower.length - 5) === '<br/>' || fieldTextLower.substring(fieldTextLower.length - 6) === '<br />') &&
  fieldTextLower !== '\\n' && fieldTextLower !== '<br>' && fieldTextLower !== '<br/>' && fieldTextLower !== '<br />') {
    var _excerpt15 = (fieldText.length > excerptLength ? '…' : '') + fieldText.substring(fieldText.length - 10);
    addNoticePartial({ priority: 104, message: "Unexpected trailing line break", characterIndex: fieldText.length - 1, excerpt: _excerpt15, location: ourLocation });
    while (suggestion.toLowerCase().substring(suggestion.length - 2) === '\\n') {suggestion = suggestion.substring(0, suggestion.length - 2);}
    while (suggestion.toLowerCase().substring(suggestion.length - 4) === '<br>') {suggestion = suggestion.substring(0, suggestion.length - 4);}
    while (suggestion.toLowerCase().substring(suggestion.length - 5) === '<br/>') {suggestion = suggestion.substring(0, suggestion.length - 5);}
    while (suggestion.toLowerCase().substring(suggestion.length - 6) === '<br />') {suggestion = suggestion.substring(0, suggestion.length - 6);}
  }
  if ((!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.cutoffPriorityLevel) || (checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.cutoffPriorityLevel) < 124) &&
  (characterIndex = fieldText.indexOf('  ')) >= 0 && (
  fieldType !== 'markdown' || characterIndex !== fieldText.length - 2)) {
    var _excerpt16 = (characterIndex > excerptHalfLength ? '…' : '') + fieldText.substring(characterIndex - excerptHalfLength, characterIndex + excerptHalfLengthPlus).replace(/ /g, '␣') + (characterIndex + excerptHalfLengthPlus < fieldText.length ? '…' : '');
    var doubleCount = (0, _textHandlingFunctions.countOccurrences)(fieldText, '  ');
    var _notice;
    if (doubleCount === 1)
    _notice = { priority: 124, message: "Unexpected double spaces", excerpt: _excerpt16, location: ourLocation };else

    _notice = { priority: 224, message: "Multiple unexpected double spaces", details: "".concat(doubleCount, " occurrences\u2014only first is displayed"), excerpt: _excerpt16, location: ourLocation };
    if (fieldType !== 'raw' && fieldType !== 'text' || fieldName.substring(0, 6) !== 'from \\')
    _notice.characterIndex = characterIndex; // characterIndex means nothing for processed USFM
    if (!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.cutoffPriorityLevel) || (checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.cutoffPriorityLevel) < _notice.priority)
    addNoticePartial(_notice);
    // Note: replacing double-spaces in the suggestion is done later -- after other suggestion modifications which might affect it
  }
  if ((!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.cutoffPriorityLevel) || (checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.cutoffPriorityLevel) < 583) &&
  (characterIndex = fieldText.indexOf('\n')) >= 0) {
    var _excerpt17 = (characterIndex > excerptHalfLength ? '…' : '') + fieldText.substring(characterIndex - excerptHalfLength, characterIndex + excerptHalfLengthPlus) + (characterIndex + excerptHalfLengthPlus < fieldText.length ? '…' : '');
    addNoticePartial({ priority: 583, message: "Unexpected newLine character", characterIndex: characterIndex, excerpt: _excerpt17, location: ourLocation });
    suggestion = suggestion.replace(/\n/g, ' ');
  }
  if ((!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.cutoffPriorityLevel) || (checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.cutoffPriorityLevel) < 582) &&
  (characterIndex = fieldText.indexOf('\r')) >= 0) {
    var _excerpt18 = (characterIndex > excerptHalfLength ? '…' : '') + fieldText.substring(characterIndex - excerptHalfLength, characterIndex + excerptHalfLengthPlus) + (characterIndex + excerptHalfLengthPlus < fieldText.length ? '…' : '');
    addNoticePartial({ priority: 582, message: "Unexpected carriageReturn character", characterIndex: characterIndex, excerpt: _excerpt18, location: ourLocation });
    suggestion = suggestion.replace(/\r/g, ' ');
  }
  if ((!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.cutoffPriorityLevel) || (checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.cutoffPriorityLevel) < 581) &&
  (characterIndex = fieldText.indexOf('\xA0')) >= 0) {// non-break space
    var _excerpt19 = (characterIndex > excerptHalfLength ? '…' : '') + fieldText.substring(characterIndex - excerptHalfLength, characterIndex + excerptHalfLengthPlus).replace(/\xA0/g, '⍽') + (characterIndex + excerptHalfLengthPlus < fieldText.length ? '…' : '');
    addNoticePartial({ priority: 581, message: "Unexpected non-break space (uA0) character", characterIndex: characterIndex, excerpt: _excerpt19, location: ourLocation });
    suggestion = suggestion.replace(/\xA0/g, ' ');
  }
  if ((!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.cutoffPriorityLevel) || (checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.cutoffPriorityLevel) < 580) &&
  (characterIndex = fieldText.indexOf("\u202F")) >= 0) {// narrow non-break space
    var _excerpt20 = (characterIndex > excerptHalfLength ? '…' : '') + fieldText.substring(characterIndex - excerptHalfLength, characterIndex + excerptHalfLengthPlus).replace(/\u202F/g, '⍽') + (characterIndex + excerptHalfLengthPlus < fieldText.length ? '…' : '');
    var _notice2 = { priority: 580, message: "Unexpected narrow non-break space (u202F) character", excerpt: _excerpt20, location: ourLocation };
    if (fieldType !== 'raw' && fieldType !== 'text' || fieldName.substring(0, 6) !== 'from \\')
    _notice2.characterIndex = characterIndex; // characterIndex means nothing for processed USFM
    addNoticePartial(_notice2);
    suggestion = suggestion.replace(/\u202F/g, ' ');
  }
  if (fieldName === 'OrigQuote' || fieldName === 'Quote') {
    if ((!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.cutoffPriorityLevel) || (checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.cutoffPriorityLevel) < 179) &&
    (characterIndex = fieldText.indexOf(' …')) >= 0) {
      var _excerpt21 = (characterIndex > excerptHalfLength ? '…' : '') + fieldText.substring(characterIndex - excerptHalfLength, characterIndex + excerptHalfLengthPlus) + (characterIndex + excerptHalfLengthPlus < fieldText.length ? '…' : '');
      addNoticePartial({ priority: 179, message: "Unexpected space before ellipse character", characterIndex: characterIndex, excerpt: _excerpt21, location: ourLocation });
      suggestion = suggestion.replace(/ …/g, '…');
    }
    if ((!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.cutoffPriorityLevel) || (checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.cutoffPriorityLevel) < 178) &&
    (characterIndex = fieldText.indexOf('… ')) >= 0) {
      var _excerpt22 = (characterIndex > excerptHalfLength ? '…' : '') + fieldText.substring(characterIndex - excerptHalfLength, characterIndex + excerptHalfLengthPlus) + (characterIndex + excerptHalfLengthPlus < fieldText.length ? '…' : '');
      addNoticePartial({ priority: 178, message: "Unexpected space after ellipse character", characterIndex: characterIndex, excerpt: _excerpt22, location: ourLocation });
      suggestion = suggestion.replace(/… /g, '…');
    }
  }
  suggestion = suggestion.replace(/ {2}/g, ' ');

  if (!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.cutoffPriorityLevel) || (checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.cutoffPriorityLevel) < 177) {
    // Check for doubled punctuation chars (international)
    // Doesn’t check for doubled forward slash by default coz that might occur in a link, e.g., https://etc…
    //  or doubled # coz that occurs in markdown
    var doubledPunctuationCheckList = '({}<>⟨⟩:،、‒–—―…!‹›«»‐?‘’“”\';⁄·&@•^†‡°¡¿※№÷×ºª%‰+−=‱¶′″‴§|‖¦©℗®℠™¤₳฿₵¢₡₢$₫₯֏₠€ƒ₣₲₴₭₺₾ℳ₥₦₧₱₰£៛₽₹₨₪৳₸₮₩¥';
    if (!allowedLinks) doubledPunctuationCheckList += '/[].)'; // Double square brackets can be part of markdown links, double periods can be part of a path
    if (fieldType !== 'markdown') doubledPunctuationCheckList += '_*#~'; // There are used for markdown formatting
    if (fieldType !== 'USFM' || fieldText.indexOf('x-morph') < 0) doubledPunctuationCheckList += ',"'; // Allowed in original language morphology fields
    if (fieldType !== 'YAML' || !fieldText.startsWith('--')) // NOTE: First hyphen may have been removed in preprocessing
      doubledPunctuationCheckList += '-';var _iterator = _createForOfIteratorHelper(
    doubledPunctuationCheckList),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var punctChar = _step.value;
        if ((characterIndex = fieldText.indexOf(punctChar + punctChar)) >= 0) {
          var _excerpt23 = (characterIndex > excerptHalfLength ? '…' : '') + fieldText.substring(characterIndex - excerptHalfLength, characterIndex + excerptHalfLengthPlus) + (characterIndex + excerptHalfLengthPlus < fieldText.length ? '…' : '');
          var _notice3 = { priority: 177, message: "Unexpected doubled ".concat(punctChar, " characters"), excerpt: _excerpt23, location: ourLocation };
          if (fieldType !== 'raw' && fieldType !== 'text' || fieldName.substring(0, 6) !== 'from \\')
          _notice3.characterIndex = characterIndex; // characterIndex means nothing for processed USFM
          addNoticePartial(_notice3);
        }
      }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
  }
  if (!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.cutoffPriorityLevel) || (checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.cutoffPriorityLevel) < 195) {
    // Check for punctuation chars following space and at start of line
    //  Removed ©$€₱
    var afterSpaceCheckList = ')}>⟩:,،、‒–—―!.›»‐-?’”;/⁄·@•^†‡°¡¿※#№÷×ºª%‰‱¶′″‴§‖¦℗®℠™¤₳฿₵¢₡₢₫₯֏₠ƒ₣₲₴₭₺₾ℳ₥₦₧₰£៛₽₹₨₪৳₸₮₩¥';
    if (fieldType !== 'markdown') afterSpaceCheckList += '_*~'; // These are used for markdown formatting
    if (fieldType !== 'USFM' || fieldText.indexOf('x-lemma') < 0 && fieldText.indexOf('x-tw') < 0) afterSpaceCheckList += '|';
    if (fieldType !== 'YAML') afterSpaceCheckList += '\'"'; // These are used for YAML strings, e.g., version: '0.15'
    // if (fieldName === 'OrigQuote' || fieldName === 'Quote') afterSpaceCheckList += '…'; // NOT NEEDED -- this is specifically checked elsewhere
    var _iterator2 = _createForOfIteratorHelper(afterSpaceCheckList),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var _punctChar = _step2.value;
        if ((!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.cutoffPriorityLevel) || (checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.cutoffPriorityLevel) < 191) &&
        (characterIndex = fieldText.indexOf(' ' + _punctChar)) >= 0) {
          var _excerpt24 = (characterIndex > excerptHalfLength ? '…' : '') + fieldText.substring(characterIndex - excerptHalfLength, characterIndex + excerptHalfLengthPlus) + (characterIndex + excerptHalfLengthPlus < fieldText.length ? '…' : '');
          var _notice4 = { priority: 191, message: "Unexpected ".concat(_punctChar, " character after space"), excerpt: _excerpt24, location: ourLocation };
          if (fieldType !== 'raw' && fieldType !== 'text' || fieldName.substring(0, 6) !== 'from \\')
          _notice4.characterIndex = characterIndex; // characterIndex means nothing for processed USFM
          addNoticePartial(_notice4);
        }
        if ((!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.cutoffPriorityLevel) || (checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.cutoffPriorityLevel) < 195) && (
        _punctChar !== '-' || fieldType !== 'YAML') && (
        _punctChar !== '!' || fieldType !== 'markdown') // image tag
        && fieldText[0] === _punctChar) {
          characterIndex = 0;
          var _excerpt25 = (characterIndex > excerptHalfLength ? '…' : '') + fieldText.substring(characterIndex - excerptHalfLength, characterIndex + excerptHalfLengthPlus) + (characterIndex + excerptHalfLengthPlus < fieldText.length ? '…' : '');
          addNoticePartial({ priority: 195, message: "Unexpected ".concat(_punctChar, " character at start of line"), characterIndex: characterIndex, excerpt: _excerpt25, location: ourLocation });
        }
      }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}
    if (fieldType === 'USFM')
    suggestion = suggestion.replace(/| /g, '|');
  }

  if (!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.cutoffPriorityLevel) || (checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.cutoffPriorityLevel) < 192) {
    // Check for punctuation chars before space
    //  Removed ' (can be normal, e.g., Jesus' cloak)
    //  Removed ©
    var beforeSpaceCheckList = '({<⟨،、‒–—―‹«‐‘“/⁄·@\\•^†‡°¡¿※№×ºª‰‱¶′″‴§|‖¦℗℠™¤₳฿₵¢₡₢$₫₯֏₠€ƒ₣₲₴₭₺₾ℳ₥₦₧₱₰£៛₽₹₨₪৳₸₮₩¥';
    if (fieldType !== 'markdown') beforeSpaceCheckList += '_~'; // These are used for markdown formatting
    if (fieldType !== 'markdown' && fieldType !== 'USFM') beforeSpaceCheckList += '*'; // There are used for markdown formatting and USFM closing markers
    if (fieldType !== 'YAML') beforeSpaceCheckList += '[';var _iterator3 = _createForOfIteratorHelper(
    beforeSpaceCheckList),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var _punctChar2 = _step3.value;
        if ((characterIndex = fieldText.indexOf(_punctChar2 + ' ')) >= 0) {
          var _excerpt26 = (characterIndex > excerptHalfLength ? '…' : '') + fieldText.substring(characterIndex - excerptHalfLength, characterIndex + excerptHalfLengthPlus) + (characterIndex + excerptHalfLengthPlus < fieldText.length ? '…' : '');
          var _notice5 = { priority: 192, message: "Unexpected space after ".concat(_punctChar2, " character"), excerpt: _excerpt26, location: ourLocation };
          if (fieldType !== 'raw' && fieldType !== 'text' || fieldName.substring(0, 6) !== 'from \\')
          _notice5.characterIndex = characterIndex; // characterIndex means nothing for processed USFM
          addNoticePartial(_notice5);
        }
      }} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}
  }

  if (!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.cutoffPriorityLevel) || (checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.cutoffPriorityLevel) < 193) {
    // Check for punctuation chars at end of line
    //  Removed ' (can be normal, e.g., Jesus' cloak)
    var beforeEOLCheckList = '([{<⟨،、‒–—―‹«‐‘“/⁄·@©\\•^†‡°¡¿※№×ºª‰‱¶′″‴§|‖¦℗℠™¤₳฿₵¢₡₢$₫₯֏₠€ƒ₣₲₴₭₺₾ℳ₥₦₧₱₰£៛₽₹₨₪৳₸₮₩¥';
    if (fieldType !== 'markdown') beforeEOLCheckList += '_~'; // These are used for markdown formatting
    if (fieldType !== 'markdown' && fieldType !== 'USFM') beforeEOLCheckList += '*'; // There are used for markdown formatting and USFM closing markers
    var _iterator4 = _createForOfIteratorHelper(beforeEOLCheckList),_step4;try {for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {var _punctChar3 = _step4.value;
        if (_punctChar3 !== '—' && fieldText[fieldText.length - 1] === _punctChar3) {
          characterIndex = fieldText.length - 1;
          var _excerpt27 = (characterIndex > excerptHalfLength ? '…' : '') + fieldText.substring(characterIndex - excerptHalfLength, characterIndex + excerptHalfLengthPlus) + (characterIndex + excerptHalfLengthPlus < fieldText.length ? '…' : '');
          var _notice6 = { priority: 193, message: "Unexpected ".concat(_punctChar3, " character at end of line"), excerpt: _excerpt27, location: ourLocation };
          if (fieldType !== 'raw' && fieldType !== 'text' || fieldName.substring(0, 6) !== 'from \\')
          _notice6.characterIndex = characterIndex; // characterIndex means nothing for processed USFM
          addNoticePartial(_notice6);
        }
      }} catch (err) {_iterator4.e(err);} finally {_iterator4.f();}
  }

  if (!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.cutoffPriorityLevel) || (checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.cutoffPriorityLevel) < 849) {
    // Check for bad combinations of characters
    var _iterator5 = _createForOfIteratorHelper(_textHandlingFunctions.BAD_CHARACTER_COMBINATIONS),_step5;try {for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {var badCharCombination = _step5.value;
        if ((characterIndex = fieldText.indexOf(badCharCombination)) >= 0) {
          var _excerpt28 = (characterIndex > excerptHalfLength ? '…' : '') + fieldText.substring(characterIndex - excerptHalfLength, characterIndex + excerptHalfLengthPlus) + (characterIndex + excerptHalfLengthPlus < fieldText.length ? '…' : '');
          addNoticePartial({ priority: 849, message: "Unexpected '".concat(badCharCombination, "' character combination"), characterIndex: characterIndex, excerpt: _excerpt28, location: ourLocation });
        }}} catch (err) {_iterator5.e(err);} finally {_iterator5.f();}}

  if (!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.cutoffPriorityLevel) || (checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.cutoffPriorityLevel) < 92) {
    // Check for leading zeroes in numbers
    var _iterator6 = _createForOfIteratorHelper(_textHandlingFunctions.LEADING_ZERO_COMBINATIONS),_step6;try {for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {var badZeroCharCombination = _step6.value;
        if ((characterIndex = fieldText.indexOf(badZeroCharCombination)) >= 0
        // but not an error perhaps if followed by period, e.g., 0.32.
        && fieldText.substring(characterIndex + badZeroCharCombination.length, characterIndex + badZeroCharCombination.length + 1) !== '.') {
          var _excerpt29 = (characterIndex > excerptHalfLength ? '…' : '') + fieldText.substring(characterIndex - excerptHalfLength, characterIndex + excerptHalfLengthPlus) + (characterIndex + excerptHalfLengthPlus < fieldText.length ? '…' : '');
          addNoticePartial({ priority: 92, message: "Unexpected leading zero", characterIndex: characterIndex, excerpt: _excerpt29, location: ourLocation });
        }}} catch (err) {_iterator6.e(err);} finally {_iterator6.f();}}

  // // Check for problems created by tC Create or something
  // characterIndex = fieldText.indexOf('\\[');
  // if (characterIndex === -1) characterIndex = fieldText.indexOf('\\]');
  // if (characterIndex !== -1) {
  //     const excerpt = (characterIndex > excerptHalfLength ? '…' : '') + fieldText.substring(characterIndex - excerptHalfLength, characterIndex + excerptHalfLengthPlus) + (characterIndex + excerptHalfLengthPlus < fieldText.length ? '…' : '');
  //     addNoticePartial({ priority: 849, message: "Unexpected \\[ or \\] characters", characterIndex, excerpt, location: ourLocation });
  // }

  // if (countOccurrences(fieldText, '(') !== countOccurrences(fieldText, ')')) {
  //     userLog(`checkTextField(${fieldType}, ${fieldName}, '${fieldText}', ${allowedLinks}, ${ourLocation}) found ${countOccurrences(fieldText, '(')} '(' but ${countOccurrences(fieldText, ')')} ')'`);
  //     addNoticePartial({ priority: 1, message: `Mismatched ( ) characters`, details: `left=${countOccurrences(fieldText, '(').toLocaleString()}, right=${countOccurrences(fieldText, ')').toLocaleString()}`, location: ourLocation });
  // }
  // Check matched pairs in the field
  var _iterator7 = _createForOfIteratorHelper(_textHandlingFunctions.OPEN_CLOSE_PUNCTUATION_PAIRS),_step7;try {for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {var punctSet = _step7.value;
      // Can’t check '‘’' coz they might be used as apostrophe
      var leftChar = punctSet[0],rightChar = punctSet[1];
      // if (fieldType === 'markdown' && leftChar === '<') continue; // markdown uses this for block quote
      // TODO: The following 'continue' might not be doing the 2nd lot of checks
      if ((fieldType === 'USFM' || fieldName.startsWith('from \\') || fieldType === 'markdown' && fieldName === '') &&
      '([{“‘«'.indexOf(leftChar) >= 0) continue; // Start/end can be on different lines
      if (fieldType !== 'markdown' || leftChar !== '<') {// > is a markdown block marker and also used for HTML, e.g., <br>
        var leftCount = (0, _textHandlingFunctions.countOccurrences)(fieldText, leftChar),
        rightCount = (0, _textHandlingFunctions.countOccurrences)(fieldText, rightChar);
        if (leftCount !== rightCount && (
        rightChar !== '’' || leftCount > rightCount)) {// Closing single quote is also used as apostrophe in English
          // NOTE: These are higher priority than similar checks in a whole file which is less specific
          var thisPriority = leftChar === '“' ? 163 : 563;
          if (!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.cutoffPriorityLevel) || (checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.cutoffPriorityLevel) < thisPriority)
          addNoticePartial({ priority: thisPriority, message: "Mismatched ".concat(leftChar).concat(rightChar, " characters"), details: "left=".concat(leftCount.toLocaleString(), ", right=").concat(rightCount.toLocaleString()), location: ourLocation });
        }
        try {// This regex build fails for some of the characters
          var leftRegex = new RegExp("(\\w)\\".concat(leftChar, "(\\w)"), 'g'),rightRegex = new RegExp("(\\w)\\".concat(rightChar, "(\\w)"), 'g');
          // debugLog(`leftRegex is ${leftRegex}`);
          var regexResultArray = void 0;
          while (regexResultArray = leftRegex.exec(fieldText)) {
            if ((fieldType !== 'markdown' || regexResultArray[0][0] !== '_') && (
            fieldType !== 'YAML' || leftChar !== '{')
            // TODO: We have to allow for a blank language code until we change checkPlainText()
            && (languageCode !== 'en' || regexResultArray[0][2] !== 's' || fieldText.indexOf('(s)') === -1)) {
              // debugLog(`Got possible misplaced '${languageCode}' left ${leftChar} in ${fieldType} ${fieldName} '${fieldText}': ${JSON.stringify(regexResultArray)}`);
              var _thisPriority = 717,thisMessage = "Misplaced ".concat(leftChar, " character");
              if (leftChar === '(' && regexResultArray[0][2] === 's') {_thisPriority = 17;thisMessage = "Possible misplaced ".concat(leftChar, " character");} // Lower priority for words like 'thing(s)'
              if (!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.cutoffPriorityLevel) || (checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.cutoffPriorityLevel) < _thisPriority)
              addNoticePartial({ priority: _thisPriority, message: thisMessage, excerpt: regexResultArray[0], location: ourLocation });
            }}
          if (rightChar !== '’') // Can’t check '‘’' coz they might be used as apostrophe
            while (regexResultArray = rightRegex.exec(fieldText)) {
              if ((fieldType !== 'markdown' || regexResultArray[0][2] !== '_') && (
              fieldType !== 'YAML' || rightChar !== '}')) {
                // debugLog(`Got misplaced right ${rightChar} in ${fieldType} ${fieldName} '${fieldText}':`, JSON.stringify(regexResultArray));
                if (!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.cutoffPriorityLevel) || (checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.cutoffPriorityLevel) < 716)
                addNoticePartial({ priority: 716, message: "Misplaced ".concat(rightChar, " character"), excerpt: regexResultArray[0], location: ourLocation });
              }}
        } catch (_unused) {}
      }
    }} catch (err) {_iterator7.e(err);} finally {_iterator7.f();}

  if ((!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.cutoffPriorityLevel) || (checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.cutoffPriorityLevel) < 765) &&
  !allowedLinks) {
    // Simple check that there aren’t any
    characterIndex = fieldText.indexOf('://');
    if (characterIndex === -1) characterIndex = fieldText.indexOf('http');
    if (characterIndex === -1) characterIndex = fieldText.indexOf('ftp');
    // The following might have to be removed if text fields can contain email addresses
    if (characterIndex === -1) characterIndex = fieldText.indexOf('.org');
    if (characterIndex === -1) characterIndex = fieldText.indexOf('.com');
    if (characterIndex === -1) characterIndex = fieldText.indexOf('.info');
    if (characterIndex === -1) characterIndex = fieldText.indexOf('.bible');
    if (characterIndex >= 0) {
      var _excerpt30 = "".concat(characterIndex > excerptHalfLength ? '…' : '').concat(fieldText.substring(characterIndex - excerptHalfLength, characterIndex + excerptHalfLengthPlus)).concat(characterIndex + excerptHalfLengthPlus < fieldText.length ? '…' : '');
      addNoticePartial({ priority: 765, message: "Unexpected link", characterIndex: characterIndex, excerpt: _excerpt30, location: ourLocation });
    }
  }

  // See if we have a suggestion
  if (suggestion !== fieldText) {
    // debugLog(`Had text ${fieldText}`);
    // debugLog(`Sug text ${suggestion}`);
    result.suggestion = suggestion;
  }

  return result;
}
// end of checkTextField function
//# sourceMappingURL=data:application/json;charset=utf-8;base64,