"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _typeof = require("@babel/runtime/helpers/typeof");Object.defineProperty(exports, "__esModule", { value: true });exports.clearCheckedArticleCache = clearCheckedArticleCache;exports.checkNotesLinksToOutside = checkNotesLinksToOutside;var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _localforage = _interopRequireDefault(require("localforage"));
var _path = _interopRequireDefault(require("path"));
var books = _interopRequireWildcard(require("../core/books/books"));

var _defaults = require("./defaults");
var _textHandlingFunctions = require("./text-handling-functions");
var _core = require("../core");

var _utilities = require("./utilities");function _getRequireWildcardCache(nodeInterop) {if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {return nodeInterop ? cacheNodeInterop : cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj, nodeInterop) {if (!nodeInterop && obj && obj.__esModule) {return obj;}if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}function _createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {(0, _defineProperty2.default)(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}


// const NOTES_LINKS_VALIDATOR_VERSION_STRING = '0.7.29';

// const DEFAULT_LANGUAGE_CODE = 'en';
var DEFAULT_BRANCH = 'master';

var GENERAL_MARKDOWN_LINK1_REGEX = new RegExp('\\[[^\\]]+?\\]\\([^\\)]+?\\)', 'g'); // [displayLink](URL)
var GENERAL_MARKDOWN_LINK2_REGEX = new RegExp('\\[\\[[^\\]]+?\\]\\]', 'g'); // [[combinedDisplayLink]]

var TA_DOUBLE_BRACKETED_LINK_REGEX = new RegExp('\\[\\[rc://([^ /]+?)/ta/man/([^ /]+?)/([^ \\]]+?)\\]\\]', 'g'); // Enclosed in [[  ]]
var TA_FULL_DISPLAY_LINK_REGEX = new RegExp('\\[([^\\]]+?)\\]\\(rc://([^ /]+?)/ta/man/([^ /]+?)/([^ \\]]+?)\\)', 'g'); // [How to Translate Names](rc://en/ta/man/translate/translate-names)
var TA_RELATIVE1_DISPLAY_LINK_REGEX = new RegExp('\\[([^\\]]+?)\\]\\(\\.{2}/([^ /\\]]+?)/01\\.md\\)', 'g'); // [Borrow Words](../translate-transliterate/01.md)
var TA_RELATIVE2_DISPLAY_LINK_REGEX = new RegExp('\\[([^\\]]+?)\\]\\(\\.{2}/\\.{2}/([^ /\\]]+?)/([^ /\\]]+?)/01\\.md\\)', 'g'); // [Borrow Words](../../translate/translate-transliterate/01.md)

var TW_DOUBLE_BRACKETED_LINK_REGEX = new RegExp('\\[\\[rc://([^ /]+?)/tw/dict/bible/([^ /]+?)/([^ /\\]]+?)\\]\\]', 'g'); // Enclosed in [[  ]]
var TWL_RAW_LINK_REGEX = new RegExp('rc://([^ /]+?)/tw/dict/bible/([^ /]+?)/(.+)', 'g'); // Just a raw link
var TW_INTERNAL_REGEX = new RegExp('\\[([-,\\w ()]+?)\\]\\(\\.{2}/([a-z]{2,5})/([-A-Za-z\\d]{2,20})\\.md\\)', 'g'); // [Asher](../names/asher.md)

// NOTE: Bible link format is archaic, presumably from pre-USFM days!
// TODO: Do we need to normalise Bible links, i.e., make sure that the link itself
//          (we don't care about the displayed text) doesn't specify superfluous levels/information
// TODO: We need a decision on hyphen vs en-dash in verse references
// TODO: Test to see if "[2:23](../02/03.md)" is found by more than one regex below
var BIBLE_REGEX_OTHER_BOOK_ABSOLUTE = new RegExp('\\[((?:1 |2 |3 )?)((?:[\\w ]+? )?)(\\d{1,3}):(\\d{1,3})\\]\\(([123a-z]{3})/(\\d{1,3})/(\\d{1,3})\\.md\\)', 'g'); // [Revelation 3:11](rev/03/11.md)
// TODO: Is this one with ../../ really valid? Where does it occur?
var BIBLE_REGEX_OTHER_BOOK_RELATIVE = new RegExp('\\[((?:1 |2 |3 )?)((?:[\\w ]+? )?)(\\d{1,3}):(\\d{1,3})\\]\\((?:\\.{2}/)?\\.{2}/([123a-z]{3})/(\\d{1,3})/(\\d{1,3})\\.md\\)', 'g'); // [Revelation 3:11](../../rev/03/11.md) or (../rev/03/11.md)
var BIBLE_REGEX_THIS_BOOK_RELATIVE = new RegExp('\\[((?:1 |2 |3 )?)((?:[\\w ]+? )?)(\\d{1,3}):(\\d{1,3})\\]\\(\\.{2}/(\\d{1,3})/(\\d{1,3})\\.md\\)', 'g'); // [Revelation 3:11](../03/11.md) or [Song of Solomon 3:11](../03/11.md)
var BCV_V_TO_THIS_BOOK_BIBLE_REGEX = new RegExp('\\[((?:1 |2 |3 )?)((?:[\\w ]+? )?)(\\d{1,3}):(\\d{1,3})[–-](\\d{1,3})\\]\\((\\.{2})/(\\d{1,3})/(\\d{1,3})\\.md\\)', 'g'); // [Genesis 26:12-14](../26/12.md) or [4:11–16](../04/11.md) NOTE en-dash
var BIBLE_REGEX_THIS_CHAPTER_RELATIVE = new RegExp('\\[((?:1 |2 |3 )?)((?:[\\w ]+? )?)(?:(\\d{1,3}):)?(\\d{1,3})\\]\\(\\./(\\d{1,3})\\.md\\)', 'g'); // [Exodus 2:7](./07.md)
var THIS_VERSE_TO_THIS_CHAPTER_BIBLE_REGEX = new RegExp('\\[(?:verse )?(\\d{1,3})\\]\\(\\.{2}/(\\d{1,3})/(\\d{1,3})\\.md\\)', 'g'); // [27](../11/27.md) or [verse 27](../11/27.md)
var THIS_VERSE_RANGE_TO_THIS_CHAPTER_BIBLE_REGEX = new RegExp('\\[(?:verses )?(\\d{1,3})[–-](\\d{1,3})\\]\\(\\.{2}/(\\d{1,3})/(\\d{1,3})\\.md\\)', 'g'); // [2–7](../09/2.md) or [verses 2–7](../09/2.md) NOTE en-dash
var BCV_V_TO_THIS_CHAPTER_BIBLE_REGEX = new RegExp('\\[((?:1 |2 |3 )?)((?:[\\w ]+? )?)(\\d{1,3}):(\\d{1,3})[–-](\\d{1,3})\\]\\(\\./(\\d{1,3})\\.md\\)', 'g'); // [Genesis 26:12-14](./12.md) NOTE en-dash

var BIBLE_FULL_HELP_REGEX = new RegExp('\\[((?:1 |2 |3 )?)((?:[\\w ]+? )?)(\\d{1,3}):(\\d{1,3})(?:-\\d{1,3})?\\]\\(rc://([^ /]+?)/tn/help/([123a-z]{3})/(\\d{1,3})/(\\d{1,3})\\)', 'g'); // [Song of Solomon 29:23-24](rc://en/tn/help/sng/29/23)

var TN_REGEX = new RegExp('\\[((?:1 |2 |3 )?)((?:[\\w ]+? )?)(\\d{1,3}):(\\d{1,3})\\]\\((\\.{2})/(\\d{1,3})/(\\d{1,3})/([a-z][a-z0-9][a-z0-9][a-z0-9])\\)', 'g');

var SIMPLE_DISPLAY_LINK_REGEX = new RegExp('\\[([^\\]]+?)\\]\\((https?://[^\\)]+?)\\)', 'g'); // [ULT](https://something)

var SIMPLE_IMAGE_REGEX = new RegExp('!\\[([^\\]]*?)\\]\\(([^ "\\)]+?)\\)', 'g'); // ![alt](y)
var TITLED_IMAGE_REGEX = new RegExp('!\\[([^\\]]*?)\\]\\(([^ \\)]+?) "([^"\\)]+?)"\\)', 'g'); // ![alt](link "title")


// Caches the path names of files which have been already checked
//  Used for storing paths to TA and TW articles that have already been checked
//      so that we don't needless check them again each time they're linked to
var checkedArticleStore = _localforage.default.createInstance({
  driver: [_localforage.default.INDEXEDDB],
  name: 'CV-checked-path-store' });


// Sadly we have to clear this for each run, otherwise we wouldn't get any warnings that were from these checks
function clearCheckedArticleCache() {return _clearCheckedArticleCache.apply(this, arguments);}




/**
 *
 * @param {string} username
 * @param {string} repository name
 * @param {string} path
 * @param {string} branch
 */function _clearCheckedArticleCache() {_clearCheckedArticleCache = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:(0, _utilities.userLog)("clearCheckedArticleCache()…");_context.next = 3;return checkedArticleStore.clear();case 3:case "end":return _context.stop();}}}, _callee);}));return _clearCheckedArticleCache.apply(this, arguments);}function
markAsChecked(_x) {return _markAsChecked.apply(this, arguments);}





/**
 *
 * @param {string} username
 * @param {string} repository name
 * @param {string} path
 * @param {string} branch
 */function _markAsChecked() {_markAsChecked = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(_ref) {var username, repository, path, branch, dummyPath;return _regenerator.default.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:username = _ref.username, repository = _ref.repository, path = _ref.path, branch = _ref.branch; // debugLog(`markAsChecked(${username}, ${repository}, ${path}, ${branch})…`);
            dummyPath = _path.default.join(username, repository, branch, path);_context2.next = 4;return checkedArticleStore.setItem(dummyPath, true);case 4:case "end":return _context2.stop();}}}, _callee2);}));return _markAsChecked.apply(this, arguments);}function alreadyChecked(_x2) {return _alreadyChecked.apply(this, arguments);}






/**
 *
 * @param {string} languageCode, e.g., 'en'
 * @param {string} repoCode, e.g., 'TN', 'SN', 'TN2', or even 'UHB', 'UGNT', or 'TWL' for the initial repo for the file being checked
 * @param {string} bookID
 * @param {string} givenC
 * @param {string} givenV
 * @param {string} fieldName, e.g., 'TWLink' or 'OccurrenceNote' or 'Note' or .md filename, etc.
 * @param {string} fieldText
 * @param {string} givenLocation
 * @param {Object} checkingOptions
 */function _alreadyChecked() {_alreadyChecked = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(_ref2) {var username, repository, path, branch, dummyPath;return _regenerator.default.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:username = _ref2.username, repository = _ref2.repository, path = _ref2.path, branch = _ref2.branch; // debugLog(`alreadyChecked(${username}, ${repository}, ${path}, ${branch})…`);
            dummyPath = _path.default.join(username, repository, branch, path);_context3.next = 4;return checkedArticleStore.getItem(dummyPath);case 4:return _context3.abrupt("return", _context3.sent);case 5:case "end":return _context3.stop();}}}, _callee3);}));return _alreadyChecked.apply(this, arguments);}function checkNotesLinksToOutside(_x3, _x4, _x5, _x6, _x7, _x8, _x9, _x10, _x11) {return _checkNotesLinksToOutside.apply(this, arguments);}















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































// end of checkNotesLinksToOutside function
function _checkNotesLinksToOutside() {_checkNotesLinksToOutside = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(languageCode, repoCode, bookID, givenC, givenV, fieldName, fieldText, givenLocation, checkingOptions) {var ourLocation, ctarResult, addNoticePartial, excerptLength, excerptHalfLength, excerptHalfLengthPlus, getFile_, defaultLanguageCode, adjustedLanguageCode, taRepoUsername, taRepoBranch, twRepoUsername, twRepoBranch, givenVfirstPart, i, givenCint, givenVint, trimStartFieldText, trimEndFieldText, excerpt, _excerpt, regexResultArray, _regexResultArray, _regexResultArray2, totalLink, altText, fetchLink, responseData, _regexResultArray3, _regexResultArray4, _totalLink, alt, _fetchLink, title, _responseData, linksList1, linksList2, totalLinks1, totalLinks2, taLinkCount1, taLinkCount2, twLinkCount1, twLinkCount2, TNLinkCount1, thisChapterBibleLinkCount1, thisVerseBibleLinkCount1, thisBookBibleLinkCount1, otherBookBibleLinkCount1, generalLinkCount1, processedLinkList, _regexResultArray5, _regexResultArray6, _totalLink2, _displayName, category, article, twRepoName, filepath, twPathParameters, twFileContent, _regexResultArray7, _regexResultArray8, _totalLink3, _displayName2, foundLanguageCode, part, _article, characterIndex, _excerpt2, _characterIndex, _excerpt3, taRepoName, _filepath, taPathParameters, taFileContent, alreadyGaveError, checkTAFileResult, _iterator, _step, noticeObject, _regexResultArray9, _regexResultArray10, _totalLink4, _displayName3, _article2, _taRepoName, TAsection, _filepath2, _taPathParameters, _taFileContent, _alreadyGaveError, _regexResultArray11, _regexResultArray12, _totalLink5, _displayName4, _TAsection, _article3, _taRepoName2, _filepath3, _taPathParameters2, _taFileContent2, _alreadyGaveError2, _regexResultArray13, _regexResultArray14, _totalLink6, _foundLanguageCode, _part, _article4, _characterIndex2, _excerpt4, _characterIndex3, _excerpt5, _taRepoName3, _filepath4, _taPathParameters3, _taFileContent3, _alreadyGaveError3, _checkTAFileResult, _iterator2, _step2, _noticeObject, ourTWRegex, _regexResultArray15, _regexResultArray16, _totalLink7, _foundLanguageCode2, _category, _article5, _twRepoName, _filepath5, _twPathParameters, _twFileContent, checkTWFileResult, _iterator3, _step3, _noticeObject2, _regexResultArray17, _regexResultArray18, _totalLink8, optionalN1, optionalB1, C1, V1, Lg, B2, C2, V2, checkResult, linkBookCode, linkChapterInt, linkVerseInt, numStories, numFramesThisStory, numChaptersThisBook, numVersesThisChapter, _regexResultArray19, _regexResultArray20, _totalLink9, _optionalN, _optionalB, _C, _V, _V2, _checkResult, _linkBookCode, _linkVerseInt, _numChaptersThisBook, _numVersesThisChapter, _regexResultArray21, _regexResultArray22, _totalLink10, _V3, _C2, _V4, _linkBookCode2, _linkChapterInt, _linkVerseInt2, _numChaptersThisBook2, _numVersesThisChapter2, _regexResultArray23, _regexResultArray24, _totalLink11, V1a, V1b, _C3, _V5, _linkBookCode3, verseInt1a, verseInt1b, _linkChapterInt2, _linkVerseInt3, _numChaptersThisBook3, _numVersesThisChapter3, _regexResultArray25, _regexResultArray26, _totalLink12, _optionalN2, _optionalB2, _C4, _V6, _C5, _V7, _checkResult2, _linkBookCode4, _linkChapterInt3, _linkVerseInt4, _numChaptersThisBook4, _numVersesThisChapter4, _regexResultArray27, _regexResultArray28, _totalLink13, _optionalN3, _optionalB3, _C6, _V1a, _V1b, _B, _C7, _V8, _checkResult3, _linkBookCode5, _linkChapterInt4, _linkVerseInt5, _numChaptersThisBook5, _numVersesThisChapter5, _regexResultArray29, _regexResultArray30, _totalLink14, _optionalN4, _optionalB4, _C8, _V1a2, _V1b2, _V9, _checkResult4, _linkBookCode6, _linkVerseInt6, _numVersesThisChapter6, _regexResultArray31, _regexResultArray32, _totalLink15, _optionalN5, _optionalB5, _C9, _V10, _B2, _C10, _V11, _checkResult5, _linkBookCode7, _linkChapterInt5, _linkVerseInt7, _numChaptersThisBook6, _numVersesThisChapter7, _regexResultArray33, _regexResultArray34, _totalLink16, _optionalN6, _optionalB6, _C11, _V12, _B3, _C12, _V13, _checkResult6, _linkBookCode8, _linkChapterInt6, _linkVerseInt8, _numChaptersThisBook7, _numVersesThisChapter8, _regexResultArray35, _regexResultArray36, _totalLink17, _optionalN7, _optionalB7, _C13, _V14, _B4, _C14, _V15, _noteID2, _checkResult7, _linkBookCode9, _linkChapterInt7, _linkVerseInt9, _numChaptersThisBook8, _numVersesThisChapter9, _regexResultArray37, _regexResultArray38, _totalLink18, displayText, uri, dummyPathParameters, serverString, generalFileContent, hadError, response, linkCount1, leftoverLinksList1, linkCount2, leftoverLinksList2, leftCount, rightCount, middleCount;return _regenerator.default.wrap(function _callee4$(_context4) {while (1) {switch (_context4.prev = _context4.next) {case 0:addNoticePartial = function _addNoticePartial(noticeObject) {// functionLog(`checkNotesLinksToOutside Notice: (priority = ${ priority }) ${ message } ${ characterIndex > 0 ? ` (at character ${characterIndex})` : "" } ${ excerpt ? ` ${excerpt}` : "" } ${ location } `);
              //parameterAssert(noticeObject.priority !== undefined, "cTNlnk addNoticePartial: 'priority' parameter should be defined");
              //parameterAssert(typeof noticeObject.priority === 'number', `cTNlnk addNoticePartial: 'priority' parameter should be a number not a '${typeof noticeObject.priority}': ${noticeObject.priority} `);
              //parameterAssert(noticeObject.message !== undefined, "cTNlnk addNoticePartial: 'message' parameter should be defined");
              //parameterAssert(typeof noticeObject.message === 'string', `cTNlnk addNoticePartial: 'message' parameter should be a string not a '${typeof noticeObject.message}': ${noticeObject.message} `);
              // //parameterAssert(characterIndex !== undefined, "cTNlnk addNoticePartial: 'characterIndex' parameter should be defined");
              if (noticeObject.characterIndex) {//parameterAssert(typeof noticeObject.characterIndex === 'number', `cTNlnk addNoticePartial: 'characterIndex' parameter should be a number not a '${typeof noticeObject.characterIndex}': ${noticeObject.characterIndex} `);
              } // //parameterAssert(excerpt !== undefined, "cTNlnk addNoticePartial: 'excerpt' parameter should be defined");
              if (noticeObject.excerpt) {//parameterAssert(typeof noticeObject.excerpt === 'string', `cTNlnk addNoticePartial: 'excerpt' parameter should be a string not a '${typeof noticeObject.excerpt}': ${noticeObject.excerpt} `);
              } //parameterAssert(noticeObject.location !== undefined, "cTNlnk addNoticePartial: 'location' parameter should be defined");
              //parameterAssert(typeof noticeObject.location === 'string', `cTNlnk addNoticePartial: 'location' parameter should be a string not a '${typeof noticeObject.location}': ${noticeObject.location} `);
              // noticeObject.debugChain = noticeObject.debugChain ? `checkNotesLinksToOutside ${ noticeObject.debugChain } ` : `checkNotesLinksToOutside(${ fieldName })`;
              ctarResult.noticeList.push(_objectSpread(_objectSpread({}, noticeObject), {}, { bookID: bookID, fieldName: fieldName }));}; /* This is for the case of the OccurrenceNote or Note or TWLink fields containing markdown links
             bookID is a three-character UPPERCASE USFM book identifier or 'OBS'.
             These notes may contain links
                to TA, e.g., “(See: [[rc://en/ta/man/translate/figs-metaphor]] and …”
                to TWs, e.g., “(See: [[rc://en/tw/dict/bible/other/death]] and …”
                To Bibles, e.g., “… how you translated this in [Revelation 3:11](../03/11.md).”
             // You can supply the function to try to load outside links
            //      checkingOptions?.getFile takes parameters ({username, repository, path, branch})
            // and
            //      checkingOptions?.defaultLanguageCode
             // We attempt to fetch any TA links to test that the destination is really there
            //  -- you can control this with:
            //      checkingOptions?.taRepoUsername
            //      checkingOptions?.taRepoBranch (or tag)
            //      checkingOptions?.disableLinkedTAArticlesCheckFlag
             // We attempt to fetch any TW links to test that the destination is really there
            //  -- you can control this with:
            //      checkingOptions.twRepoUsername
            //      checkingOptions.twRepoBranch (or tag)
            //      checkingOptions.disableLinkedTWArticlesCheckFlag
            */ // if (fieldText.indexOf('brother') !== -1)
            // functionLog(`checkNotesLinksToOutside('${languageCode}', '${repoCode}', ${bookID} ${givenC}:${givenV} '${fieldName}', (${fieldText.length})'${fieldText}', ${givenLocation}, ${JSON.stringify(checkingOptions)})…`);
            //parameterAssert(languageCode !== undefined, "checkNotesLinksToOutside: 'languageCode' parameter should be defined");
            //parameterAssert(typeof languageCode === 'string', `checkNotesLinksToOutside: 'languageCode' parameter should be a string not a '${typeof languageCode}'`);
            // //parameterAssert(languageCode !== 'hbo' && languageCode !== 'el-x-koine', `checkNotesLinksToOutside: 'languageCode' parameter should not be an original language code: '${languageCode}'`);
            //parameterAssert(repoCode !== undefined, "checkNotesLinksToOutside: 'repoCode' parameter should be defined");
            //parameterAssert(typeof repoCode === 'string', `checkNotesLinksToOutside: 'repoCode' parameter should be a string not a '${typeof repoCode}'`);
            //parameterAssert(REPO_CODES_LIST.includes(repoCode), `checkNotesLinksToOutside: 'repoCode' parameter should not be '${repoCode}'`);
            //parameterAssert(bookID !== undefined, "checkNotesLinksToOutside: 'bookID' parameter should be defined");
            //parameterAssert(typeof bookID === 'string', `checkNotesLinksToOutside: 'bookID' parameter should be a string not a '${typeof bookID}'`);
            //parameterAssert(typeof givenC === 'string', `checkNotesLinksToOutside: 'givenC' parameter should be a string not a '${typeof givenC}'`);
            //parameterAssert(typeof givenV === 'string', `checkNotesLinksToOutside: 'givenV' parameter should be a string not a '${typeof givenV}'`);
            // if (fieldName !== 'MDFile') {
            //     //parameterAssert(bookID.length === 3, `checkNotesLinksToOutside: 'bookID' parameter should be three characters long not ${bookID.length}`);
            //     //parameterAssert(bookID.toUpperCase() === bookID, `checkNotesLinksToOutside: 'bookID' parameter should be UPPERCASE not '${bookID}'`);
            //     //parameterAssert(bookID === 'OBS' || books.isValidBookID(bookID), `checkNotesLinksToOutside: '${bookID}' is not a valid USFM book identifier`);
            // }
            //parameterAssert(fieldName !== undefined, "checkNotesLinksToOutside: 'fieldText' parameter should be defined");
            //parameterAssert(typeof fieldName === 'string', `checkNotesLinksToOutside: 'fieldText' parameter should be a string not a '${typeof fieldName}'`);
            //parameterAssert(fieldName !== `${languageCode}_${repoCode.toLowerCase()}`, `checkNotesLinksToOutside: 'fieldText' parameter should not be the repoName: '${fieldName}'`);
            // if (fieldName === `${languageCode}_${repoCode.toLowerCase()}`) { console.trace('checkNotesLinksToOutside()'); }
            if (!fieldName.startsWith('TA ') && !fieldName.startsWith('TW ') && fieldName.indexOf('/') === -1) {//parameterAssert(fieldName === 'OccurrenceNote' || fieldName === 'Note' || fieldName === 'TWLink' || fieldName === 'Response' || fieldName === 'README' || fieldName === 'LICENSE', `checkNotesLinksToOutside: 'fieldName' parameter should be 'OccurrenceNote', 'Note', 'TWLink', 'Response', 'README' or 'LICENSE' not '${fieldName}'`);
            } //parameterAssert(fieldText !== undefined, "checkNotesLinksToOutside: 'fieldText' parameter should be defined");
            //parameterAssert(typeof fieldText === 'string', `checkNotesLinksToOutside: 'fieldText' parameter should be a string not a '${typeof fieldText}'`);
            //parameterAssert(givenLocation !== undefined, "checkNotesLinksToOutside: 'fieldText' parameter should be defined");
            //parameterAssert(typeof givenLocation === 'string', `checkNotesLinksToOutside: 'fieldText' parameter should be a string not a '${typeof givenLocation}'`);
            ourLocation = givenLocation;if (ourLocation && ourLocation[0] !== ' ') ourLocation = " ".concat(ourLocation);ctarResult = { noticeList: [], checkedFileCount: 0, checkedFilenames: [], checkedRepoNames: [] }; /**
             *
             * @description - adds a new notice entry from the partial fields given -- adding bookID and fieldName to the given fields
             * @param {Object} noticeObject expected to contain priority, message, characterIndex, exerpt, location
             */ // Main code for checkNotesLinksToOutside
            // Get any options that were suppplied, or else set default values
            excerptLength = checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.excerptLength;if (typeof excerptLength !== 'number' || isNaN(excerptLength)) {excerptLength = _defaults.DEFAULT_EXCERPT_LENGTH; // debugLog(`Using default excerptLength = ${ excerptLength } `);
            } // else debugLog(`Using supplied excerptLength = ${ excerptLength } `, `cf.default = ${ DEFAULT_EXCERPT_LENGTH } `);
            excerptHalfLength = Math.floor(excerptLength / 2); // rounded down
            excerptHalfLengthPlus = Math.floor((excerptLength + 1) / 2); // rounded up
            // debugLog(`Using excerptHalfLength = ${ excerptHalfLength } `, `excerptHalfLengthPlus = ${ excerptHalfLengthPlus } `);
            getFile_ = checkingOptions && checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.getFile ? checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.getFile : _core.cachedGetFile;defaultLanguageCode = checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.defaultLanguageCode; // if (!defaultLanguageCode) defaultLanguageCode = DEFAULT_LANGUAGE_CODE;
            adjustedLanguageCode = languageCode; // This is the language code of the resource with the link
            if (languageCode === 'hbo' || languageCode === 'el-x-koine') adjustedLanguageCode = 'en'; // This is a guess (and won't be needed for TWs when we switch to TWLs)
            if (!defaultLanguageCode) defaultLanguageCode = adjustedLanguageCode; // debugLog(`checkNotesLinksToOutside defaultLanguageCode=${defaultLanguageCode}`);
            taRepoUsername = checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.taRepoUsername;if (!taRepoUsername) taRepoUsername = defaultLanguageCode === 'en' ? 'unfoldingWord' : 'Door43-Catalog';taRepoBranch = checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.taRepoBranch;if (!taRepoBranch) taRepoBranch = DEFAULT_BRANCH;twRepoUsername = checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.twRepoUsername;if (!twRepoUsername) twRepoUsername = defaultLanguageCode === 'en' ? 'unfoldingWord' : 'Door43-Catalog';twRepoBranch = checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.twRepoBranch;if (!twRepoBranch) twRepoBranch = DEFAULT_BRANCH; // debugLog(`checkNotesLinksToOutside ended up with taRepoUsername=${taRepoUsername} taRepoBranch=${taRepoBranch} twRepoUsername=${twRepoUsername} twRepoBranch=${twRepoBranch}`);
            // Convert our given C:V strings to integers
            givenVfirstPart = '';i = 0;case 24:if (!(i < givenV.length)) {_context4.next = 33;break;}if (!/^\d$/.test(givenV[i])) {_context4.next = 29;break;}givenVfirstPart += givenV[i];_context4.next = 30;break;case 29:return _context4.abrupt("break", 33);case 30:i++;_context4.next = 24;break;case 33:if (givenC && givenV) {try {givenCint = givenC === 'front' ? 0 : (0, _utilities.ourParseInt)(givenC);givenVint = givenV === 'intro' ? 0 : (0, _utilities.ourParseInt)(givenVfirstPart);if (givenVfirstPart !== givenV && givenV !== 'intro') (0, _utilities.debugLog)("From '".concat(givenC, "': '").concat(givenV, "' got '").concat(givenC, "': '").concat(givenVfirstPart, "' then integers ").concat(givenCint, ": ").concat(givenVint, " "));} catch (cvError) {console.error("TN Link Check couldn\u2019t parse given chapter and verse numbers for ".concat(bookID, " ").concat(givenC, ": ").concat(givenV, " ").concat(fieldName, " ' via ").concat(givenC, ":").concat(givenVfirstPart, " got ").concat(givenCint, ":").concat(givenVint, " with ").concat(cvError));}}if (fieldName === 'x-tw' || fieldName === 'TWLink' || fieldName === 'SupportReference') {// The link should be the entire field (not just a string inside the field), so check for leading/trailing spaces
              trimStartFieldText = fieldText.trimStart(), trimEndFieldText = fieldText.trimEnd();if (trimStartFieldText !== fieldText) {excerpt = fieldText.substring(0, excerptLength).replace(/ /g, '␣') + (fieldText.length > excerptLength ? '…' : '');addNoticePartial({ priority: 784, message: "Unexpected leading whitespace in link field", excerpt: excerpt, characterIndex: 0, location: ourLocation });} else if (trimEndFieldText !== fieldText) {_excerpt = (fieldText.length > excerptLength ? '…' : '') + fieldText.substring(fieldText.length - 10).replace(/ /g, '␣');addNoticePartial({ priority: 785, message: "Unexpected trailing whitespace in link field", excerpt: _excerpt, characterIndex: fieldText.length - 1, location: ourLocation });}}case 35:if (!(regexResultArray = SIMPLE_IMAGE_REGEX.exec(fieldText))) {_context4.next = 56;break;} // debugLog(`Got markdown image in line ${lineNumber}:`, JSON.stringify(regexResultArray));
            _regexResultArray = regexResultArray, _regexResultArray2 = (0, _slicedToArray2.default)(_regexResultArray, 3), totalLink = _regexResultArray2[0], altText = _regexResultArray2[1], fetchLink = _regexResultArray2[2]; // if (altText !== 'OBS Image') userLog("This code was only checked for 'OBS Image' links");
            if (!altText) addNoticePartial({ priority: 199, message: "Markdown image link has no alternative text", excerpt: totalLink, location: ourLocation });if (fetchLink.startsWith('https://')) {_context4.next = 42;break;}addNoticePartial({ priority: 749, message: "Markdown image link seems faulty", excerpt: fetchLink, location: ourLocation });_context4.next = 54;break;case 42:if (!((checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.disableAllLinkFetchingFlag) !== true)) {_context4.next = 54;break;}_context4.prev = 43;_context4.next = 46;return (0, _core.cachedGetFileUsingFullURL)({ uri: fetchLink });case 46:responseData = _context4.sent;(0, _utilities.dataAssert)(responseData.length > 10, "Expected ".concat(fetchLink, " image file to be longer: ").concat(responseData.length)); // debugLog("Markdown link fetch got response: ", responseData.length);
            _context4.next = 54;break;case 50:_context4.prev = 50;_context4.t0 = _context4["catch"](43);console.error("Markdown image link fetch had an error fetching '".concat(fetchLink, "': ").concat(_context4.t0));addNoticePartial({ priority: 748, message: "Error fetching markdown image link", excerpt: fetchLink, location: ourLocation });case 54:_context4.next = 35;break;case 56:if (!(regexResultArray = TITLED_IMAGE_REGEX.exec(fieldText))) {_context4.next = 78;break;} // debugLog(`Got markdown image in line ${lineNumber}:`, JSON.stringify(regexResultArray));
            _regexResultArray3 = regexResultArray, _regexResultArray4 = (0, _slicedToArray2.default)(_regexResultArray3, 4), _totalLink = _regexResultArray4[0], alt = _regexResultArray4[1], _fetchLink = _regexResultArray4[2], title = _regexResultArray4[3];if (!alt) addNoticePartial({ priority: 199, message: "Markdown image link has no alternative text", excerpt: _totalLink, location: ourLocation });if (!title) addNoticePartial({ priority: 348, message: "Markdown image link has no title text", excerpt: _totalLink, location: ourLocation });if (_fetchLink.startsWith('https://')) {_context4.next = 64;break;}addNoticePartial({ priority: 749, message: "Markdown image link seems faulty", excerpt: _fetchLink, location: ourLocation });_context4.next = 76;break;case 64:if (!((checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.disableAllLinkFetchingFlag) !== true)) {_context4.next = 76;break;}_context4.prev = 65;_context4.next = 68;return (0, _core.cachedGetFileUsingFullURL)({ uri: _fetchLink });case 68:_responseData = _context4.sent;(0, _utilities.dataAssert)(_responseData.length > 10, "Expected ".concat(_fetchLink, " image file to be longer: ").concat(_responseData.length)); // debugLog("Markdown link fetch got response: ", responseData.length);
            _context4.next = 76;break;case 72:_context4.prev = 72;_context4.t1 = _context4["catch"](65);console.error("Markdown image link fetch had an error fetching '".concat(_fetchLink, "': ").concat(_context4.t1));addNoticePartial({ priority: 748, message: "Error fetching markdown image link", excerpt: _fetchLink, location: ourLocation });case 76:_context4.next = 56;break;case 78: // Find total regular (non-image) links
            linksList1 = fieldText.match(GENERAL_MARKDOWN_LINK1_REGEX) || []; // [[something]]
            // if (linksList1.length) debugLog(`linksList1 (${linksList1.length}) = ${JSON.stringify(linksList1)}`);
            linksList2 = fieldText.match(GENERAL_MARKDOWN_LINK2_REGEX) || []; // [display](link)
            // if (linksList2.length) debugLog(`linksList2 (${linksList2.length}) = ${JSON.stringify(linksList2)}`);
            totalLinks1 = linksList1.length;totalLinks2 = linksList2.length;taLinkCount1 = 0, taLinkCount2 = 0, twLinkCount1 = 0, twLinkCount2 = 0, TNLinkCount1 = 0, thisChapterBibleLinkCount1 = 0, thisVerseBibleLinkCount1 = 0, thisBookBibleLinkCount1 = 0, otherBookBibleLinkCount1 = 0, generalLinkCount1 = 0;processedLinkList = []; // Check for internal TW links like [Asher](../names/asher.md)
          case 84:if (!(regexResultArray = TW_INTERNAL_REGEX.exec(fieldText))) {_context4.next = 106;break;} // debugLog(`  checkNotesLinksToOutside TW_INTERNAL_REGEX regexResultArray(${regexResultArray.length})=${JSON.stringify(regexResultArray)}`);
            twLinkCount1 += 1; //parameterAssert(regexResultArray.length === 4, `TW_INTERNAL_REGEX expected 4 fields (not ${regexResultArray.length})`);
            // eslint-disable-next-line no-unused-vars
            _regexResultArray5 = regexResultArray, _regexResultArray6 = (0, _slicedToArray2.default)(_regexResultArray5, 4), _totalLink2 = _regexResultArray6[0], _displayName = _regexResultArray6[1], category = _regexResultArray6[2], article = _regexResultArray6[3];processedLinkList.push(_totalLink2); // Save the full link
            twRepoName = "".concat(defaultLanguageCode, "_tw"); // debugLog(`Got twRepoName=${twRepoName}`);
            filepath = "bible/".concat(category, "/").concat(article.trim(), ".md"); // debugLog(`Got tW filepath=${filepath}`);
            if (checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.disableAllLinkFetchingFlag) {_context4.next = 104;break;} // if (regexResultArray[3] === 'brother') debugLog(`Need to check ${fieldName} TW link ${regexResultArray} against ${twRepoName}`);
            twPathParameters = { username: twRepoUsername, repository: twRepoName, path: filepath, branch: twRepoBranch };twFileContent = void 0;_context4.prev = 93;_context4.next = 96;return getFile_(twPathParameters);case 96:twFileContent = _context4.sent;_context4.next = 103;break;case 99:_context4.prev = 99;_context4.t2 = _context4["catch"](93);console.error("checkNotesLinksToOutside(".concat(bookID, ", ").concat(fieldName, ", \u2026) failed to load TW ").concat(twRepoUsername, " ").concat(twRepoName, ", ").concat(filepath, ", ").concat(twRepoBranch, ": ").concat(_context4.t2.message));addNoticePartial({ priority: 882, message: "Error loading TW article", details: "".concat(twRepoUsername, " ").concat(twRepoName, " ").concat(twRepoBranch, " ").concat(filepath), excerpt: _totalLink2, location: "".concat(ourLocation, " ").concat(filepath, ": ").concat(_context4.t2) });case 103:if (!twFileContent) addNoticePartial({ priority: 883, message: "Unable to find/load TW article", details: "".concat(twRepoUsername, " ").concat(twRepoName, " ").concat(twRepoBranch, " ").concat(filepath), excerpt: _totalLink2, location: "".concat(ourLocation, " ").concat(filepath) });else {// we got the content of the TW article
              if (twFileContent.length < 10) addNoticePartial({ priority: 881, message: "TW article seems empty", details: "".concat(twRepoUsername, " ").concat(twRepoName, " ").concat(twRepoBranch, " ").concat(filepath), excerpt: _totalLink2, location: "".concat(ourLocation, " ").concat(filepath) }); // THIS IS DISABLED COZ IT CAN GIVE AN INFINITE LOOP !!!
              // else if (checkingOptions?.disableLinkedTWArticlesCheckFlag !== true) {
              //     // functionLog(`checkNotesLinksToOutside got ${checkingOptions?.disableLinkedTWArticlesCheckFlag} so checking TW article: ${filepath}`);
              //     if (await alreadyChecked(twPathParameters) !== true) {
              //         // functionLog(`checkNotesLinksToOutside needs to check TW article: ${filepath}`);
              //         const checkTWFileResult = await checkMarkdownText(languageCode, repoCode, `TW ${regexResultArray[3].trim()}.md`, twFileContent, ourLocation, checkingOptions);
              //         for (const noticeObject of checkTWFileResult.noticeList)
              //             ctarResult.noticeList.push({ ...noticeObject, username: twRepoUsername, repoCode: 'TW', repoName: twRepoName, filename: filepath, location: ` linked to${ourLocation}`, extra: 'TW' });
              //         ctarResult.checkedFileCount += 1;
              //         ctarResult.checkedFilenames.push(`${regexResultArray[3].trim()}.md`);
              //         ctarResult.checkedFilesizes = twFileContent.length;
              //         ctarResult.checkedFilenameExtensions = ['md'];
              //         ctarResult.checkedRepoNames.push(twRepoName);
              //         markAsChecked(twPathParameters); // don’t bother waiting for the result
              //     }
              // }
              // else debugLog("checkNotesLinksToOutside: disableLinkedTWArticlesCheckFlag is set to TRUE!");
            }case 104:_context4.next = 84;break;case 106:if (!(regexResultArray = TA_FULL_DISPLAY_LINK_REGEX.exec(fieldText))) {_context4.next = 154;break;} // debugLog(`  checkNotesLinksToOutside TA_FULL_DISPLAY_LINK_REGEX resultArray=${JSON.stringify(regexResultArray)}`);
            taLinkCount1 += 1; //parameterAssert(regexResultArray.length === 5, `TA_FULL_DISPLAY_LINK_REGEX expected 5 fields (not ${regexResultArray.length})`)
            // eslint-disable-next-line no-unused-vars
            _regexResultArray7 = regexResultArray, _regexResultArray8 = (0, _slicedToArray2.default)(_regexResultArray7, 5), _totalLink3 = _regexResultArray8[0], _displayName2 = _regexResultArray8[1], foundLanguageCode = _regexResultArray8[2], part = _regexResultArray8[3], _article = _regexResultArray8[4];processedLinkList.push(_totalLink3); // Save the full link
            if (foundLanguageCode !== '*') {characterIndex = TA_FULL_DISPLAY_LINK_REGEX.lastIndex - _totalLink3.length + 7; // lastIndex points to the end of the field that was found
              _excerpt2 = (characterIndex > excerptHalfLength ? '…' : '') + fieldText.substring(characterIndex - excerptHalfLength, characterIndex + excerptHalfLengthPlus) + (characterIndex + excerptHalfLengthPlus < fieldText.length ? '…' : '');addNoticePartial({ priority: 450, message: "Resource container link should have '*' language code", details: "not '".concat(foundLanguageCode, "'"), characterIndex: characterIndex, excerpt: _excerpt2, location: ourLocation });} else if (repoCode === 'TN') {// but not TN2
              // At the moment, tC can’t handle these links with * so we have to ensure that they're not there
              _characterIndex = TA_FULL_DISPLAY_LINK_REGEX.lastIndex - _totalLink3.length + 7; // lastIndex points to the end of the field that was found
              _excerpt3 = (_characterIndex > excerptHalfLength ? '…' : '') + fieldText.substring(_characterIndex - excerptHalfLength, _characterIndex + excerptHalfLengthPlus) + (_characterIndex + excerptHalfLengthPlus < fieldText.length ? '…' : '');addNoticePartial({ priority: 950, message: "tC cannot yet process '*' language code", characterIndex: _characterIndex, excerpt: _excerpt3, location: ourLocation });}if (!foundLanguageCode || foundLanguageCode === '*') foundLanguageCode = defaultLanguageCode;taRepoName = "".concat(foundLanguageCode, "_ta"); // debugLog(`Got taRepoName=${taRepoName}`);
            _filepath = "".concat(part, "/").concat(_article, "/01.md"); // Other files are title.md, sub-title.md
            // debugLog(`Got tA filepath=${filepath}`);
            if (checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.disableAllLinkFetchingFlag) {_context4.next = 152;break;} // functionLog(`checkNotesLinksToOutside: need to check against ${taRepoName}`);
            taPathParameters = { username: taRepoUsername, repository: taRepoName, path: _filepath, branch: taRepoBranch };taFileContent = void 0, alreadyGaveError = false;_context4.prev = 117;_context4.next = 120;return getFile_(taPathParameters);case 120:taFileContent = _context4.sent;_context4.next = 127;break;case 123:_context4.prev = 123;_context4.t3 = _context4["catch"](117); // console.error(`checkNotesLinksToOutside(${bookID}, ${fieldName}, …) failed to load TA for '${taRepoUsername}', '${taRepoName}', '${filepath}', '${taRepoBranch}', ${trcGCerror.message}`);
            addNoticePartial({ priority: 885, message: "Error loading TA article", details: "".concat(taRepoUsername, " ").concat(taRepoName, " ").concat(taRepoBranch, " ").concat(_filepath), excerpt: _totalLink3, location: "".concat(ourLocation, " ").concat(_filepath, ": ").concat(_context4.t3) });alreadyGaveError = true;case 127:if (alreadyGaveError) {_context4.next = 152;break;}if (taFileContent) {_context4.next = 132;break;}addNoticePartial({ priority: 886, message: "Unable to find/load TA article", details: "".concat(taRepoUsername, " ").concat(taRepoName, " ").concat(taRepoBranch, " ").concat(_filepath), excerpt: _totalLink3, location: "".concat(ourLocation, " ").concat(_filepath) });_context4.next = 152;break;case 132:if (!(taFileContent.length < 10)) {_context4.next = 136;break;}addNoticePartial({ priority: 884, message: "TA article seems empty", details: "".concat(taRepoUsername, " ").concat(taRepoName, " ").concat(taRepoBranch, " ").concat(_filepath), excerpt: _totalLink3, location: "".concat(ourLocation, " ").concat(_filepath) });_context4.next = 152;break;case 136:if (!((checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.disableLinkedTAArticlesCheckFlag) !== true)) {_context4.next = 152;break;}_context4.next = 139;return alreadyChecked(taPathParameters);case 139:_context4.t4 = _context4.sent;if (!(_context4.t4 !== true)) {_context4.next = 152;break;}_context4.next = 143;return (0, _core.checkMarkdownText)(foundLanguageCode, repoCode, "TA ".concat(regexResultArray[3].trim(), ".md"), taFileContent, ourLocation, checkingOptions);case 143:checkTAFileResult = _context4.sent;_iterator = _createForOfIteratorHelper(checkTAFileResult.noticeList);try {for (_iterator.s(); !(_step = _iterator.n()).done;) {noticeObject = _step.value; // Why don't we use addNoticePartial() here? (It adds bookID and fieldName.) Maybe it would be misleading???
                ctarResult.noticeList.push(_objectSpread(_objectSpread({}, noticeObject), {}, { username: taRepoUsername, repoCode: 'TA', repoName: taRepoName, filename: _filepath, location: " linked to".concat(ourLocation), extra: 'TA' }));}} catch (err) {_iterator.e(err);} finally {_iterator.f();}ctarResult.checkedFileCount += 1;ctarResult.checkedFilenames.push("".concat(regexResultArray[3].trim(), ".md"));ctarResult.checkedFilesizes = taFileContent.length;ctarResult.checkedFilenameExtensions = ['md'];ctarResult.checkedRepoNames.push(taRepoName);markAsChecked(taPathParameters); // don’t bother waiting for the result
          case 152:_context4.next = 106;break;case 154:if (!(repoCode === 'TA' || fieldName.startsWith('TA '))) {_context4.next = 203;break;}case 155:if (!(regexResultArray = TA_RELATIVE1_DISPLAY_LINK_REGEX.exec(fieldText))) {_context4.next = 181;break;} // debugLog(`  checkNotesLinksToOutside TA_RELATIVE1_DISPLAY_LINK_REGEX resultArray=${JSON.stringify(regexResultArray)}`);
            taLinkCount1 += 1; //parameterAssert(regexResultArray.length === 3, `TA_RELATIVE1_DISPLAY_LINK_REGEX expected 3 fields (not ${regexResultArray.length})`)
            // eslint-disable-next-line no-unused-vars
            _regexResultArray9 = regexResultArray, _regexResultArray10 = (0, _slicedToArray2.default)(_regexResultArray9, 3), _totalLink4 = _regexResultArray10[0], _displayName3 = _regexResultArray10[1], _article2 = _regexResultArray10[2];processedLinkList.push(_totalLink4); // Save the full link
            _taRepoName = "".concat(defaultLanguageCode, "_ta"); // debugLog(`Got taRepoName=${taRepoName}`);
            TAsection = 'translate';if (fieldName.startsWith('checking/')) TAsection = 'checking';else if (fieldName.startsWith('process/')) TAsection = 'process';if (fieldName.startsWith('intro/')) TAsection = 'intro';(0, _utilities.dataAssert)(TAsection === 'translate' || TAsection === 'checking' || TAsection === 'process' || TAsection === 'intro', "Unexpected TA section name = '".concat(TAsection, "'"));_filepath2 = "".concat(TAsection, "/").concat(_article2, "/01.md"); // Other files are title.md, sub-title.md
            // debugLog(`Got tA filepath=${filepath}`);
            if (checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.disableAllLinkFetchingFlag) {_context4.next = 179;break;} // functionLog(`checkNotesLinksToOutside: need to check against ${taRepoName}`);
            _taPathParameters = { username: taRepoUsername, repository: _taRepoName, path: _filepath2, branch: taRepoBranch };_taFileContent = void 0, _alreadyGaveError = false;_context4.prev = 168;_context4.next = 171;return getFile_(_taPathParameters);case 171:_taFileContent = _context4.sent;_context4.next = 178;break;case 174:_context4.prev = 174;_context4.t5 = _context4["catch"](168); // console.error(`checkNotesLinksToOutside(${bookID}, ${fieldName}, …) failed to load TA for '${taRepoUsername}', '${taRepoName}', '${filepath}', '${taRepoBranch}', ${trcGCerror.message}`);
            addNoticePartial({ priority: 885, message: "Error loading TA article", details: "".concat(taRepoUsername, " ").concat(_taRepoName, " ").concat(taRepoBranch, " ").concat(_filepath2), excerpt: _totalLink4, location: "".concat(ourLocation, " ").concat(_filepath2, ": ").concat(_context4.t5) });_alreadyGaveError = true;case 178:if (!_alreadyGaveError) {if (!_taFileContent) addNoticePartial({ priority: 886, message: "Unable to find/load TA article", details: "".concat(taRepoUsername, " ").concat(_taRepoName, " ").concat(taRepoBranch, " ").concat(_filepath2), excerpt: _totalLink4, location: "".concat(ourLocation, " ").concat(_filepath2) });else if (_taFileContent.length < 10) addNoticePartial({ priority: 884, message: "TA article seems empty", details: "".concat(taRepoUsername, " ").concat(_taRepoName, " ").concat(taRepoBranch, " ").concat(_filepath2), excerpt: _totalLink4, location: "".concat(ourLocation, " ").concat(_filepath2) }); // Don't do this or it gets infinite recursion!!!
              // else if (checkingOptions?.disableLinkedTAArticlesCheckFlag !== true) {
              //     // functionLog(`checkNotesLinksToOutside got ${checkingOptions?.disableLinkedTAArticlesCheckFlag} so checking TA article: ${filepath}`);
              //     if (await alreadyChecked(taPathParameters) !== true) {
              //         // functionLog(`checkNotesLinksToOutside needs to check TA article: ${filepath}`);
              //         const checkTAFileResult = await checkMarkdownText(languageCode, repoCode, `TA ${regexResultArray[3].trim()}.md`, taFileContent, ourLocation, checkingOptions);
              //         for (const noticeObject of checkTAFileResult.noticeList)
              //             ctarResult.noticeList.push({ ...noticeObject, username: taRepoUsername, repoCode: 'TA', repoName: taRepoName, filename: filepath, location: ` linked to${ourLocation}`, extra: 'TA' });
              //         ctarResult.checkedFileCount += 1;
              //         ctarResult.checkedFilenames.push(`${regexResultArray[3].trim()}.md`);
              //         ctarResult.checkedFilesizes = taFileContent.length;
              //         ctarResult.checkedFilenameExtensions = ['md'];
              //         ctarResult.checkedRepoNames.push(taRepoName);
              //         markAsChecked(taPathParameters); // don’t bother waiting for the result
              //     }
              // }
            }case 179:_context4.next = 155;break;case 181:if (!(regexResultArray = TA_RELATIVE2_DISPLAY_LINK_REGEX.exec(fieldText))) {_context4.next = 203;break;} // debugLog(`  checkNotesLinksToOutside TA_RELATIVE2_DISPLAY_LINK_REGEX resultArray=${JSON.stringify(regexResultArray)}`);
            taLinkCount1 += 1; //parameterAssert(regexResultArray.length === 4, `TA_RELATIVE2_DISPLAY_LINK_REGEX expected 4 fields (not ${regexResultArray.length})`)
            // eslint-disable-next-line no-unused-vars
            _regexResultArray11 = regexResultArray, _regexResultArray12 = (0, _slicedToArray2.default)(_regexResultArray11, 4), _totalLink5 = _regexResultArray12[0], _displayName4 = _regexResultArray12[1], _TAsection = _regexResultArray12[2], _article3 = _regexResultArray12[3];processedLinkList.push(_totalLink5); // Save the full link
            _taRepoName2 = "".concat(defaultLanguageCode, "_ta"); // debugLog(`Got taRepoName=${taRepoName}`);
            _filepath3 = "".concat(_TAsection, "/").concat(_article3, "/01.md"); // Other files are title.md, sub-title.md
            // debugLog(`Got tA filepath=${filepath}`);
            if (checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.disableAllLinkFetchingFlag) {_context4.next = 201;break;} // functionLog(`checkNotesLinksToOutside: need to check against ${taRepoName}`);
            _taPathParameters2 = { username: taRepoUsername, repository: _taRepoName2, path: _filepath3, branch: taRepoBranch };_taFileContent2 = void 0, _alreadyGaveError2 = false;_context4.prev = 190;_context4.next = 193;return getFile_(_taPathParameters2);case 193:_taFileContent2 = _context4.sent;_context4.next = 200;break;case 196:_context4.prev = 196;_context4.t6 = _context4["catch"](190); // console.error(`checkNotesLinksToOutside(${bookID}, ${fieldName}, …) failed to load TA for '${taRepoUsername}', '${taRepoName}', '${filepath}', '${taRepoBranch}', ${trcGCerror.message}`);
            addNoticePartial({ priority: 885, message: "Error loading TA article", details: "".concat(taRepoUsername, " ").concat(_taRepoName2, " ").concat(taRepoBranch, " ").concat(_filepath3), excerpt: _totalLink5, location: "".concat(ourLocation, " ").concat(_filepath3, ": ").concat(_context4.t6) });_alreadyGaveError2 = true;case 200:if (!_alreadyGaveError2) {if (!_taFileContent2) addNoticePartial({ priority: 886, message: "Unable to find/load TA article", details: "".concat(taRepoUsername, " ").concat(_taRepoName2, " ").concat(taRepoBranch, " ").concat(_filepath3), excerpt: _totalLink5, location: "".concat(ourLocation, " ").concat(_filepath3) });else if (_taFileContent2.length < 10) addNoticePartial({ priority: 884, message: "TA article seems empty", details: "".concat(taRepoUsername, " ").concat(_taRepoName2, " ").concat(taRepoBranch, " ").concat(_filepath3), excerpt: _totalLink5, location: "".concat(ourLocation, " ").concat(_filepath3) }); // Don't do this or it gets infinite recursion!!!
              // else if (checkingOptions?.disableLinkedTAArticlesCheckFlag !== true) {
              //     // functionLog(`checkNotesLinksToOutside got ${checkingOptions?.disableLinkedTAArticlesCheckFlag} so checking TA article: ${filepath}`);
              //     if (await alreadyChecked(taPathParameters) !== true) {
              //         // functionLog(`checkNotesLinksToOutside needs to check TA article: ${filepath}`);
              //         const checkTAFileResult = await checkMarkdownText(languageCode, repoCode, `TA ${regexResultArray[3].trim()}.md`, taFileContent, ourLocation, checkingOptions);
              //         for (const noticeObject of checkTAFileResult.noticeList)
              //             ctarResult.noticeList.push({ ...noticeObject, username: taRepoUsername, repoCode: 'TA', repoName: taRepoName, filename: filepath, location: ` linked to${ourLocation}`, extra: 'TA' });
              //         ctarResult.checkedFileCount += 1;
              //         ctarResult.checkedFilenames.push(`${regexResultArray[3].trim()}.md`);
              //         ctarResult.checkedFilesizes = taFileContent.length;
              //         ctarResult.checkedFilenameExtensions = ['md'];
              //         ctarResult.checkedRepoNames.push(taRepoName);
              //         markAsChecked(taPathParameters); // don’t bother waiting for the result
              //     }
              // }
            }case 201:_context4.next = 181;break;case 203:if (!(regexResultArray = TA_DOUBLE_BRACKETED_LINK_REGEX.exec(fieldText))) {_context4.next = 251;break;} // debugLog(`  checkNotesLinksToOutside TA_DOUBLE_BRACKETED_LINK_REGEX resultArray=${JSON.stringify(regexResultArray)}`);
            taLinkCount2 += 1; //parameterAssert(regexResultArray.length === 4, `TA_DOUBLE_BRACKETED_LINK_REGEX expected 4 fields (not ${regexResultArray.length})`)
            _regexResultArray13 = regexResultArray, _regexResultArray14 = (0, _slicedToArray2.default)(_regexResultArray13, 4), _totalLink6 = _regexResultArray14[0], _foundLanguageCode = _regexResultArray14[1], _part = _regexResultArray14[2], _article4 = _regexResultArray14[3];processedLinkList.push(_totalLink6); // Save the full link
            if (_foundLanguageCode !== '*') {_characterIndex2 = TA_DOUBLE_BRACKETED_LINK_REGEX.lastIndex - _totalLink6.length + 7; // lastIndex points to the end of the field that was found
              _excerpt4 = (_characterIndex2 > excerptHalfLength ? '…' : '') + fieldText.substring(_characterIndex2 - excerptHalfLength, _characterIndex2 + excerptHalfLengthPlus) + (_characterIndex2 + excerptHalfLengthPlus < fieldText.length ? '…' : '');addNoticePartial({ priority: 450, message: "Resource container link should have '*' language code", details: "not '".concat(_foundLanguageCode, "'"), characterIndex: _characterIndex2, excerpt: _excerpt4, location: ourLocation });} else if (repoCode === 'TN') {// but not TN2
              // At the moment, tC can’t handle these links with * so we have to ensure that they're not there
              _characterIndex3 = TA_DOUBLE_BRACKETED_LINK_REGEX.lastIndex - _totalLink6.length + 7; // lastIndex points to the end of the field that was found
              _excerpt5 = (_characterIndex3 > excerptHalfLength ? '…' : '') + fieldText.substring(_characterIndex3 - excerptHalfLength, _characterIndex3 + excerptHalfLengthPlus) + (_characterIndex3 + excerptHalfLengthPlus < fieldText.length ? '…' : '');addNoticePartial({ priority: 950, message: "tC cannot yet process '*' language code", characterIndex: _characterIndex3, excerpt: _excerpt5, location: ourLocation });}if (!_foundLanguageCode || _foundLanguageCode === '*') _foundLanguageCode = defaultLanguageCode;_taRepoName3 = "".concat(_foundLanguageCode, "_ta"); // debugLog(`Got taRepoName=${taRepoName}`);
            _filepath4 = "".concat(_part, "/").concat(_article4, "/01.md"); // Other files are title.md, sub-title.md
            // debugLog(`Got tA filepath=${filepath}`);
            if (checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.disableAllLinkFetchingFlag) {_context4.next = 249;break;} // functionLog(`checkNotesLinksToOutside: need to check against ${taRepoName}`);
            _taPathParameters3 = { username: taRepoUsername, repository: _taRepoName3, path: _filepath4, branch: taRepoBranch };_taFileContent3 = void 0, _alreadyGaveError3 = false;_context4.prev = 214;_context4.next = 217;return getFile_(_taPathParameters3);case 217:_taFileContent3 = _context4.sent;_context4.next = 224;break;case 220:_context4.prev = 220;_context4.t7 = _context4["catch"](214); // console.error(`checkNotesLinksToOutside(${bookID}, ${fieldName}, …) failed to load TA for '${taRepoUsername}', '${taRepoName}', '${filepath}', '${taRepoBranch}', ${trcGCerror.message}`);
            addNoticePartial({ priority: 885, message: "Error loading TA article", details: "".concat(taRepoUsername, " ").concat(_taRepoName3, " ").concat(taRepoBranch, " ").concat(_filepath4), excerpt: _totalLink6, location: "".concat(ourLocation, " ").concat(_filepath4, ": ").concat(_context4.t7) });_alreadyGaveError3 = true;case 224:if (_alreadyGaveError3) {_context4.next = 249;break;}if (_taFileContent3) {_context4.next = 229;break;}addNoticePartial({ priority: 886, message: "Unable to find/load TA article", details: "".concat(taRepoUsername, " ").concat(_taRepoName3, " ").concat(taRepoBranch, " ").concat(_filepath4), excerpt: _totalLink6, location: "".concat(ourLocation, " ").concat(_filepath4) });_context4.next = 249;break;case 229:if (!(_taFileContent3.length < 10)) {_context4.next = 233;break;}addNoticePartial({ priority: 884, message: "TA article seems empty", details: "".concat(taRepoUsername, " ").concat(_taRepoName3, " ").concat(taRepoBranch, " ").concat(_filepath4), excerpt: _totalLink6, location: "".concat(ourLocation, " ").concat(_filepath4) });_context4.next = 249;break;case 233:if (!((checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.disableLinkedTAArticlesCheckFlag) !== true)) {_context4.next = 249;break;}_context4.next = 236;return alreadyChecked(_taPathParameters3);case 236:_context4.t8 = _context4.sent;if (!(_context4.t8 !== true)) {_context4.next = 249;break;}_context4.next = 240;return (0, _core.checkMarkdownText)(_foundLanguageCode, repoCode, "TA ".concat(regexResultArray[3].trim(), ".md"), _taFileContent3, ourLocation, checkingOptions);case 240:_checkTAFileResult = _context4.sent;_iterator2 = _createForOfIteratorHelper(_checkTAFileResult.noticeList);try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {_noticeObject = _step2.value; // Why don't we use addNoticePartial() here? (It adds bookID and fieldName.) Maybe it would be misleading???
                ctarResult.noticeList.push(_objectSpread(_objectSpread({}, _noticeObject), {}, { username: taRepoUsername, repoCode: 'TA', repoName: _taRepoName3, filename: _filepath4, location: " linked to".concat(ourLocation), extra: 'TA' }));}} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}ctarResult.checkedFileCount += 1;ctarResult.checkedFilenames.push("".concat(regexResultArray[3].trim(), ".md"));ctarResult.checkedFilesizes = _taFileContent3.length;ctarResult.checkedFilenameExtensions = ['md'];ctarResult.checkedRepoNames.push(_taRepoName3);markAsChecked(_taPathParameters3); // don’t bother waiting for the result
          case 249:_context4.next = 203;break;case 251: // Check for external TW links like [[rc://en/tw/dict/bible/other/death]] in TN or rc://en/tw/dict/bible/other/death in TWLinks
            //  (These are not nearly as many as TA links.)
            ourTWRegex = fieldName === 'TWLink' ? TWL_RAW_LINK_REGEX : TW_DOUBLE_BRACKETED_LINK_REGEX; // if (fieldText.indexOf('brother') !== -1) debugLog(`checkNotesLinksToOutside: ${bookID} ${givenC}:${givenV} Search for TW links with ${ourTWRegex}`)
          case 252:if (!(regexResultArray = ourTWRegex.exec(fieldText))) {_context4.next = 298;break;} // debugLog(`  checkNotesLinksToOutside ${languageCode} ${repoCode} ${fieldName} ${givenC}:${givenV} found TW resultArray=${JSON.stringify(regexResultArray)}`);
            twLinkCount2 += 1; //parameterAssert(regexResultArray.length === 4, `TW_REGEX expected 4 fields (not ${regexResultArray.length})`)
            _regexResultArray15 = regexResultArray, _regexResultArray16 = (0, _slicedToArray2.default)(_regexResultArray15, 4), _totalLink7 = _regexResultArray16[0], _foundLanguageCode2 = _regexResultArray16[1], _category = _regexResultArray16[2], _article5 = _regexResultArray16[3];processedLinkList.push(_totalLink7); // Save the full link
            if (!_foundLanguageCode2 || _foundLanguageCode2 === '*') _foundLanguageCode2 = defaultLanguageCode;_twRepoName = "".concat(_foundLanguageCode2, "_tw"); // debugLog(`Got twRepoName=${twRepoName}`);
            _filepath5 = "bible/".concat(_category, "/").concat(_article5.trim(), ".md"); // debugLog(`Got tW filepath=${filepath}`);
            if (checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.disableAllLinkFetchingFlag) {_context4.next = 296;break;} // if (article === 'brother') debugLog(`Need to check ${fieldName} TW link ${regexResultArray} against ${twRepoName}`);
            _twPathParameters = { username: twRepoUsername, repository: _twRepoName, path: _filepath5, branch: twRepoBranch };_twFileContent = void 0;_context4.prev = 262;_context4.next = 265;return getFile_(_twPathParameters);case 265:_twFileContent = _context4.sent;_context4.next = 272;break;case 268:_context4.prev = 268;_context4.t9 = _context4["catch"](262);console.error("checkNotesLinksToOutside(".concat(bookID, ", ").concat(fieldName, ", \u2026) failed to load TW ").concat(twRepoUsername, " ").concat(_twRepoName, ", ").concat(_filepath5, ", ").concat(twRepoBranch, ": ").concat(_context4.t9.message));addNoticePartial({ priority: 882, message: "Error loading TW article", details: "".concat(twRepoUsername, " ").concat(_twRepoName, " ").concat(twRepoBranch, " ").concat(_filepath5), excerpt: _totalLink7, location: "".concat(ourLocation, " ").concat(_filepath5, ": ").concat(_context4.t9) });case 272:if (_twFileContent) {_context4.next = 276;break;}addNoticePartial({ priority: 883, message: "Unable to find/load TW article", details: "".concat(twRepoUsername, " ").concat(_twRepoName, " ").concat(twRepoBranch, " ").concat(_filepath5), excerpt: _totalLink7, location: "".concat(ourLocation, " ").concat(_filepath5) });_context4.next = 296;break;case 276:if (!(_twFileContent.length < 10)) {_context4.next = 280;break;}addNoticePartial({ priority: 881, message: "TW article seems empty", details: "".concat(twRepoUsername, " ").concat(_twRepoName, " ").concat(twRepoBranch, " ").concat(_filepath5), excerpt: _totalLink7, location: "".concat(ourLocation, " ").concat(_filepath5) });_context4.next = 296;break;case 280:if (!((checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.disableLinkedTWArticlesCheckFlag) !== true)) {_context4.next = 296;break;}_context4.next = 283;return alreadyChecked(_twPathParameters);case 283:_context4.t10 = _context4.sent;if (!(_context4.t10 !== true)) {_context4.next = 296;break;}_context4.next = 287;return (0, _core.checkMarkdownText)(_foundLanguageCode2, repoCode, "TW ".concat(regexResultArray[3].trim(), ".md"), _twFileContent, ourLocation, checkingOptions);case 287:checkTWFileResult = _context4.sent;_iterator3 = _createForOfIteratorHelper(checkTWFileResult.noticeList);try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {_noticeObject2 = _step3.value; // Why don't we use addNoticePartial() here? (It adds bookID and fieldName.) Maybe it would be misleading???
                ctarResult.noticeList.push(_objectSpread(_objectSpread({}, _noticeObject2), {}, { username: twRepoUsername, repoCode: 'TW', repoName: _twRepoName, filename: _filepath5, location: " linked to".concat(ourLocation), extra: 'TW' }));}} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}ctarResult.checkedFileCount += 1;ctarResult.checkedFilenames.push("".concat(regexResultArray[3].trim(), ".md"));ctarResult.checkedFilesizes = _twFileContent.length;ctarResult.checkedFilenameExtensions = ['md'];ctarResult.checkedRepoNames.push(_twRepoName);markAsChecked(_twPathParameters); // don’t bother waiting for the result
          case 296:_context4.next = 252;break;case 298: // debugLog("checkNotesLinksToOutside: Search for Bible links")
            // Check for other book Bible links like [Genesis 29:23](rc://en/tn/help/gen/29/23)
            while (regexResultArray = BIBLE_FULL_HELP_REGEX.exec(fieldText)) {// debugLog(`  checkNotesLinksToOutside BIBLE_FULL_HELP_REGEX regexResultArray(${regexResultArray.length})=${JSON.stringify(regexResultArray)}`);
              otherBookBibleLinkCount1 += 1; //parameterAssert(regexResultArray.length === 9, `BIBLE_FULL_HELP_REGEX expected 9 fields (not ${regexResultArray.length})`);
              _regexResultArray17 = regexResultArray, _regexResultArray18 = (0, _slicedToArray2.default)(_regexResultArray17, 9), _totalLink8 = _regexResultArray18[0], optionalN1 = _regexResultArray18[1], optionalB1 = _regexResultArray18[2], C1 = _regexResultArray18[3], V1 = _regexResultArray18[4], Lg = _regexResultArray18[5], B2 = _regexResultArray18[6], C2 = _regexResultArray18[7], V2 = _regexResultArray18[8]; // debugLog(`Lg='${Lg}' B2='${B2}' C2='${C2}' V2='${V2}'`);
              processedLinkList.push(_totalLink8); // Save the full link
              if (Lg !== '*' && Lg !== languageCode) addNoticePartial({ priority: 669, message: "Unexpected language code in link", details: "resource language code is '".concat(languageCode, "'"), excerpt: Lg, location: ourLocation });if (optionalN1) {//parameterAssert(optionalB1, `Should have book name as well as number '${optionalN1}' in '${totalLink}'`);
              }if (optionalB1) {optionalB1 = "".concat(optionalN1).concat(optionalB1).trim(); // e.g., 1 Timothy
                if (defaultLanguageCode === 'en') {// should be able to check the book name
                  checkResult = books.isGoodEnglishBookName(optionalB1); // debugLog(optionalB1, "isGoodEnglishBookName checkResult", checkResult);
                  if (checkResult === undefined || checkResult === false) // NOTE: Our English bookname table has 'Song of Songs'
                    addNoticePartial({ priority: optionalB1 === 'Song of Solomon' ? 43 : 143, message: "".concat(optionalB1 === 'Song of Solomon' ? 'Unexpected' : 'Unknown', " Bible book name in TN RC link"), details: _totalLink8, excerpt: optionalB1, location: ourLocation });}}linkBookCode = B2 === '..' ? bookID : B2;linkChapterInt = (0, _utilities.ourParseInt)(C2), linkVerseInt = (0, _utilities.ourParseInt)(V2);try {if ((0, _utilities.ourParseInt)(C1) !== linkChapterInt) addNoticePartial({ priority: 743, message: "Chapter numbers of markdown Bible link don’t match", details: "".concat(C1, " vs ").concat(linkChapterInt), excerpt: _totalLink8, location: ourLocation });} catch (ccError) {console.error("TN Link CheckA couldn\u2019t compare chapter numbers for ".concat(bookID, " ").concat(givenC, ":").concat(givenV, " ").concat(fieldName, " with ").concat(C1, " from '").concat(fieldText, "': ").concat(ccError));}try {if ((0, _utilities.ourParseInt)(V1) !== linkVerseInt) addNoticePartial({ priority: 742, message: "Verse numbers of markdown Bible link don’t match", details: "".concat(V1, " vs ").concat(linkVerseInt), excerpt: _totalLink8, location: ourLocation });} catch (vvError) {console.error("TN Link CheckA couldn\u2019t compare verse numbers for ".concat(bookID, " ").concat(givenC, ":").concat(givenV, " ").concat(fieldName, " with ").concat(C1, ":").concat(V1, " from '").concat(fieldText, "': ").concat(vvError));}if (linkBookCode === 'obs') {numStories = 50, numFramesThisStory = 99;if (!linkChapterInt || linkChapterInt < 1 || linkChapterInt > numStories) addNoticePartial({ priority: 655, message: "Bad story number in markdown OBS help link", details: "".concat(linkBookCode, " ").concat(linkChapterInt, " vs ").concat(numStories, " chapters"), excerpt: _totalLink8, location: ourLocation });else if (!linkVerseInt || linkVerseInt < 0 || linkVerseInt > numFramesThisStory) addNoticePartial({ priority: 653, message: "Bad frame number in markdown OBS help link", details: "".concat(linkBookCode, " ").concat(linkChapterInt, ":").concat(linkVerseInt, " vs ").concat(numFramesThisStory, " verses"), excerpt: _totalLink8, location: ourLocation });} else if (linkBookCode.length) {// then we know which Bible book this link is to
                // So we can check for valid C:V numbers
                numChaptersThisBook = void 0, numVersesThisChapter = void 0;(0, _utilities.logicAssert)(linkBookCode.toLowerCase() !== 'obs', "BIBLE_FULL_HELP_REGEX linkBookCode shouldn\u2019t be '".concat(linkBookCode, "' in notes-links-check"));try {numChaptersThisBook = books.chaptersInBook(linkBookCode);} catch (tlcNCerror) {(0, _utilities.debugLog)("checkNotesLinksToOutside1 with linkBookCode '".concat(linkBookCode, "' got error: ").concat(tlcNCerror));numChaptersThisBook = 0;}try {numVersesThisChapter = books.versesInChapter(linkBookCode, linkChapterInt);} catch (tlcNVerror) {}if (!linkChapterInt || linkChapterInt < 1 || linkChapterInt > numChaptersThisBook) addNoticePartial({ priority: 655, message: "Bad chapter number in markdown Bible help link", details: "".concat(linkBookCode, " ").concat(linkChapterInt, " vs ").concat(numChaptersThisBook, " chapters"), excerpt: _totalLink8, location: ourLocation });else if (!linkVerseInt || linkVerseInt < 0 || linkVerseInt > numVersesThisChapter) addNoticePartial({ priority: 653, message: "Bad verse number in markdown Bible help link", details: "".concat(linkBookCode, " ").concat(linkChapterInt, ":").concat(linkVerseInt, " vs ").concat(numVersesThisChapter, " verses"), excerpt: _totalLink8, location: ourLocation });} else (0, _utilities.debugLog)("Seems BIBLE_FULL_HELP_REGEX '".concat(_totalLink8, "' didn't have a link book code!"));} // Check for this-chapter Bible links like [Revelation 3:11](./11.md)
            while (regexResultArray = BIBLE_REGEX_THIS_CHAPTER_RELATIVE.exec(fieldText)) {// debugLog(`  checkNotesLinksToOutside BIBLE_REGEX_THIS_CHAPTER_RELATIVE regexResultArray(${regexResultArray.length})=${JSON.stringify(regexResultArray)}`);
              thisChapterBibleLinkCount1 += 1; //parameterAssert(regexResultArray.length === 6, `BIBLE_REGEX_THIS_CHAPTER_RELATIVE expected 6 fields (not ${regexResultArray.length})`);
              _regexResultArray19 = regexResultArray, _regexResultArray20 = (0, _slicedToArray2.default)(_regexResultArray19, 6), _totalLink9 = _regexResultArray20[0], _optionalN = _regexResultArray20[1], _optionalB = _regexResultArray20[2], _C = _regexResultArray20[3], _V = _regexResultArray20[4], _V2 = _regexResultArray20[5];processedLinkList.push(_totalLink9); // Save the full link
              if (_optionalN) {//parameterAssert(optionalB1, `Should have book name as well as number '${optionalN1}'`);
              }if (_optionalB) {_optionalB = "".concat(_optionalN).concat(_optionalB).trim(); // e.g., 1 Timothy
                if (defaultLanguageCode === 'en') {// should be able to check the book name
                  _checkResult = books.isGoodEnglishBookName(_optionalB); // debugLog(optionalB1, "isGoodEnglishBookName checkResult", checkResult);
                  if (_checkResult === undefined || _checkResult === false) // NOTE: Our English bookname table has 'Song of Songs'
                    addNoticePartial({ priority: _optionalB === 'Song of Solomon' ? 43 : 143, message: "".concat(_optionalB === 'Song of Solomon' ? 'Unexpected' : 'Unknown', " Bible book name in Bible link"), details: _totalLink9, excerpt: _optionalB, location: ourLocation });}}_linkBookCode = bookID;_linkVerseInt = (0, _utilities.ourParseInt)(_V2);if (_C === undefined) {if (_linkBookCode.length === 0 || !books.isOneChapterBook(_linkBookCode)) {// debugLog(`  checkNotesLinksToOutside C1 missing in BIBLE_REGEX_THIS_CHAPTER_RELATIVE regexResultArray(${regexResultArray.length})=${JSON.stringify(regexResultArray)}`);
                  addNoticePartial({ priority: 555, message: "Possible missing chapter number in markdown Bible link", excerpt: _totalLink9, location: ourLocation });}_C = '0'; // Try to avoid consequential errors
              }try {if ((0, _utilities.ourParseInt)(_C) !== givenCint) addNoticePartial({ priority: 743, message: "Chapter numbers of markdown Bible link don’t match", details: "".concat(_C, " vs ").concat(givenCint), excerpt: _totalLink9, location: ourLocation });} catch (ccError) {console.error("TN Link Check1 couldn\u2019t compare chapter numbers for ".concat(bookID, " ").concat(givenC, ":").concat(givenV, " ").concat(fieldName, " with ").concat(_C, " from '").concat(fieldText, "': ").concat(ccError));}try {if ((0, _utilities.ourParseInt)(_V) !== _linkVerseInt) addNoticePartial({ priority: 742, message: "Verse numbers of markdown Bible link don’t match", details: "".concat(_V, " vs ").concat(_linkVerseInt), excerpt: _totalLink9, location: ourLocation });} catch (vvError) {console.error("TN Link Check1 couldn\u2019t compare verse numbers for ".concat(bookID, " ").concat(givenC, ":").concat(givenV, " ").concat(fieldName, " with ").concat(_C, ":").concat(_V, " from '").concat(fieldText, "': ").concat(vvError));}if (_linkBookCode.length) {// then we know which Bible book this link is to
                // So we can check for valid C:V numbers
                _numChaptersThisBook = void 0, _numVersesThisChapter = void 0;(0, _utilities.logicAssert)(_linkBookCode.toLowerCase() !== 'obs', "BIBLE_REGEX_THIS_CHAPTER_RELATIVE linkBookCode shouldn\u2019t be '".concat(_linkBookCode, "' in notes-links-check"));try {_numChaptersThisBook = books.chaptersInBook(_linkBookCode);} catch (tlcNCerror) {(0, _utilities.debugLog)("checkNotesLinksToOutside2 with linkBookCode '".concat(_linkBookCode, "' got error: ").concat(tlcNCerror));_numChaptersThisBook = 0;}try {_numVersesThisChapter = books.versesInChapter(_linkBookCode, givenCint);} catch (tlcNVerror) {}if (!givenCint || givenCint < 1 || givenCint > _numChaptersThisBook) addNoticePartial({ priority: 655, message: "Bad chapter number in markdown Bible link", details: "".concat(_linkBookCode, " ").concat(givenCint, " vs ").concat(_numChaptersThisBook, " chapters"), excerpt: _totalLink9, location: ourLocation });else if (!_linkVerseInt || _linkVerseInt < 0 || _linkVerseInt > _numVersesThisChapter) addNoticePartial({ priority: 653, message: "Bad verse number in markdown Bible link", details: "".concat(_linkBookCode, " ").concat(givenCint, ":").concat(_linkVerseInt, " vs ").concat(_numVersesThisChapter, " verses"), excerpt: _totalLink9, location: ourLocation });}} // Check for this-verse Bible links like [11](../03/11.md)
            while (regexResultArray = THIS_VERSE_TO_THIS_CHAPTER_BIBLE_REGEX.exec(fieldText)) {// debugLog(`  checkNotesLinksToOutside THIS_VERSE_TO_THIS_CHAPTER_BIBLE_REGEX regexResultArray(${regexResultArray.length})=${JSON.stringify(regexResultArray)}`);
              thisVerseBibleLinkCount1 += 1; //parameterAssert(regexResultArray.length === 4, `THIS_VERSE_TO_THIS_CHAPTER_BIBLE_REGEX expected 4 fields (not ${regexResultArray.length})`);
              _regexResultArray21 = regexResultArray, _regexResultArray22 = (0, _slicedToArray2.default)(_regexResultArray21, 4), _totalLink10 = _regexResultArray22[0], _V3 = _regexResultArray22[1], _C2 = _regexResultArray22[2], _V4 = _regexResultArray22[3];processedLinkList.push(_totalLink10); // Save the full link
              _linkBookCode2 = bookID;_linkChapterInt = void 0, _linkVerseInt2 = void 0;try {_linkChapterInt = (0, _utilities.ourParseInt)(_C2);_linkVerseInt2 = (0, _utilities.ourParseInt)(_V4);if ((0, _utilities.ourParseInt)(_V3) !== _linkVerseInt2) addNoticePartial({ priority: 742, message: "Verse numbers of markdown Bible link don’t match", details: "".concat(_V3, " vs ").concat(_V4), excerpt: _totalLink10, location: ourLocation });} catch (vvError) {console.error("TN Link Check1b couldn\u2019t compare verse numbers for ".concat(bookID, " ").concat(givenC, ":").concat(givenV, " ").concat(fieldName, " ").concat(_V3, " with ").concat(_C2, ":").concat(_V4, " from '").concat(fieldText, "': ").concat(vvError));}if (_linkBookCode2.length) {// then we know which Bible book this link is to
                // So we can check for valid C:V numbers
                _numChaptersThisBook2 = void 0, _numVersesThisChapter2 = void 0;(0, _utilities.logicAssert)(_linkBookCode2.toLowerCase() !== 'obs', "THIS_VERSE_TO_THIS_CHAPTER_BIBLE_REGEX linkBookCode shouldn\u2019t be '".concat(_linkBookCode2, "' in notes-links-check"));try {_numChaptersThisBook2 = books.chaptersInBook(_linkBookCode2);} catch (tlcNCerror) {(0, _utilities.debugLog)("checkNotesLinksToOutside3 with linkBookCode '".concat(_linkBookCode2, "' got error: ").concat(tlcNCerror));_numChaptersThisBook2 = 0;}try {_numVersesThisChapter2 = books.versesInChapter(_linkBookCode2, _linkChapterInt);} catch (tlcNVerror) {}if (!_linkChapterInt || _linkChapterInt < 1 || _linkChapterInt > _numChaptersThisBook2) addNoticePartial({ priority: 655, message: "Bad chapter number in markdown Bible link", details: "".concat(_linkBookCode2, " ").concat(_linkChapterInt, " vs ").concat(_numChaptersThisBook2, " chapters"), excerpt: _totalLink10, location: ourLocation });else if (!_linkVerseInt2 || _linkVerseInt2 < 0 || _linkVerseInt2 > _numVersesThisChapter2) addNoticePartial({ priority: 653, message: "Bad verse number in markdown Bible link", details: "".concat(_linkBookCode2, " ").concat(_linkChapterInt, ":").concat(_linkVerseInt2, " vs ").concat(_numVersesThisChapter2, " verses"), excerpt: _totalLink10, location: ourLocation });}} // Check for this-verse Bible links like [11](../03/11.md)
            while (regexResultArray = THIS_VERSE_RANGE_TO_THIS_CHAPTER_BIBLE_REGEX.exec(fieldText)) {// debugLog(`  checkNotesLinksToOutside THIS_VERSE_RANGE_TO_THIS_CHAPTER_BIBLE_REGEX regexResultArray(${regexResultArray.length})=${JSON.stringify(regexResultArray)}`);
              thisVerseBibleLinkCount1 += 1; //parameterAssert(regexResultArray.length === 5, `THIS_VERSE_RANGE_TO_THIS_CHAPTER_BIBLE_REGEX expected 5 fields (not ${regexResultArray.length})`);
              _regexResultArray23 = regexResultArray, _regexResultArray24 = (0, _slicedToArray2.default)(_regexResultArray23, 5), _totalLink11 = _regexResultArray24[0], V1a = _regexResultArray24[1], V1b = _regexResultArray24[2], _C3 = _regexResultArray24[3], _V5 = _regexResultArray24[4];processedLinkList.push(_totalLink11); // Save the full link
              _linkBookCode3 = bookID;verseInt1a = void 0, verseInt1b = void 0, _linkChapterInt2 = void 0, _linkVerseInt3 = void 0;try {verseInt1a = (0, _utilities.ourParseInt)(V1a);verseInt1b = (0, _utilities.ourParseInt)(V1b);_linkChapterInt2 = (0, _utilities.ourParseInt)(_C3);_linkVerseInt3 = (0, _utilities.ourParseInt)(_V5);if (verseInt1a !== _linkVerseInt3) addNoticePartial({ priority: 742, message: "Verse numbers of markdown Bible link don’t match", details: "".concat(V1a, " vs ").concat(_V5), excerpt: _totalLink11, location: ourLocation });} catch (vvError) {console.error("TN Link Check1c couldn\u2019t compare verse numbers for ".concat(bookID, " ").concat(givenC, ":").concat(givenV, " ").concat(fieldName, " ").concat(V1a, " with ").concat(_C3, ":").concat(_V5, " from '").concat(fieldText, "': ").concat(vvError));}if (verseInt1b <= verseInt1a) addNoticePartial({ priority: 741, message: "Verse numbers of markdown Bible link range out of order", details: "".concat(V1a, " to ").concat(V1b), excerpt: _totalLink11, location: ourLocation });if (_linkBookCode3.length) {// then we know which Bible book this link is to
                // So we can check for valid C:V numbers
                _numChaptersThisBook3 = void 0, _numVersesThisChapter3 = void 0;(0, _utilities.logicAssert)(_linkBookCode3.toLowerCase() !== 'obs', "THIS_VERSE_RANGE_TO_THIS_CHAPTER_BIBLE_REGEX linkBookCode shouldn\u2019t be '".concat(_linkBookCode3, "' in notes-links-check"));try {_numChaptersThisBook3 = books.chaptersInBook(_linkBookCode3);} catch (tlcNCerror) {(0, _utilities.debugLog)("checkNotesLinksToOutside4 with linkBookCode '".concat(_linkBookCode3, "' got error: ").concat(tlcNCerror));_numChaptersThisBook3 = 0;}try {_numVersesThisChapter3 = books.versesInChapter(_linkBookCode3, _linkChapterInt2);} catch (tlcNVerror) {}if (!_linkChapterInt2 || _linkChapterInt2 < 1 || _linkChapterInt2 > _numChaptersThisBook3) addNoticePartial({ priority: 655, message: "Bad chapter number in markdown Bible link", details: "".concat(_linkBookCode3, " ").concat(_linkChapterInt2, " vs ").concat(_numChaptersThisBook3, " chapters"), excerpt: _totalLink11, location: ourLocation });else if (!_linkVerseInt3 || _linkVerseInt3 < 0 || _linkVerseInt3 > _numVersesThisChapter3) addNoticePartial({ priority: 653, message: "Bad verse number in markdown Bible link", details: "".concat(_linkBookCode3, " ").concat(_linkChapterInt2, ":").concat(_linkVerseInt3, " vs ").concat(_numVersesThisChapter3, " verses"), excerpt: _totalLink11, location: ourLocation });}} // Check for this-book Bible links like [Revelation 3:11](../03/11.md)
            while (regexResultArray = BIBLE_REGEX_THIS_BOOK_RELATIVE.exec(fieldText)) {// debugLog(`  checkNotesLinksToOutside BIBLE_REGEX_THIS_BOOK_RELATIVE regexResultArray(${regexResultArray.length})=${JSON.stringify(regexResultArray)}`);
              thisBookBibleLinkCount1 += 1; //parameterAssert(regexResultArray.length === 7, `BIBLE_REGEX_THIS_BOOK_RELATIVE expected 7 fields (not ${regexResultArray.length})`);
              _regexResultArray25 = regexResultArray, _regexResultArray26 = (0, _slicedToArray2.default)(_regexResultArray25, 7), _totalLink12 = _regexResultArray26[0], _optionalN2 = _regexResultArray26[1], _optionalB2 = _regexResultArray26[2], _C4 = _regexResultArray26[3], _V6 = _regexResultArray26[4], _C5 = _regexResultArray26[5], _V7 = _regexResultArray26[6];processedLinkList.push(_totalLink12); // Save the full link
              if (_optionalN2) {//parameterAssert(optionalB1, `Should have book name as well as number '${optionalN1}'`);
              }if (_optionalB2) {_optionalB2 = "".concat(_optionalN2).concat(_optionalB2).trim(); // e.g., 1 Timothy
                if (defaultLanguageCode === 'en') {// should be able to check the book name
                  _checkResult2 = books.isGoodEnglishBookName(_optionalB2); // debugLog(optionalB1, "isGoodEnglishBookName checkResult", checkResult);
                  if (_checkResult2 === undefined || _checkResult2 === false) // NOTE: Our English bookname table has 'Song of Songs'
                    addNoticePartial({ priority: _optionalB2 === 'Song of Solomon' ? 43 : 143, message: "".concat(_optionalB2 === 'Song of Solomon' ? 'Unexpected' : 'Unknown', " Bible book name in relative Bible link"), details: _totalLink12, excerpt: _optionalB2, location: ourLocation });}}_linkBookCode4 = bookID;_linkChapterInt3 = (0, _utilities.ourParseInt)(_C5), _linkVerseInt4 = (0, _utilities.ourParseInt)(_V7);try {if ((0, _utilities.ourParseInt)(_C4) !== _linkChapterInt3) addNoticePartial({ priority: 743, message: "Chapter numbers of markdown Bible link don’t match", details: "".concat(_C4, " vs ").concat(_linkChapterInt3), excerpt: _totalLink12, location: ourLocation });} catch (ccError) {console.error("TN Link Check2 couldn\u2019t compare chapter numbers for ".concat(bookID, " ").concat(givenC, ":").concat(givenV, " ").concat(fieldName, " with ").concat(_C5, " from '").concat(fieldText, "': ").concat(ccError));}try {if ((0, _utilities.ourParseInt)(_V6) !== _linkVerseInt4) addNoticePartial({ priority: 742, message: "Verse numbers of markdown Bible link don’t match", details: "".concat(_V6, " vs ").concat(_linkVerseInt4), excerpt: _totalLink12, location: ourLocation });} catch (vvError) {console.error("TN Link Check2 couldn\u2019t compare verse numbers for ".concat(bookID, " ").concat(givenC, ":").concat(givenV, " ").concat(fieldName, " with ").concat(_C5, ":").concat(_V7, " from '").concat(fieldText, "': ").concat(vvError));}if (_linkBookCode4.length) {// then we know which Bible book this link is to
                // So we can check for valid C:V numbers
                _numChaptersThisBook4 = void 0, _numVersesThisChapter4 = void 0;(0, _utilities.logicAssert)(_linkBookCode4.toLowerCase() !== 'obs', "BIBLE_REGEX_THIS_BOOK_RELATIVE linkBookCode shouldn\u2019t be '".concat(_linkBookCode4, "' in notes-links-check"));try {_numChaptersThisBook4 = books.chaptersInBook(_linkBookCode4);} catch (tlcNCerror) {(0, _utilities.debugLog)("checkNotesLinksToOutside5 with linkBookCode '".concat(_linkBookCode4, "' got error: ").concat(tlcNCerror));_numChaptersThisBook4 = 0;}try {_numVersesThisChapter4 = books.versesInChapter(_linkBookCode4, _linkChapterInt3);} catch (tlcNVerror) {}if (!_linkChapterInt3 || _linkChapterInt3 < 1 || _linkChapterInt3 > _numChaptersThisBook4) addNoticePartial({ priority: 655, message: "Bad chapter number in markdown Bible link", details: "".concat(_linkBookCode4, " ").concat(_linkChapterInt3, " vs ").concat(_numChaptersThisBook4, " chapters"), excerpt: _totalLink12, location: ourLocation });else if (!_linkVerseInt4 || _linkVerseInt4 < 0 || _linkVerseInt4 > _numVersesThisChapter4) addNoticePartial({ priority: 653, message: "Bad verse number in markdown Bible link", details: "".concat(_linkBookCode4, " ").concat(_linkChapterInt3, ":").concat(_linkVerseInt4, " vs ").concat(_numVersesThisChapter4, " verses"), excerpt: _totalLink12, location: ourLocation });}} // Check for this-book Bible links like [Revelation 3:11-12](../03/11.md)
            while (regexResultArray = BCV_V_TO_THIS_BOOK_BIBLE_REGEX.exec(fieldText)) {// debugLog(`  checkNotesLinksToOutside BCV_V_TO_THIS_BOOK_BIBLE_REGEX regexResultArray(${regexResultArray.length})=${JSON.stringify(regexResultArray)}`);
              thisBookBibleLinkCount1 += 1; //parameterAssert(regexResultArray.length === 9, `BCV_V_TO_THIS_BOOK_BIBLE_REGEX expected 9 fields (not ${regexResultArray.length})`);
              _regexResultArray27 = regexResultArray, _regexResultArray28 = (0, _slicedToArray2.default)(_regexResultArray27, 9), _totalLink13 = _regexResultArray28[0], _optionalN3 = _regexResultArray28[1], _optionalB3 = _regexResultArray28[2], _C6 = _regexResultArray28[3], _V1a = _regexResultArray28[4], _V1b = _regexResultArray28[5], _B = _regexResultArray28[6], _C7 = _regexResultArray28[7], _V8 = _regexResultArray28[8];processedLinkList.push(_totalLink13); // Save the full link
              if (_optionalN3) {//parameterAssert(optionalB1, `Should have book name as well as number '${optionalN1}'`);
              }if (_optionalB3) {_optionalB3 = "".concat(_optionalN3).concat(_optionalB3).trim(); // e.g., 1 Timothy
                if (defaultLanguageCode === 'en') {// should be able to check the book name
                  _checkResult3 = books.isGoodEnglishBookName(_optionalB3); // debugLog(optionalB1, "isGoodEnglishBookName checkResult", checkResult);
                  if (_checkResult3 === undefined || _checkResult3 === false) // NOTE: Our English bookname table has 'Song of Songs'
                    addNoticePartial({ priority: _optionalB3 === 'Song of Solomon' ? 43 : 143, message: "".concat(_optionalB3 === 'Song of Solomon' ? 'Unexpected' : 'Unknown', " Bible book name in Bible link"), details: _totalLink13, excerpt: _optionalB3, location: ourLocation });}}_linkBookCode5 = _B === '..' ? bookID : _B;_linkChapterInt4 = (0, _utilities.ourParseInt)(_C7), _linkVerseInt5 = (0, _utilities.ourParseInt)(_V8);try {if ((0, _utilities.ourParseInt)(_C6) !== _linkChapterInt4) addNoticePartial({ priority: 743, message: "Chapter numbers of markdown Bible link don’t match", details: "".concat(_C6, " vs ").concat(_linkChapterInt4), excerpt: _totalLink13, location: ourLocation });} catch (ccError) {console.error("TN Link Check2b couldn\u2019t compare chapter numbers for ".concat(bookID, " ").concat(givenC, ":").concat(givenV, " ").concat(fieldName, " with ").concat(_C7, " from '").concat(fieldText, "': ").concat(ccError));}try {if ((0, _utilities.ourParseInt)(_V1a) !== _linkVerseInt5) addNoticePartial({ priority: 742, message: "Verse numbers of markdown Bible link don’t match", details: "".concat(_V1a, " vs ").concat(_linkVerseInt5), excerpt: _totalLink13, location: ourLocation });} catch (vvError) {console.error("TN Link Check2b couldn\u2019t compare verse numbers for ".concat(bookID, " ").concat(givenC, ":").concat(givenV, " ").concat(fieldName, " with ").concat(_C7, ":").concat(_V8, " from '").concat(fieldText, "': ").concat(vvError));}try {if ((0, _utilities.ourParseInt)(_V1b) <= (0, _utilities.ourParseInt)(_V1a)) addNoticePartial({ priority: 741, message: "Verse numbers of markdown Bible link range out of order", details: "".concat(_V1a, " to ").concat(_V1b), excerpt: _totalLink13, location: ourLocation });} catch (vvError) {console.error("TN Link Check2c couldn\u2019t compare verse numbers for ".concat(bookID, " ").concat(givenC, ":").concat(givenV, " ").concat(fieldName, " with ").concat(_C7, ":").concat(_V8, " from '").concat(fieldText, "': ").concat(vvError));}if (_linkBookCode5.length) {// then we know which Bible book this link is to
                // So we can check for valid C:V numbers
                _numChaptersThisBook5 = void 0, _numVersesThisChapter5 = void 0;(0, _utilities.logicAssert)(_linkBookCode5.toLowerCase() !== 'obs', "BCV_V_TO_THIS_BOOK_BIBLE_REGEX linkBookCode shouldn\u2019t be '".concat(_linkBookCode5, "' in notes-links-check"));try {_numChaptersThisBook5 = books.chaptersInBook(_linkBookCode5);} catch (tlcNCerror) {(0, _utilities.debugLog)("checkNotesLinksToOutside6 with linkBookCode '".concat(_linkBookCode5, "' got error: ").concat(tlcNCerror));_numChaptersThisBook5 = 0;}try {_numVersesThisChapter5 = books.versesInChapter(_linkBookCode5, _linkChapterInt4);} catch (tlcNVerror) {}if (!_linkChapterInt4 || _linkChapterInt4 < 1 || _linkChapterInt4 > _numChaptersThisBook5) addNoticePartial({ priority: 655, message: "Bad chapter number in markdown Bible link", details: "".concat(_linkBookCode5, " ").concat(_linkChapterInt4, " vs ").concat(_numChaptersThisBook5, " chapters"), excerpt: _totalLink13, location: ourLocation });else if (!_linkVerseInt5 || _linkVerseInt5 < 0 || _linkVerseInt5 > _numVersesThisChapter5) addNoticePartial({ priority: 653, message: "Bad verse number in markdown Bible link", details: "".concat(_linkBookCode5, " ").concat(_linkChapterInt4, ":").concat(_linkVerseInt5, " vs ").concat(_numVersesThisChapter5, " verses"), excerpt: _totalLink13, location: ourLocation });}} // Check for this-book Bible links like [Revelation 3:11-12](../03/11.md)
            while (regexResultArray = BCV_V_TO_THIS_CHAPTER_BIBLE_REGEX.exec(fieldText)) {// debugLog(`  checkNotesLinksToOutside BCV_V_TO_THIS_CHAPTER_BIBLE_REGEX regexResultArray(${regexResultArray.length})=${JSON.stringify(regexResultArray)}`);
              thisChapterBibleLinkCount1 += 1; //parameterAssert(regexResultArray.length === 7, `BCV_V_TO_THIS_CHAPTER_BIBLE_REGEX expected 7 fields (not ${regexResultArray.length})`);
              _regexResultArray29 = regexResultArray, _regexResultArray30 = (0, _slicedToArray2.default)(_regexResultArray29, 7), _totalLink14 = _regexResultArray30[0], _optionalN4 = _regexResultArray30[1], _optionalB4 = _regexResultArray30[2], _C8 = _regexResultArray30[3], _V1a2 = _regexResultArray30[4], _V1b2 = _regexResultArray30[5], _V9 = _regexResultArray30[6];processedLinkList.push(_totalLink14); // Save the full link
              if (_optionalN4) {//parameterAssert(optionalB1, `Should have book name as well as number '${optionalN1}'`);
              }if (_optionalB4) {_optionalB4 = "".concat(_optionalN4).concat(_optionalB4).trim(); // e.g., 1 Timothy
                if (defaultLanguageCode === 'en') {// should be able to check the book name
                  _checkResult4 = books.isGoodEnglishBookName(_optionalB4); // debugLog(optionalB1, "isGoodEnglishBookName checkResult", checkResult);
                  if (_checkResult4 === undefined || _checkResult4 === false) // NOTE: Our English bookname table has 'Song of Songs'
                    addNoticePartial({ priority: _optionalB4 === 'Song of Solomon' ? 43 : 143, message: "".concat(_optionalB4 === 'Song of Solomon' ? 'Unexpected' : 'Unknown', " Bible book name in Bible link"), details: _totalLink14, excerpt: _optionalB4, location: ourLocation });}}_linkBookCode6 = bookID;_linkVerseInt6 = (0, _utilities.ourParseInt)(_V9);try {if ((0, _utilities.ourParseInt)(_V1a2) !== _linkVerseInt6) addNoticePartial({ priority: 742, message: "Verse numbers of markdown Bible link don’t match", details: "".concat(_V1a2, " vs ").concat(_linkVerseInt6), excerpt: _totalLink14, location: ourLocation });} catch (vvError) {console.error("TN Link Check2d couldn\u2019t compare verse numbers for ".concat(bookID, " ").concat(givenC, ":").concat(givenV, " ").concat(fieldName, " with ").concat(_C8, ":").concat(_V9, " from '").concat(fieldText, "': ").concat(vvError));}try {if ((0, _utilities.ourParseInt)(_V1b2) <= (0, _utilities.ourParseInt)(_V1a2)) addNoticePartial({ priority: 741, message: "Verse numbers of markdown Bible link range out of order", details: "".concat(_V1a2, " to ").concat(_V1b2), excerpt: _totalLink14, location: ourLocation });} catch (vvError) {console.error("TN Link Check2e couldn\u2019t compare verse numbers for ".concat(bookID, " ").concat(givenC, ":").concat(givenV, " ").concat(fieldName, " with ").concat(_C8, ":").concat(_V9, " from '").concat(fieldText, "': ").concat(vvError));}if (_linkBookCode6.length) {// then we know which Bible book this link is to
                // So we can check for valid C:V numbers
                _numVersesThisChapter6 = void 0;(0, _utilities.logicAssert)(_linkBookCode6.toLowerCase() !== 'obs', "BCV_V_TO_THIS_CHAPTER_BIBLE_REGEX linkBookCode shouldn\u2019t be '".concat(_linkBookCode6, "' in notes-links-check")); // try {
                //     numChaptersThisBook = books.chaptersInBook(linkBookCode);
                // } catch (tlcNCerror) { }
                try {_numVersesThisChapter6 = books.versesInChapter(_linkBookCode6, givenC);} catch (tlcNVerror) {}if (!_linkVerseInt6 || _linkVerseInt6 < 0 || _linkVerseInt6 > _numVersesThisChapter6) addNoticePartial({ priority: 653, message: "Bad verse number in markdown Bible link", details: "".concat(_linkBookCode6, " ").concat(givenC, ":").concat(_linkVerseInt6, " vs ").concat(_numVersesThisChapter6, " verses"), excerpt: _totalLink14, location: ourLocation });}} // Check for other book Bible links like [Revelation 3:11](rev/03/11.md)
            while (regexResultArray = BIBLE_REGEX_OTHER_BOOK_ABSOLUTE.exec(fieldText)) {// debugLog(`  checkNotesLinksToOutside BIBLE_REGEX_OTHER_BOOK_ABSOLUTE regexResultArray(${regexResultArray.length})=${JSON.stringify(regexResultArray)}`);
              otherBookBibleLinkCount1 += 1; //parameterAssert(regexResultArray.length === 8, `BIBLE_REGEX_OTHER_BOOK_ABSOLUTE expected 8 fields (not ${regexResultArray.length})`);
              _regexResultArray31 = regexResultArray, _regexResultArray32 = (0, _slicedToArray2.default)(_regexResultArray31, 8), _totalLink15 = _regexResultArray32[0], _optionalN5 = _regexResultArray32[1], _optionalB5 = _regexResultArray32[2], _C9 = _regexResultArray32[3], _V10 = _regexResultArray32[4], _B2 = _regexResultArray32[5], _C10 = _regexResultArray32[6], _V11 = _regexResultArray32[7];processedLinkList.push(_totalLink15); // Save the full link
              if (_optionalN5) {//parameterAssert(optionalB1, `Should have book name as well as number '${optionalN1}'`);
              }if (_optionalB5) {_optionalB5 = "".concat(_optionalN5).concat(_optionalB5).trim(); // e.g., 1 Timothy
                if (defaultLanguageCode === 'en') {// should be able to check the book name
                  _checkResult5 = books.isGoodEnglishBookName(_optionalB5); // debugLog(optionalB1, "isGoodEnglishBookName checkResult", checkResult);
                  if (_checkResult5 === undefined || _checkResult5 === false) // NOTE: Our English bookname table has 'Song of Songs'
                    addNoticePartial({ priority: _optionalB5 === 'Song of Solomon' ? 43 : 143, message: "".concat(_optionalB5 === 'Song of Solomon' ? 'Unexpected' : 'Unknown', " Bible book name in Bible link"), details: _totalLink15, excerpt: _optionalB5, location: ourLocation });}}_linkBookCode7 = _B2 === '..' ? bookID : _B2;_linkChapterInt5 = (0, _utilities.ourParseInt)(_C10), _linkVerseInt7 = (0, _utilities.ourParseInt)(_V11);try {if ((0, _utilities.ourParseInt)(_C9) !== _linkChapterInt5) addNoticePartial({ priority: 743, message: "Chapter numbers of markdown Bible link don’t match", details: "".concat(_C9, " vs ").concat(_linkChapterInt5), excerpt: _totalLink15, location: ourLocation });} catch (ccError) {console.error("TN Link Check3 couldn\u2019t compare chapter numbers for ".concat(bookID, " ").concat(givenC, ":").concat(givenV, " ").concat(fieldName, " with ").concat(_C9, " from '").concat(fieldText, "': ").concat(ccError));}try {if ((0, _utilities.ourParseInt)(_V10) !== _linkVerseInt7) addNoticePartial({ priority: 742, message: "Verse numbers of markdown Bible link don’t match", details: "".concat(_V10, " vs ").concat(_linkVerseInt7), excerpt: _totalLink15, location: ourLocation });} catch (vvError) {console.error("TN Link Check3 couldn\u2019t compare verse numbers for ".concat(bookID, " ").concat(givenC, ":").concat(givenV, " ").concat(fieldName, " with ").concat(_C9, ":").concat(_V10, " from '").concat(fieldText, "': ").concat(vvError));}if (_linkBookCode7.length) {// then we know which Bible book this link is to
                // So we can check for valid C:V numbers
                _numChaptersThisBook6 = void 0, _numVersesThisChapter7 = void 0;(0, _utilities.logicAssert)(_linkBookCode7.toLowerCase() !== 'obs', "BIBLE_REGEX_OTHER_BOOK_ABSOLUTE linkBookCode shouldn\u2019t be '".concat(_linkBookCode7, "' in notes-links-check"));try {_numChaptersThisBook6 = books.chaptersInBook(_linkBookCode7);} catch (tlcNCerror) {(0, _utilities.debugLog)("checkNotesLinksToOutside8 with linkBookCode '".concat(_linkBookCode7, "' got error: ").concat(tlcNCerror));_numChaptersThisBook6 = 0;}try {_numVersesThisChapter7 = books.versesInChapter(_linkBookCode7, _linkChapterInt5);} catch (tlcNVerror) {}if (!_linkChapterInt5 || _linkChapterInt5 < 1 || _linkChapterInt5 > _numChaptersThisBook6) addNoticePartial({ priority: 655, message: "Bad chapter number in markdown Bible link", details: "".concat(_linkBookCode7, " ").concat(_linkChapterInt5, " vs ").concat(_numChaptersThisBook6, " chapters"), excerpt: _totalLink15, location: ourLocation });else if (!_linkVerseInt7 || _linkVerseInt7 < 0 || _linkVerseInt7 > _numVersesThisChapter7) addNoticePartial({ priority: 653, message: "Bad verse number in markdown Bible link", details: "".concat(_linkBookCode7, " ").concat(_linkChapterInt5, ":").concat(_linkVerseInt7, " vs ").concat(_numVersesThisChapter7, " verses"), excerpt: _totalLink15, location: ourLocation });}} // Check for other book Bible links like [Revelation 3:11](../../rev/03/11.md)
            while (regexResultArray = BIBLE_REGEX_OTHER_BOOK_RELATIVE.exec(fieldText)) {// debugLog(`  checkNotesLinksToOutside BIBLE_REGEX_OTHER_BOOK_RELATIVE regexResultArray(${regexResultArray.length})=${JSON.stringify(regexResultArray)}`);
              otherBookBibleLinkCount1 += 1; //parameterAssert(regexResultArray.length === 8, `BIBLE_REGEX_OTHER_BOOK_RELATIVE expected 8 fields (not ${regexResultArray.length})`);
              _regexResultArray33 = regexResultArray, _regexResultArray34 = (0, _slicedToArray2.default)(_regexResultArray33, 8), _totalLink16 = _regexResultArray34[0], _optionalN6 = _regexResultArray34[1], _optionalB6 = _regexResultArray34[2], _C11 = _regexResultArray34[3], _V12 = _regexResultArray34[4], _B3 = _regexResultArray34[5], _C12 = _regexResultArray34[6], _V13 = _regexResultArray34[7];processedLinkList.push(_totalLink16); // Save the full link
              if (_optionalN6) {//parameterAssert(optionalB1, `Should have book name as well as number '${optionalN1}'`);
              }if (_optionalB6) {_optionalB6 = "".concat(_optionalN6).concat(_optionalB6).trim(); // e.g., 1 Timothy
                if (defaultLanguageCode === 'en') {// should be able to check the book name
                  _checkResult6 = books.isGoodEnglishBookName(_optionalB6); // debugLog(optionalB1, "isGoodEnglishBookName checkResult", checkResult);
                  if (_checkResult6 === undefined || _checkResult6 === false) // NOTE: Our English bookname table has 'Song of Songs'
                    addNoticePartial({ priority: _optionalB6 === 'Song of Solomon' ? 43 : 143, message: "".concat(_optionalB6 === 'Song of Solomon' ? 'Unexpected' : 'Unknown', " Bible book name in Bible link"), details: _totalLink16, excerpt: _optionalB6, location: ourLocation });}}_linkBookCode8 = _B3 === '..' ? bookID : _B3;_linkChapterInt6 = (0, _utilities.ourParseInt)(_C12), _linkVerseInt8 = (0, _utilities.ourParseInt)(_V13);try {if ((0, _utilities.ourParseInt)(_C11) !== _linkChapterInt6) addNoticePartial({ priority: 743, message: "Chapter numbers of markdown Bible link don’t match", details: "".concat(_C11, " vs ").concat(_linkChapterInt6), excerpt: _totalLink16, location: ourLocation });} catch (ccError) {console.error("TN Link Check3 couldn\u2019t compare chapter numbers for ".concat(bookID, " ").concat(givenC, ":").concat(givenV, " ").concat(fieldName, " with ").concat(_C11, " from '").concat(fieldText, "': ").concat(ccError));}try {if ((0, _utilities.ourParseInt)(_V12) !== _linkVerseInt8) addNoticePartial({ priority: 742, message: "Verse numbers of markdown Bible link don’t match", details: "".concat(_V12, " vs ").concat(_linkVerseInt8), excerpt: _totalLink16, location: ourLocation });} catch (vvError) {console.error("TN Link Check3 couldn\u2019t compare verse numbers for ".concat(bookID, " ").concat(givenC, ":").concat(givenV, " ").concat(fieldName, " with ").concat(_C11, ":").concat(_V12, " from '").concat(fieldText, "': ").concat(vvError));}if (_linkBookCode8.length) {// then we know which Bible book this link is to
                // So we can check for valid C:V numbers
                _numChaptersThisBook7 = void 0, _numVersesThisChapter8 = void 0;(0, _utilities.logicAssert)(_linkBookCode8.toLowerCase() !== 'obs', "BIBLE_REGEX_OTHER_BOOK_RELATIVE linkBookCode shouldn\u2019t be '".concat(_linkBookCode8, "' in notes-links-check"));try {_numChaptersThisBook7 = books.chaptersInBook(_linkBookCode8);} catch (tlcNCerror) {(0, _utilities.debugLog)("checkNotesLinksToOutside9 with linkBookCode '".concat(_linkBookCode8, "' got error: ").concat(tlcNCerror));_numChaptersThisBook7 = 0;}try {_numVersesThisChapter8 = books.versesInChapter(_linkBookCode8, _linkChapterInt6);} catch (tlcNVerror) {}if (!_linkChapterInt6 || _linkChapterInt6 < 1 || _linkChapterInt6 > _numChaptersThisBook7) addNoticePartial({ priority: 655, message: "Bad chapter number in markdown Bible link", details: "".concat(_linkBookCode8, " ").concat(_linkChapterInt6, " vs ").concat(_numChaptersThisBook7, " chapters"), excerpt: _totalLink16, location: ourLocation });else if (!_linkVerseInt8 || _linkVerseInt8 < 0 || _linkVerseInt8 > _numVersesThisChapter8) addNoticePartial({ priority: 653, message: "Bad verse number in markdown Bible link", details: "".concat(_linkBookCode8, " ").concat(_linkChapterInt6, ":").concat(_linkVerseInt8, " vs ").concat(_numVersesThisChapter8, " verses"), excerpt: _totalLink16, location: ourLocation });}} // Check for TN links like [Titus 3:11](../03/11/zd2d)
            while (regexResultArray = TN_REGEX.exec(fieldText)) {// debugLog(`  checkNotesLinksToOutside TN_REGEX regexResultArray(${regexResultArray.length})=${JSON.stringify(regexResultArray)}`);
              TNLinkCount1 += 1; //parameterAssert(regexResultArray.length === 9, `TN_REGEX expected 9 fields (not ${regexResultArray.length})`);
              // eslint-disable-next-line no-unused-vars
              _regexResultArray35 = regexResultArray, _regexResultArray36 = (0, _slicedToArray2.default)(_regexResultArray35, 9), _totalLink17 = _regexResultArray36[0], _optionalN7 = _regexResultArray36[1], _optionalB7 = _regexResultArray36[2], _C13 = _regexResultArray36[3], _V14 = _regexResultArray36[4], _B4 = _regexResultArray36[5], _C14 = _regexResultArray36[6], _V15 = _regexResultArray36[7], _noteID2 = _regexResultArray36[8];processedLinkList.push(_totalLink17); // Save the full link
              if (_optionalN7) {//parameterAssert(optionalB1, `Should have book name as well as number '${optionalN1}'`);
              }if (_optionalB7) {_optionalB7 = "".concat(_optionalN7).concat(_optionalB7).trim(); // e.g., 1 Timothy
                if (defaultLanguageCode === 'en') {// should be able to check the book name
                  _checkResult7 = books.isGoodEnglishBookName(_optionalB7); // debugLog(optionalB1, "isGoodEnglishBookName checkResult", checkResult);
                  if (_checkResult7 === undefined || _checkResult7 === false) addNoticePartial({ priority: 144, message: "Unknown Bible book name in TN link", details: _totalLink17, excerpt: _optionalB7, location: ourLocation });}}_linkBookCode9 = _B4 === '..' ? bookID : _B4;_linkChapterInt7 = (0, _utilities.ourParseInt)(_C14), _linkVerseInt9 = (0, _utilities.ourParseInt)(_V15);try {if ((0, _utilities.ourParseInt)(_C13) !== _linkChapterInt7) addNoticePartial({ priority: 743, message: "Chapter numbers of markdown TN link don’t match", details: "".concat(_C13, " vs ").concat(_linkChapterInt7), excerpt: _totalLink17, location: ourLocation });} catch (ccError) {console.error("TN Link Check3b couldn\u2019t compare chapter numbers for ".concat(bookID, " ").concat(givenC, ":").concat(givenV, " ").concat(fieldName, " with ").concat(_C13, " from '").concat(fieldText, "': ").concat(ccError));}try {if ((0, _utilities.ourParseInt)(_V14) !== _linkVerseInt9) addNoticePartial({ priority: 752, message: "Verse numbers of markdown TN link don’t match", details: "".concat(_V14, " vs ").concat(_linkVerseInt9), excerpt: _totalLink17, location: ourLocation });} catch (vvError) {console.error("TN Link Check3b couldn\u2019t compare verse numbers for ".concat(bookID, " ").concat(givenC, ":").concat(givenV, " ").concat(fieldName, " with ").concat(_C13, ":").concat(_V14, " from '").concat(fieldText, "': ").concat(vvError));}if (_linkBookCode9.length) {// then we know which Bible book this link is to
                // So we can check for valid C:V numbers
                _numChaptersThisBook8 = void 0, _numVersesThisChapter9 = void 0;(0, _utilities.logicAssert)(_linkBookCode9.toLowerCase() !== 'obs', "TN_REGEX linkBookCode shouldn\u2019t be '".concat(_linkBookCode9, "' in notes-links-check"));try {_numChaptersThisBook8 = books.chaptersInBook(_linkBookCode9);} catch (tlcNCerror) {(0, _utilities.debugLog)("checkNotesLinksToOutside10 with linkBookCode '".concat(_linkBookCode9, "' got error: ").concat(tlcNCerror));_numChaptersThisBook8 = 0;}try {_numVersesThisChapter9 = books.versesInChapter(_linkBookCode9, _linkChapterInt7);} catch (tlcNVerror) {}if (!_linkChapterInt7 || _linkChapterInt7 < 1 || _linkChapterInt7 > _numChaptersThisBook8) addNoticePartial({ priority: 656, message: "Bad chapter number in markdown TN link", details: "".concat(_linkBookCode9, " ").concat(_linkChapterInt7, " vs ").concat(_numChaptersThisBook8, " chapters"), excerpt: _totalLink17, location: ourLocation });else if (!_linkVerseInt9 || _linkVerseInt9 < 0 || _linkVerseInt9 > _numVersesThisChapter9) addNoticePartial({ priority: 654, message: "Bad verse number in markdown TN link", details: "".concat(_linkBookCode9, " ").concat(_linkChapterInt7, ":").concat(_linkVerseInt9, " vs ").concat(_numVersesThisChapter9, " verses"), excerpt: _totalLink17, location: ourLocation });} // TODO: We should see if we can find the correct note
            } // Check for simple display links like [ULT](https://something)
            // if (fieldText.indexOf('http') !== -1) debugLog(`Checking for http links in '${fieldName}' '${fieldText}'`);
          case 308:if (!(regexResultArray = SIMPLE_DISPLAY_LINK_REGEX.exec(fieldText))) {_context4.next = 347;break;} // debugLog(`  checkNotesLinksToOutside SIMPLE_DISPLAY_LINK_REGEX regexResultArray(${regexResultArray.length})=${JSON.stringify(regexResultArray)}`);
            generalLinkCount1 += 1; //parameterAssert(regexResultArray.length === 3, `SIMPLE_DISPLAY_LINK_REGEX expected 3 fields (not ${regexResultArray.length})`);
            // eslint-disable-next-line no-unused-vars
            _regexResultArray37 = regexResultArray, _regexResultArray38 = (0, _slicedToArray2.default)(_regexResultArray37, 3), _totalLink18 = _regexResultArray38[0], displayText = _regexResultArray38[1], uri = _regexResultArray38[2];processedLinkList.push(_totalLink18); // Save the full link
            if (checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.disableAllLinkFetchingFlag) {_context4.next = 345;break;}dummyPathParameters = { username: uri, repository: '', path: '', branch: '' };_context4.next = 316;return alreadyChecked(dummyPathParameters);case 316:_context4.t11 = _context4.sent;if (!(_context4.t11 !== true)) {_context4.next = 344;break;} // debugLog(`checkNotesLinksToOutside general link check needs to check: ${uri}`);
            serverString = uri.replace('://', '!!!').split('/')[0].replace('!!!', '://').toLowerCase(); // Get the bit before any forward slashes
            // NOTE: These message strings must match RenderProcessedResults.js
            if (!(!serverString.endsWith('door43.org') && !serverString.endsWith('unfoldingword.org') && !serverString.endsWith('ufw.io'))) {_context4.next = 323;break;} // don't try to fetch general links
            addNoticePartial({ priority: 32, message: "Untested general/outside link", details: "please manually double-check link—probably no problem", excerpt: _totalLink18, location: ourLocation });_context4.next = 342;break;case 323: // Try to fetch general links
            generalFileContent = void 0, hadError = false;_context4.prev = 324;_context4.next = 327;return fetch(uri);case 327:response = _context4.sent;if (!response.ok) {_context4.next = 334;break;}_context4.next = 331;return response.text();case 331:generalFileContent = _context4.sent;_context4.next = 335;break;case 334:throw new Error("Our Network error: ".concat(response.statusCode));case 335:_context4.next = 341;break;case 337:_context4.prev = 337;_context4.t12 = _context4["catch"](324); // debugLog(`checkNotesLinksToOutside(${bookID}, ${fieldName}, …) failed to load general ${uri}: ${trcGCerror}`);
            // TODO: Put back up to 882 if we can solve cross-origin problems
            addNoticePartial({ priority: 82, message: "Error loading general link", details: "please double-check link—there may be no problem", excerpt: _totalLink18, location: "".concat(ourLocation, ": ").concat(_context4.t12) });hadError = true;case 341:if (!hadError && !generalFileContent) addNoticePartial({ priority: 783, message: "Unable to find/load general link", excerpt: _totalLink18, location: ourLocation });else if (generalFileContent) {// we got the content of the general article
              if (generalFileContent.length < 10) addNoticePartial({ priority: 781, message: "Linked general article seems empty", excerpt: _totalLink18, location: ourLocation });}case 342:_context4.next = 344;return markAsChecked(dummyPathParameters);case 344: // else debugLog(`Had already checked '${displayText}' ${uri}`);
            if (uri.startsWith('http:')) addNoticePartial({ priority: 152, message: "Should http link be https", excerpt: _totalLink18, location: ourLocation });case 345:_context4.next = 308;break;case 347: // Check for additional links that we can’t explain
            // if (processedLinkList.length) debugLog(`processedLinkList (${processedLinkList.length}) = ${JSON.stringify(processedLinkList)}`);
            linkCount1 = thisChapterBibleLinkCount1 + thisVerseBibleLinkCount1 + thisBookBibleLinkCount1 + otherBookBibleLinkCount1 + TNLinkCount1 + twLinkCount1 + taLinkCount1 + generalLinkCount1;if (totalLinks1 > linkCount1) {leftoverLinksList1 = linksList1.filter(function (x) {return !processedLinkList.includes(x);}); // Delete links that we processed above
              // if (leftoverLinksList1.length) debugLog(`'${languageCode}', ${repoCode}, '${bookID}', '${fieldName}' processedLinkList (${processedLinkList.length}) = ${JSON.stringify(processedLinkList)}\n        linksList1(${linksList1.length})=${JSON.stringify(linksList1)}\nleftoverLinksList1(${leftoverLinksList1.length})=${JSON.stringify(leftoverLinksList1)}`);
              // if (leftoverLinksList1.length) debugLog(`'${languageCode}', ${repoCode}, '${bookID}', '${fieldName}' leftoverLinksList1 (${leftoverLinksList1.length}) = ${JSON.stringify(leftoverLinksList1)}`);
              addNoticePartial({ priority: 648, message: "Unusual [ ]( ) link(s)—not a recognized Bible or TA, TN, or TW link", details: "need to carefully check ".concat(leftoverLinksList1.length === 1 ? '"' + leftoverLinksList1[0] + '"' : JSON.stringify(leftoverLinksList1)), location: ourLocation });}linkCount2 = twLinkCount2 + taLinkCount2; // These are double-bracketed links, e.g., [[something]]
            // debugLog(`twLinkCount2 ${twLinkCount2} + taLinkCount2 ${taLinkCount2} = linkCount2 ${linkCount2}`);
            if (totalLinks2 > linkCount2) {leftoverLinksList2 = linksList2.filter(function (x) {return !processedLinkList.includes(x);}); // Delete links that we processed above
              // if (leftoverLinksList2.length) debugLog(`'${languageCode}', ${repoCode}, '${bookID}', '${fieldName}' processedLinkList (${processedLinkList.length}) = ${JSON.stringify(processedLinkList)}\n        linksList2(${linksList2.length})=${JSON.stringify(linksList2)}\nleftoverLinksList2(${leftoverLinksList2.length})=${JSON.stringify(leftoverLinksList2)}`);
              // if (leftoverLinksList2.length) debugLog(`'${languageCode}', ${repoCode}, '${bookID}', '${fieldName}' leftoverLinksList2 (${leftoverLinksList2.length}) = ${JSON.stringify(leftoverLinksList2)}`);
              addNoticePartial({ priority: 649, message: "Unusual [[ ]] link(s)—not a recognized TA or TW link", details: "need to carefully check ".concat(leftoverLinksList2.length === 1 ? '"' + leftoverLinksList2[0] + '"' : JSON.stringify(leftoverLinksList2)), location: ourLocation });} // Check for badly formed links (not processed by the above code)
            // Check for badly formed [[ ]] links
            leftCount = (0, _textHandlingFunctions.countOccurrences)(fieldText, '[[');rightCount = (0, _textHandlingFunctions.countOccurrences)(fieldText, ']]');if (leftCount !== rightCount) addNoticePartial({ priority: 845, message: "Mismatched [[ ]] link characters", details: "left=".concat(leftCount.toLocaleString(), ", right=").concat(rightCount.toLocaleString()), location: ourLocation });else {leftCount = (0, _textHandlingFunctions.countOccurrences)(fieldText, '[[rc://');if (leftCount !== rightCount) addNoticePartial({ priority: 844, message: "Mismatched [[rc:// ]] link characters", details: "left=".concat(leftCount.toLocaleString(), ", right=").concat(rightCount.toLocaleString()), location: ourLocation });} // Check for badly formed [ ]( ) links
            leftCount = (0, _textHandlingFunctions.countOccurrences)(fieldText, '[');middleCount = (0, _textHandlingFunctions.countOccurrences)(fieldText, '](');rightCount = (0, _textHandlingFunctions.countOccurrences)(fieldText, ')');if (leftCount < middleCount || rightCount < middleCount) addNoticePartial({ priority: 843, message: "Mismatched [ ]( ) link characters", details: "left=".concat(leftCount.toLocaleString(), ", middle=").concat(middleCount.toLocaleString(), ", right=").concat(rightCount.toLocaleString()), location: ourLocation }); // functionLog(`checkNotesLinksToOutside is returning ${JSON.stringify(ctarResult)}`);
            return _context4.abrupt("return", ctarResult);case 359:case "end":return _context4.stop();}}}, _callee4, null, [[43, 50], [65, 72], [93, 99], [117, 123], [168, 174], [190, 196], [214, 220], [262, 268], [324, 337]]);}));return _checkNotesLinksToOutside.apply(this, arguments);}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,