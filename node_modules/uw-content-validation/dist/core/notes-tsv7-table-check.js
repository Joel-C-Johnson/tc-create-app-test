"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _typeof = require("@babel/runtime/helpers/typeof");Object.defineProperty(exports, "__esModule", { value: true });exports.checkNotesTSV7Table = checkNotesTSV7Table;var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var books = _interopRequireWildcard(require("./books/books"));
var _defaults = require("./defaults");
var _notesTsv7RowCheck = require("./notes-tsv7-row-check");
var _disabledNotices = require("./disabled-notices");

var _utilities = require("./utilities");function _getRequireWildcardCache(nodeInterop) {if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {return nodeInterop ? cacheNodeInterop : cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj, nodeInterop) {if (!nodeInterop && obj && obj.__esModule) {return obj;}if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}function _createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {(0, _defineProperty2.default)(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}


var NOTES_TABLE_VALIDATOR_VERSION_STRING = '0.3.5';

var NUM_EXPECTED_NOTES_TSV_FIELDS = 7; // so expects 6 tabs per line
var EXPECTED_NOTES_HEADING_LINE = 'Reference\tID\tTags\tSupportReference\tQuote\tOccurrence\tNote';


/**
 *
 * @param {string} languageCode
 * @param {string} repoCode -- 'TN' or 'SN'
 * @param {string} bookID
 * @param {string} filename
 * @param {string} tableText
 * @param {string} givenLocation
 * @param {Object} checkingOptions
 */function
checkNotesTSV7Table(_x, _x2, _x3, _x4, _x5, _x6, _x7) {return _checkNotesTSV7Table.apply(this, arguments);}



















































































































































































































































// end of checkNotesTSV7Table function
function _checkNotesTSV7Table() {_checkNotesTSV7Table = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(languageCode, repoCode, bookID, filename, tableText, givenLocation, checkingOptions) {var ourLocation, carResult, addSuccessMessage, addNoticePartial, excerptLength, lowercaseBookID, numChaptersThisBook, lines, lastC, lastV, rowIDListForVerse, uniqueRowListForVerse, numVersesThisChapter, n, fields, _fields, reference, rowID, tags, supportReference, quote, occurrence, note, _reference$split, _reference$split2, C, V, drResultObject, _iterator, _step, drNoticeEntry, _iterator2, _step2, checkedRepoName, _iterator3, _step3, checkedFilenameExtension, uniqueID, intC, lastintC, intV, lastintV, _reference, _C, _V, _rowID, _reference$split3, _reference$split4;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:addNoticePartial = function _addNoticePartial(noticeObject) {// functionLog(`checkNotesTSV7Table notice: (priority=${priority}) ${message}${characterIndex > 0 ? ` (at character ${characterIndex})` : ""}${excerpt ? ` ${excerpt}` : ""}${location}`);
              //parameterAssert(noticeObject.priority !== undefined, "ATSV addNoticePartial: 'priority' parameter should be defined");
              //parameterAssert(typeof noticeObject.priority === 'number', `TSV addNoticePartial: 'priority' parameter should be a number not a '${typeof noticeObject.priority}': ${noticeObject.priority}`);
              //parameterAssert(noticeObject.message !== undefined, "ATSV addNoticePartial: 'message' parameter should be defined");
              //parameterAssert(typeof noticeObject.message === 'string', `TSV addNoticePartial: 'message' parameter should be a string not a '${typeof noticeObject.message}': ${noticeObject.message}`);
              // //parameterAssert(C !== undefined, "ATSV addNoticePartial: 'C' parameter should be defined");
              if (noticeObject.C) {//parameterAssert(typeof noticeObject.C === 'string', `TSV addNoticePartial: 'C' parameter should be a string not a '${typeof noticeObject.C}': ${noticeObject.C}`);
              } // //parameterAssert(V !== undefined, "ATSV addNoticePartial: 'V' parameter should be defined");
              if (noticeObject.V) {//parameterAssert(typeof noticeObject.V === 'string', `TSV addNoticePartial: 'V' parameter should be a string not a '${typeof noticeObject.V}': ${noticeObject.V}`);
              } // //parameterAssert(characterIndex !== undefined, "ATSV addNoticePartial: 'characterIndex' parameter should be defined");
              if (noticeObject.characterIndex) {//parameterAssert(typeof noticeObject.characterIndex === 'number', `TSV addNoticePartial: 'characterIndex' parameter should be a number not a '${typeof noticeObject.characterIndex}': ${noticeObject.characterIndex}`);
              } // //parameterAssert(excerpt !== undefined, "ATSV addNoticePartial: 'excerpt' parameter should be defined");
              if (noticeObject.excerpt) {//parameterAssert(typeof noticeObject.excerpt === 'string', `TSV addNoticePartial: 'excerpt' parameter should be a string not a '${typeof noticeObject.excerpt}': ${noticeObject.excerpt}`);
              } //parameterAssert(noticeObject.location !== undefined, "ATSV addNoticePartial: 'location' parameter should be defined");
              //parameterAssert(typeof noticeObject.location === 'string', `TSV addNoticePartial: 'location' parameter should be a string not a '${typeof noticeObject.location}': ${noticeObject.location}`);
              if (noticeObject.debugChain) noticeObject.debugChain = "checkNotesTSV7Table ".concat(noticeObject.debugChain);carResult.noticeList.push(_objectSpread(_objectSpread({}, noticeObject), {}, { bookID: bookID, filename: filename, repoCode: repoCode }));};addSuccessMessage = function _addSuccessMessage(successString) {// functionLog(`checkNotesTSV7Table success: ${successString}`);
              carResult.successList.push(successString);}; /* This function is optimised for checking the entire file, i.e., all rows.
               It also has the advantage of being able to compare one row with the previous one.
              bookID is a three-character UPPERCASE USFM book identifier or 'OBS'.
              Returns a result object containing a successList and a noticeList
             */ // functionLog(`checkNotesTSV7Table(${languageCode}, ${repoCode}, ${bookID}, ${tableText.length}, ${givenLocation},${JSON.stringify(checkingOptions)})â€¦`);
            //parameterAssert(languageCode !== undefined, "checkNotesTSV7Table: 'languageCode' parameter should be defined");
            //parameterAssert(typeof languageCode === 'string', `checkNotesTSV7Table: 'languageCode' parameter should be a string not a '${typeof languageCode}'`);
            //parameterAssert(repoCode.endsWith('TN') || repoCode.endsWith('TN2') || repoCode.endsWith('SN'), `checkNotesTSV7Table: repoCode expected to end with 'TN', 'TN2', or 'SN' not '${repoCode}'`);
            //parameterAssert(bookID !== undefined, "checkNotesTSV7Table: 'bookID' parameter should be defined");
            //parameterAssert(typeof bookID === 'string', `checkNotesTSV7Table: 'bookID' parameter should be a string not a '${typeof bookID}'`);
            //parameterAssert(bookID.length === 3, `checkNotesTSV7Table: 'bookID' parameter should be three characters long not ${bookID.length}`);
            //parameterAssert(bookID.toUpperCase() === bookID, `checkNotesTSV7Table: 'bookID' parameter should be UPPERCASE not '${bookID}'`);
            //parameterAssert(bookID === 'OBS' || books.isValidBookID(bookID), `checkNotesTSV7Table: '${bookID}' is not a valid USFM book identifier`);
            //parameterAssert(givenLocation !== undefined, "checkNotesTSV7Table: 'givenLocation' parameter should be defined");
            //parameterAssert(typeof givenLocation === 'string', `checkNotesTSV7Table: 'givenLocation' parameter should be a string not a '${typeof givenLocation}'`);
            ourLocation = givenLocation;if (ourLocation && ourLocation[0] !== ' ') ourLocation = " ".concat(ourLocation);carResult = { successList: [], noticeList: [] };try {excerptLength = checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.excerptLength;} catch (ttcError) {}if (typeof excerptLength !== 'number' || isNaN(excerptLength)) {excerptLength = _defaults.DEFAULT_EXCERPT_LENGTH; // debugLog(`Using default excerptLength=${excerptLength}`);
            } // else
            // debugLog(`Using supplied excerptLength=${excerptLength}`, `cf. default=${DEFAULT_EXCERPT_LENGTH}`);
            // const excerptHalfLength = Math.floor(excerptLength / 2); // rounded down
            // const excerptHalfLengthPlus = Math.floor((excerptLength + 1) / 2); // rounded up
            // debugLog(`Using excerptHalfLength=${excerptHalfLength}`, `excerptHalfLengthPlus=${excerptHalfLengthPlus}`);
            lowercaseBookID = bookID.toLowerCase();numChaptersThisBook = 0;if (bookID === 'OBS') numChaptersThisBook = 50; // There's 50 Open Bible Stories
            else {//parameterAssert(lowercaseBookID !== 'obs', "Shouldnâ€™t happen in checkNotesTSV7Table");
                try {numChaptersThisBook = books.chaptersInBook(bookID);} catch (_unused) {if (!books.isValidBookID(bookID)) // must not be in FRT, BAK, etc.
                    addNoticePartial({ priority: 747, message: "Bad function call: should be given a valid book abbreviation", excerpt: bookID, location: " (not '".concat(bookID, "')").concat(ourLocation) });}}lines = tableText.split('\n'); // debugLog(`  '${location}' has ${lines.length.toLocaleString()} total lines (expecting ${NUM_EXPECTED_TN_FIELDS} fields in each line)`);
            lastC = '', lastV = '';rowIDListForVerse = [], uniqueRowListForVerse = [];numVersesThisChapter = 0;n = 0;case 15:if (!(n < lines.length)) {_context.next = 47;break;}if (!(n === 0)) {_context.next = 20;break;}if (lines[0] === EXPECTED_NOTES_HEADING_LINE) addSuccessMessage("Checked TSV header ".concat(ourLocation));else addNoticePartial({ priority: 988, message: "Bad TSV header", details: "expected '".concat(EXPECTED_NOTES_HEADING_LINE, "'"), excerpt: lines[0], lineNumber: 1, location: ourLocation });_context.next = 44;break;case 20:fields = lines[n].split('\t');if (!(fields.length === NUM_EXPECTED_NOTES_TSV_FIELDS)) {_context.next = 43;break;} // eslint-disable-next-line no-unused-vars
            _fields = (0, _slicedToArray2.default)(fields, 7), reference = _fields[0], rowID = _fields[1], tags = _fields[2], supportReference = _fields[3], quote = _fields[4], occurrence = _fields[5], note = _fields[6];_reference$split = reference.split(':'), _reference$split2 = (0, _slicedToArray2.default)(_reference$split, 2), C = _reference$split2[0], V = _reference$split2[1]; // Use the row check to do most basic checks
            _context.next = 26;return (0, _notesTsv7RowCheck.checkNotesTSV7DataRow)(languageCode, repoCode, lines[n], bookID, C, V, ourLocation, checkingOptions);case 26:drResultObject = _context.sent; // Choose only ONE of the following
            // This is the fast way of append the results from this field
            // result.noticeList = result.noticeList.concat(firstResult.noticeList);
            // If we need to put everything through addNoticePartial, e.g., for debugging or filtering
            //  process results line by line
            _iterator = _createForOfIteratorHelper(drResultObject.noticeList);try {for (_iterator.s(); !(_step = _iterator.n()).done;) {drNoticeEntry = _step.value;if (drNoticeEntry.extra) // it must be an indirect check on a TA or TW article from a TN2 check
                  carResult.noticeList.push(drNoticeEntry); // Just copy the complete notice as is
                else if (drNoticeEntry.priority !== 931) // We already caught Missing row ID
                    addNoticePartial(_objectSpread(_objectSpread({}, drNoticeEntry), {}, { lineNumber: n + 1 }));} // The following is needed coz we might be checking the linked TA and/or TW articles
            } catch (err) {_iterator.e(err);} finally {_iterator.f();}if (drResultObject.checkedFileCount && drResultObject.checkedFileCount > 0) if (typeof carResult.checkedFileCount === 'number') carResult.checkedFileCount += drResultObject.checkedFileCount;else carResult.checkedFileCount = drResultObject.checkedFileCount;if (drResultObject.checkedFilesizes && drResultObject.checkedFilesizes > 0) if (typeof carResult.checkedFilesizes === 'number') carResult.checkedFilesizes += drResultObject.checkedFilesizes;else carResult.checkedFilesizes = drResultObject.checkedFilesizes;if (drResultObject.checkedRepoNames && drResultObject.checkedRepoNames.length > 0) {_iterator2 = _createForOfIteratorHelper(drResultObject.checkedRepoNames);try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {checkedRepoName = _step2.value;try {if (carResult.checkedRepoNames.indexOf(checkedRepoName) < 0) carResult.checkedRepoNames.push(checkedRepoName);} catch (_unused2) {carResult.checkedRepoNames = [checkedRepoName];}}} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}}if (drResultObject.checkedFilenameExtensions && drResultObject.checkedFilenameExtensions.length > 0) {_iterator3 = _createForOfIteratorHelper(drResultObject.checkedFilenameExtensions);try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {checkedFilenameExtension = _step3.value;try {if (carResult.checkedFilenameExtensions.indexOf(checkedFilenameExtension) < 0) carResult.checkedFilenameExtensions.push(checkedFilenameExtension);} catch (_unused3) {carResult.checkedFilenameExtensions = [checkedFilenameExtension];}}} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}} // if (ttResult.checkedFilenameExtensions) userLog("ttResult", JSON.stringify(ttResult));
            // So here we only have to check against the previous and next fields for out-of-order problems and duplicate problems
            if (C !== lastC || V !== lastV) {rowIDListForVerse = []; // ID's only need to be unique within each verse
              uniqueRowListForVerse = []; // Same for these
            } // TODO: Check if we need this at all (even though tC 3.0 canâ€™t display these "duplicate" notes)
            // Check for duplicate notes
            uniqueID = C + V + supportReference + quote + occurrence; // This combination should not be repeated
            // if (uniqueRowListForVerse.includes(uniqueID))
            //     addNoticePartial({ priority: 880, C, V, message: `Duplicate note`, rowID, lineNumber: n + 1, location: ourLocation });
            // if (uniqueRowListForVerse.includes(uniqueID))
            //     addNoticePartial({ priority: 80, C, V, message: `Note: tC 3.0 wonâ€™t display duplicate note`, rowID, lineNumber: n + 1, location: ourLocation });
            uniqueRowListForVerse.push(uniqueID);if (C) {if (C === 'front') {} else if (/^\d+$/.test(C)) {intC = Number(C);if (C !== lastC) if (lowercaseBookID === 'obs') numVersesThisChapter = 99; // Set to maximum expected number of frames
                else numVersesThisChapter = books.versesInChapter(lowercaseBookID, intC);if (intC === 0) addNoticePartial({ priority: 551, C: C, V: V, message: "Invalid zero chapter number", rowID: rowID, lineNumber: n + 1, excerpt: C, location: ourLocation });if (intC > numChaptersThisBook) addNoticePartial({ priority: 737, C: C, V: V, message: "Invalid large chapter number", rowID: rowID, lineNumber: n + 1, excerpt: C, location: ourLocation });if (/^\d+$/.test(lastC)) {lastintC = Number(lastC);if (intC < lastintC) addNoticePartial({ priority: 736, C: C, V: V, message: "Receding chapter number", details: "'".concat(C, "' after '").concat(lastC, "'"), rowID: rowID, lineNumber: n + 1, location: ourLocation });else if (intC > lastintC + 1) addNoticePartial({ priority: 735, C: C, V: V, message: "Advancing chapter number", details: "'".concat(C, "' after '").concat(lastC, "'").rowID, lineNumber: n + 1, location: ourLocation });}} else addNoticePartial({ priority: 734, C: C, V: V, message: "Bad chapter number", rowID: rowID, lineNumber: n + 1, location: ourLocation });} else addNoticePartial({ priority: 739, C: C, V: V, message: "Missing chapter number", rowID: rowID, lineNumber: n + 1, location: " after ".concat(lastC, ":").concat(V).concat(ourLocation) });if (V) {if (V === 'intro') {} else if (/^\d+$/.test(V)) {intV = Number(V);if (intV === 0 && bookID !== 'PSA') // Psalms have \d titles
                  addNoticePartial({ priority: 552, C: C, V: V, message: "Invalid zero verse number", details: "for chapter ".concat(C), rowID: rowID, lineNumber: n + 1, excerpt: V, location: ourLocation });if (intV > numVersesThisChapter) addNoticePartial({ priority: 734, C: C, V: V, message: "Invalid large verse number", details: "for chapter ".concat(C), rowID: rowID, lineNumber: n + 1, excerpt: V, location: ourLocation });if (/^\d+$/.test(lastV)) {lastintV = Number(lastV);if (C === lastC && intV < lastintV) addNoticePartial({ priority: 733, C: C, V: V, message: "Receding verse number", details: "'".concat(V, "' after '").concat(lastV, " for chapter ").concat(C), rowID: rowID, lineNumber: n + 1, excerpt: V, location: ourLocation }); // else if (intV > lastintV + 1)
                  //   addNoticePartial({priority:556, `Skipped verses with '${V}' verse number after '${lastV}'${withString}`);
                }} else addNoticePartial({ priority: 738, C: C, V: V, message: "Bad verse number", rowID: rowID, lineNumber: n + 1, location: ourLocation });} else addNoticePartial({ priority: 790, C: C, V: V, message: "Missing verse number", rowID: rowID, lineNumber: n + 1, location: " after ".concat(C, ":").concat(lastV).concat(ourLocation) });if (rowID) {if (rowIDListForVerse.includes(rowID)) addNoticePartial({ priority: 831, C: C, V: V, message: "Duplicate '".concat(rowID, "' ID"), fieldName: 'ID', rowID: rowID, lineNumber: n + 1, location: ourLocation });rowIDListForVerse.push(rowID);} else addNoticePartial({ priority: 932, C: C, V: V, message: "Missing row ID", fieldName: 'ID', lineNumber: n + 1, location: ourLocation });lastC = C;lastV = V;_context.next = 44;break;case 43: // wrong number of fields in the row
            // if (n === lines.length - 1) // itâ€™s the last line
            //     userLog(`  Line ${n}: Has ${fields.length} field(s) instead of ${NUM_EXPECTED_TN_FIELDS}: ${EXPECTED_TN_HEADING_LINE.replace(/\t/g, ', ')}`);
            // else
            if (n !== lines.length - 1) {// itâ€™s not the last line
              // Have a go at getting some of the first fields out of the line
              _reference = '?:?', _C = '?', _V = '?', _rowID = '????';try {_reference = fields[0];} catch (_unused4) {}try {_rowID = fields[1];} catch (_unused5) {}try {_reference$split3 = _reference.split(':');_reference$split4 = (0, _slicedToArray2.default)(_reference$split3, 2);_C = _reference$split4[0];_V = _reference$split4[1];} catch (_unused6) {}addNoticePartial({ priority: 983, message: "Wrong number of tabbed fields (expected ".concat(NUM_EXPECTED_NOTES_TSV_FIELDS, ")"), excerpt: "Found ".concat(fields.length, " field").concat(fields.length === 1 ? '' : 's'), C: _C, V: _V, rowID: _rowID, lineNumber: n + 1, location: ourLocation });}case 44:n++;_context.next = 15;break;case 47:if (!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.suppressNoticeDisablingFlag)) {// functionLog(`checkNotesTSV7Table: calling removeDisabledNotices(${carResult.noticeList.length}) having ${JSON.stringify(checkingOptions)}`);
              carResult.noticeList = (0, _disabledNotices.removeDisabledNotices)(carResult.noticeList);}if ((!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.cutoffPriorityLevel) || (checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.cutoffPriorityLevel) < 20) && checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.disableAllLinkFetchingFlag) addNoticePartial({ priority: 20, message: "Note that 'disableAllLinkFetchingFlag' was set so link targets were not checked", location: ourLocation });addSuccessMessage("Checked all ".concat((lines.length - 1).toLocaleString(), " data line").concat(lines.length - 1 === 1 ? '' : 's').concat(ourLocation, "."));if (carResult.noticeList.length) addSuccessMessage("checkNotesTSV7Table v".concat(NOTES_TABLE_VALIDATOR_VERSION_STRING, " finished with ").concat(carResult.noticeList.length ? carResult.noticeList.length.toLocaleString() : "zero", " notice").concat(carResult.noticeList.length === 1 ? '' : 's'));else addSuccessMessage("No errors or warnings found by checkNotesTSV7Table v".concat(NOTES_TABLE_VALIDATOR_VERSION_STRING)); // debugLog(`  checkNotesTSV7Table returning with ${result.successList.length.toLocaleString()} success(es), ${result.noticeList.length.toLocaleString()} notice(s).`);
            // debugLog("checkNotesTSV7Table result is", JSON.stringify(carResult));
            return _context.abrupt("return", carResult);case 52:case "end":return _context.stop();}}}, _callee);}));return _checkNotesTSV7Table.apply(this, arguments);}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,