"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _typeof = require("@babel/runtime/helpers/typeof");Object.defineProperty(exports, "__esModule", { value: true });exports.checkUSFMText = checkUSFMText;var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defaults = require("./defaults");
var _textHandlingFunctions = require("./text-handling-functions");
var books = _interopRequireWildcard(require("../core/books/books"));
var _fieldTextCheck = require("./field-text-check");
var _fileTextCheck = require("./file-text-check");
var _usfmJsCheck = require("./usfm-js-check");
var _BCSUsfmGrammarCheck = require("./BCS-usfm-grammar-check");
var _notesLinksCheck = require("./notes-links-check");

var _utilities = require("./utilities");
var _disabledNotices = require("./disabled-notices");function _getRequireWildcardCache(nodeInterop) {if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {return nodeInterop ? cacheNodeInterop : cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj, nodeInterop) {if (!nodeInterop && obj && obj.__esModule) {return obj;}if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}function _createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {(0, _defineProperty2.default)(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}


// const USFM_VALIDATOR_VERSION_STRING = '0.8.15';


var VALID_LINE_START_CHARACTERS = "([\u201C\u2018\u2014"; // Last one is em-dash — '{' gets added later for STs

// See http://ubsicap.github.io/usfm/master/index.html
// const COMPULSORY_MARKERS = ['id', 'ide']; // These are specifically checked for by the code near the start of mainUSFMCheck()
var EXPECTED_MARKERS = ['usfm', 'mt1']; // The check also allows for removal of the final '1'
var EXPECTED_BIBLE_BOOK_MARKERS = ['h', 'toc1', 'toc2', 'toc3'];
var EXPECTED_PERIPHERAL_BOOK_MARKERS = ['periph'];

var INTRO_LINE_START_MARKERS = ['id', 'usfm', 'ide', 'h',
'toc1', 'toc2', 'toc3',
'mt', 'mt1', 'mt2',
'mte', 'mte1', 'mte2',
'imt', 'imt1', 'imt2',
'is', 'is1', 'is2',
'ip', 'ipi', 'im', 'imi', 'ipq', 'imq', 'ipr',
'iq', 'iq1', 'iq2',
'ili', 'ili1', 'ili2',
'iot', 'io', 'io1', 'io2',
'iex', 'imte', 'imte1', 'imte2'];
var CV_MARKERS = ['c', 'v', 'ca', 'va'];
var HEADING_TYPE_MARKERS = [// expected to contain text on the same line
's', 's1', 's2', 's3', 's4', 'sr',
'ms', 'ms1', 'mr',
'r', 'd', 'rem', 'sp', 'cl',
'sd', 'sd1', 'sd2',
'pr', 'qa', 'qc', 'qd', 'qr',
'cls', 'pmo', 'pmc', 'pmr', 'pc',
'periph'];
var PARAGRAPH_MARKERS = ['p',
'q', 'q1', 'q2', 'q3', 'q4',
'qm', 'qm1', 'qm2', 'qm3', 'qm4',
'm', 'mi',
'pi', 'pi1', 'pi2', 'pi3', 'pi4',
'li', 'li1', 'li2', 'li3', 'li4',
'lim', 'lim1', 'lim2', 'lim3', 'lim4',
'lh', 'lf',
'po', 'pm',
'ph', 'ph1', 'ph2', 'ph3', 'ph4',
'tr'];
var MAIN_NOTE_MARKERS = ['f', 'x'];
var SPECIAL_MARKERS = ['w', 'zaln-s', 'k-s',
'qt-s', 'qt1-s', 'qt2-s',
'lit'];
var MILESTONE_MARKERS = ['ts\\*', 'ts-s', 'ts-e', 'k-e\\*']; // Is this a good way to handle it???
var MARKERS_WITHOUT_CONTENT = ['b', 'nb', 'ib', 'ie'].concat(MILESTONE_MARKERS);
var ALLOWED_LINE_START_MARKERS = [].concat(INTRO_LINE_START_MARKERS).concat(HEADING_TYPE_MARKERS).
concat(CV_MARKERS).concat(PARAGRAPH_MARKERS).
concat(MAIN_NOTE_MARKERS).concat(SPECIAL_MARKERS).concat(MARKERS_WITHOUT_CONTENT).
concat(MILESTONE_MARKERS).concat(['qs']);
var DEPRECATED_MARKERS = [
'h1', 'h2', 'h3', 'h4',
'pr',
'ph', 'ph1', 'ph2', 'ph3', 'ph4',
'addpn', 'pro', 'fdc', 'xdc'];
var MARKERS_WITH_COMPULSORY_CONTENT = [].concat(INTRO_LINE_START_MARKERS).concat(HEADING_TYPE_MARKERS).
concat(CV_MARKERS).concat(MAIN_NOTE_MARKERS).concat(SPECIAL_MARKERS);
var FOOTNOTE_INTERNAL_MARKERS = ['fr', 'fq', 'fqa', 'fk', 'fl', 'fw', 'fp', 'fv', 'ft', 'fdc', 'fm', 'xt'];
var XREF_INTERNAL_MARKERS = ['xo', 'xk', 'xq', 'xt', 'xta', 'xop', 'xot', 'xnt', 'xdc', 'rq'];
var SIMPLE_CHARACTER_MARKERS = ['add', 'bk', 'dc', 'k', 'nd', 'ord', 'pn', 'png', 'addpn',
'qs', 'qt', 'sig', 'sls', 'tl', 'wj',
'ior', 'iqt', // TODO: What/Why was 'rq' in here???
'em', 'bd', 'it', 'bdit', 'no', 'sc', 'sup',
'ndx', 'rb', 'pro', 'wg', 'wh', 'wa',
'litl', 'lik',
'liv', 'liv1', 'liv2', 'liv3', 'liv4'];
var CHARACTER_MARKERS = ['fig', 'w'].concat(SIMPLE_CHARACTER_MARKERS); // NOTE that we have \w in TWO places
var SIMPLE_INTERNAL_MARKERS = [SIMPLE_CHARACTER_MARKERS].concat().concat(FOOTNOTE_INTERNAL_MARKERS).concat(XREF_INTERNAL_MARKERS);
// eslint-disable-next-line no-unused-vars
var CANONICAL_TEXT_MARKERS = ['d'].concat(PARAGRAPH_MARKERS).concat(CHARACTER_MARKERS);
// eslint-disable-next-line no-unused-vars
var ANY_TEXT_MARKERS = [].concat(INTRO_LINE_START_MARKERS).concat(HEADING_TYPE_MARKERS).
concat(PARAGRAPH_MARKERS).concat(CHARACTER_MARKERS).
concat(MAIN_NOTE_MARKERS).concat(SPECIAL_MARKERS);
var MATCHED_CHARACTER_FORMATTING_PAIRS = [
['\\add ', '\\add*'], ['\\addpn ', '\\addpn*'],
['\\bd ', '\\bd*'], ['\\bdit ', '\\bdit*'],
['\\bk ', '\\bk*'],
['\\dc ', '\\dc*'],
['\\em ', '\\em*'],
['\\fig ', '\\fig*'],
['\\ior ', '\\ior*'],
['\\iqt ', '\\iqt*'],
['\\it ', '\\it*'],
['\\k ', '\\k*'],
['\\litl ', '\\litl*'],
['\\lik ', '\\lik*'],
['\\liv ', '\\liv*'], ['\\liv1 ', '\\liv1*'], ['\\liv2 ', '\\liv2*'], ['\\liv3 ', '\\liv3*'], ['\\liv4 ', '\\liv4*'],
['\\nd ', '\\nd*'], ['\\ndx ', '\\ndx*'],
['\\no ', '\\no*'],
['\\ord ', '\\ord*'],
['\\pn ', '\\pn*'], ['\\png ', '\\png*'],
['\\pro ', '\\pro*'],
['\\qt ', '\\qt*'],
['\\rb ', '\\rb*'],
['\\sc ', '\\sc*'],
['\\sig ', '\\sig*'],
['\\sls ', '\\sls*'],
['\\sup ', '\\sup*'],
['\\tl ', '\\tl*'],
['\\w ', '\\w*'], // Note that we also have \+w and \+w* in our files
['\\wa ', '\\wa*'], ['\\wg ', '\\wg*'], ['\\wh ', '\\wh*'],
['\\wj ', '\\wj*'],

['\\ca ', '\\ca*'], ['\\va ', '\\va*'],

['\\f ', '\\f*'], ['\\x ', '\\x*']];


var W_REGEX = new RegExp('\\\\\\+?w ([^\\\\]+?)\\\\\\+?w\\*', 'g'); // \w ...\w* or \+w ...\+w*
var ZALNS_REGEX = new RegExp('\\\\zaln-s (.+?)\\\\\\*', 'g');
var KS_REGEX = new RegExp('\\\\k-s (.+?)\\\\\\*', 'g');
var ATTRIBUTE_REGEX = new RegExp('[ |]([^ |]+?)="([^"]*?)"', 'g');
var HEBREW_CANTILLATION_REGEX = new RegExp('[֑֖֛֢֣֤֥֦֧֪֚֭֮֒֓֔֕֗֘֙֜֝֞֟֠֡֨֩֫֬֯]', 'g'); // There's 31 accent marks in there

var BAD_HEBREW_VOWEL_DAGESH_REGEX = new RegExp("[\\u05b4\\u05b5\\u05b6\\u05b7\\u05b8\\u05b9\\u05ba\\05bb]\\u05bc", 'g');


/**
 *
 * @param {string} languageCode
 * @param {string} repoCode -- e.g., 'UHB', 'UGNT', 'LT' or 'ST'
 * @param {string} bookID
 * @param {string} filename
 * @param {string} givenText
 * @param {string} givenLocation
 * @param {Object} checkingOptions
 */function
checkUSFMText(_x, _x2, _x3, _x4, _x5, _x6, _x7) {return _checkUSFMText.apply(this, arguments);}



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































// end of checkUSFMText function
function _checkUSFMText() {_checkUSFMText = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7(languageCode, repoCode, bookID, filename, givenText, givenLocation, checkingOptions) {var ourLocation, excerptLength, excerptHalfLength, excerptHalfLengthPlus, lowercaseBookID, validLineStartCharacters, result, addSuccessMessage, addNoticePartial, ourRunBCSGrammarCheck, CVCheck, ourCheckTextField, ourBasicFileChecks, checkUSFMCharacterFields, checkUSFMFileContents, checkUSFMLineText, checkUSFMLineAttributes, _checkUSFMLineAttributes, checkUSFMLineContents, _checkUSFMLineContents, ourCheckNotesLinksToOutside, _ourCheckNotesLinksToOutside, mainUSFMCheck, _mainUSFMCheck, allResults, numChapters, kB;return _regenerator.default.wrap(function _callee7$(_context7) {while (1) {switch (_context7.prev = _context7.next) {case 0:_mainUSFMCheck = function _mainUSFMCheck3() {_mainUSFMCheck = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6(bookID, filename, givenText, location) {var ourLocation, numChaptersThisBook, findStartMarker, lines, haveUSFM3Line, ideIndex, lastC, lastV, C, V, lastIntC, lastIntV, lastMarker, lastRest, markerSet, n, line, characterIndex, iy, excerpt, marker, rest, intC, intV, vIndex, bits, firstV, secondV, intFirstV, intSecondV, restRest, thisLength, _excerpt10;return _regenerator.default.wrap(function _callee6$(_context6) {while (1) {switch (_context6.prev = _context6.next) {case 0:findStartMarker = function _findStartMarker(C, V, lineNumber, USFMline) {// Returns the USFM marker at the start of the line
                          //  (without the leading backslash but including full self-closing milestones)
                          (0, _utilities.logicAssert)(USFMline && USFMline[0] === '\\', "Programming error in findStartMarker(".concat(C, ":").concat(V, ", ").concat(lineNumber, ", ").concat(USFMline, ")"));var foundMarker = '';for (var characterIndex = 1; characterIndex < USFMline.length; characterIndex++) {var char = USFMline[characterIndex];if (char === ' ') break; // Cope with self-closing milestones like \k-s\*
                            if (char === '\\' && (characterIndex === USFMline.length - 1 || USFMline[characterIndex + 1] !== '*')) {var excerpt = USFMline.substring(0, excerptLength) + (USFMline.length > excerptLength ? '…' : '');addNoticePartial({ priority: 603, message: "USFM marker doesn’t end with space", C: C, V: V, lineNumber: lineNumber, characterIndex: characterIndex, excerpt: excerpt, location: ourLocation });break;}foundMarker += char;if (char === '*') break;}return foundMarker;}; // functionLog(`checkUSFMText mainUSFMCheck(${bookID}, ${filename}, ${givenText.length}, ${location}) (can take quite a while for a large book)…`);
                        ourLocation = location;if (ourLocation && ourLocation[0] !== ' ') ourLocation = " ".concat(ourLocation); // const lowercaseBookID = bookID.toLowerCase();
                        // eslint-disable-next-line no-unused-vars
                        numChaptersThisBook = 0;try {(0, _utilities.logicAssert)(lowercaseBookID !== 'obs', "Shouldn’t happen in usfm-text-check2");numChaptersThisBook = books.chaptersInBook(bookID);} catch (_unused4) {if (!books.isValidBookID(bookID)) // must not be in FRT, BAK, etc.
                            addNoticePartial({ priority: 903, message: "Bad function call: should be given a valid book abbreviation", excerpt: bookID, location: ourLocation });}lines = givenText.split('\n'); // debugLog(`  '${ourLocation}' has ${lines.length.toLocaleString()} total lines`);
                        if (lines.length === 0 || !lines[0].startsWith('\\id ') || lines[0].length < 7 || !books.isValidBookID(lines[0].slice(4, 7))) addNoticePartial({ priority: 994, message: "USFM file must start with a valid \\id line", lineNumber: 1, location: ourLocation });haveUSFM3Line = lines.length > 1 && lines[1] === "\\usfm 3.0";ideIndex = haveUSFM3Line ? 2 : 1;if (lines.length < ideIndex || !lines[ideIndex].startsWith('\\ide ') || lines[ideIndex].length < 7) addNoticePartial({ priority: 719, message: "USFM file is recommended to have \\ide line", lineNumber: ideIndex + 1, location: ourLocation });else if (!lines[ideIndex].endsWith(' UTF-8')) addNoticePartial({ priority: 619, message: "USFM \\ide field is recommended to be set to 'UTF-8'", lineNumber: ideIndex + 1, characterIndex: 5, excerpt: lines[ideIndex], location: ourLocation }); // let lastB = '';
                        lastC = '', lastV = '', C = '0', V = '0';lastIntC = 0, lastIntV = 0; // let numVersesThisChapter = 0;
                        lastMarker = '', lastRest = '';markerSet = new Set();n = 1;case 15:if (!(n <= lines.length)) {_context6.next = 36;break;}line = lines[n - 1];if (C === '0') V = n.toString(); // debugLog(`line '${line}'${atString}`);
                        if (line) {_context6.next = 20;break;}return _context6.abrupt("continue", 33);case 20:characterIndex = void 0;if ((characterIndex = line.indexOf('\r')) >= 0) {iy = characterIndex + excerptHalfLength; // Want excerpt to focus more on what follows
                          excerpt = (iy > excerptHalfLength ? '…' : '') + line.substring(iy - excerptHalfLength, iy + excerptHalfLengthPlus).replace(/ /g, '␣') + (iy + excerptHalfLengthPlus < line.length ? '…' : '');addNoticePartial({ priority: 703, C: C, V: V, message: "Unexpected CarriageReturn character", lineNumber: n, characterIndex: characterIndex, excerpt: excerpt, location: ourLocation });}marker = void 0, rest = void 0;if (line[0] === '\\') {marker = findStartMarker(C, V, n, line);rest = line.substring(marker.length + 2); // Skip backslash, marker, and space after marker
                          // debugLog(`Line ${n}: marker='\\${marker}' rest='${rest}'`);
                        } else {// Line didn’t start with a backslash
                          // NOTE: Some unfoldingWord USFM Bibles commonly have this
                          //          so it’s not necessarily either an error or a warning
                          rest = line;if (validLineStartCharacters.indexOf(line[0]) === -1) {// These are the often expected characters
                            // Drop the priority if it’s a "half-likely" character
                            addNoticePartial({ priority: line[0] === ' ' || line[0] === '"' ? 180 : 880, C: C, V: V, message: "Expected line to start with backslash", lineNumber: n, characterIndex: 0, excerpt: line[0], location: ourLocation });if (line[1] === '\\') {// Let’s drop the leading punctuation and try to check the rest of the line
                              marker = line.substring(2).split(' ', 1)[0];rest = line.substring(marker.length + 2 + 1); // Skip leading character, backslash, marker, and space after marker
                              // debugLog(`USFM after ${line[0]} got '\\${marker}': '${rest}'`);
                            } else marker = 'NONE'; // to try to avoid consequential errors, but the rest of the line won’t be checked
                          } else {// How do we handle an allowed line that doesn’t start with a backslash?
                            // Can’t use 'NONE' because we want the rest of the line checked
                            marker = 'SPECIAL'; // Handle as a special case
                          }}markerSet.add(marker); // Keep track of all line markers
                        // Handle C/V numbers including verse bridges
                        intC = void 0, intV = void 0, vIndex = void 0;if (marker === 'c') {C = rest;V = '0';try {intC = (0, _utilities.ourParseInt)(C);} catch (usfmICerror) {addNoticePartial({ priority: 724, C: C, V: V, message: "Unable to convert chapter number to integer", lineNumber: n, characterIndex: 3, excerpt: "".concat(rest.substring(0, excerptHalfLength)).concat(rest.length > excerptHalfLength ? '…' : ''), location: ourLocation });intC = -999; // Used to prevent consequential errors
                          }if (C === lastC || intC > 0 && intC !== lastIntC + 1) addNoticePartial({ priority: 764, C: C, V: V, message: "Chapter number didn’t increment correctly", lineNumber: n, characterIndex: 3, excerpt: "".concat(rest.substring(0, excerptHalfLength)).concat(rest.length > excerptHalfLength ? '…' : '', " (").concat(lastC ? lastC : '0', " \u2192 ").concat(C, ")"), location: ourLocation });lastC = C;lastV = '0';lastIntC = intC;lastIntV = 0;} else if (marker === 'v') {V = rest ? rest.split(' ', 1)[0] : '?';if (V.indexOf('-') < 0) {// no hyphen -> no verse bridge
                            try {intV = (0, _utilities.ourParseInt)(V);} catch (usfmIVerror) {addNoticePartial({ priority: 723, C: C, V: V, message: "Unable to convert verse number to integer", lineNumber: n, characterIndex: 3, excerpt: "".concat(rest.substring(0, excerptHalfLength)).concat(rest.length > excerptHalfLength ? '…' : ''), location: ourLocation });intV = -999; // Used to prevent consequential errors
                            }if (V === lastV || intV > 0 && intV !== lastIntV + 1) addNoticePartial({ priority: 763, C: C, V: V, message: "Verse number didn’t increment correctly", lineNumber: n, characterIndex: 3, excerpt: "".concat(rest.substring(0, excerptHalfLength)).concat(rest.length > excerptHalfLength ? '…' : '', " (").concat(lastV ? lastV : '0', " \u2192 ").concat(V, ")"), location: ourLocation });lastV = V;lastIntV = intV;} else {// handle verse bridge
                            bits = V.split('-');firstV = bits[0], secondV = bits[1];intFirstV = void 0, intSecondV = void 0;try {intFirstV = (0, _utilities.ourParseInt)(firstV);intSecondV = (0, _utilities.ourParseInt)(secondV);} catch (usfmV12error) {addNoticePartial({ priority: 762, C: C, V: V, message: "Unable to convert verse bridge numbers to integers", lineNumber: n, characterIndex: 3, excerpt: "".concat(rest.substring(0, Math.max(9, excerptLength))).concat(rest.length > excerptLength ? '…' : ''), location: ourLocation });intFirstV = -999;intSecondV = -998; // Used to prevent consequential errors
                            }if (intSecondV <= intFirstV) addNoticePartial({ priority: 769, C: C, V: V, message: "Verse bridge numbers not in ascending order", lineNumber: n, characterIndex: 3, excerpt: "".concat(rest.substring(0, Math.max(9, excerptLength))).concat(rest.length > excerptLength ? '…' : '', " (").concat(firstV, " \u2192 ").concat(secondV, ")"), location: ourLocation });else if (firstV === lastV || intFirstV > 0 && intFirstV !== lastIntV + 1) addNoticePartial({ priority: 766, C: C, V: V, message: "Bridged verse numbers didn’t increment correctly", lineNumber: n, characterIndex: 3, excerpt: "".concat(rest.substring(0, Math.max(9, excerptLength))).concat(rest.length > excerptLength ? '…' : '', " (").concat(lastV, " \u2192 ").concat(firstV, ")"), location: ourLocation });lastV = secondV;lastIntV = intSecondV;}} else if ((vIndex = rest.indexOf('\\v ')) >= 0) {// verse number marker follows another marker on the same line, so it’s inside `rest`
                          restRest = rest.substring(vIndex + 3); // debugLog(`Got restRest=${restRest}`);
                          try {intV = parseInt(restRest); // debugLog("Got", intV);
                          } catch (usfmIIVerror) {addNoticePartial({ priority: 720, C: C, V: V, message: "Unable to convert internal verse number to integer", lineNumber: n, characterIndex: 3, excerpt: "".concat(restRest.substring(0, excerptHalfLength)).concat(restRest.length > excerptHalfLength ? '…' : ''), location: ourLocation });intV = -999; // Used to prevent consequential errors
                          }if (intV > 0 && intV !== lastIntV + 1) addNoticePartial({ priority: 761, C: C, V: V, message: "Verse number didn’t increment correctly", lineNumber: n, characterIndex: 3, excerpt: "".concat(restRest.substring(0, excerptHalfLength)).concat(restRest.length > excerptHalfLength ? '…' : '', " (").concat(lastV ? lastV : '0', " \u2192 ").concat(V, ")"), location: ourLocation });lastV = intV.toString();lastIntV = intV;}if (marker === 'id' && !rest.startsWith(bookID)) {thisLength = Math.max(4, excerptLength);_excerpt10 = "".concat(rest.substring(0, thisLength)).concat(rest.length > thisLength ? '…' : '');addNoticePartial({ priority: 987, C: C, V: V, message: "Expected \\id line to start with book identifier", lineNumber: n, characterIndex: 4, excerpt: _excerpt10, location: ourLocation });} // Check the order of markers
                        // In headers
                        if (marker === 'toc2' && lastMarker !== 'toc1') addNoticePartial({ priority: 87, C: C, V: V, message: "Expected \\toc2 line to follow \\toc1", lineNumber: n, characterIndex: 1, details: "not '\\".concat(lastMarker, "'"), location: ourLocation });else if (marker === 'toc3' && lastMarker !== 'toc2') addNoticePartial({ priority: 87, C: C, V: V, message: "Expected \\toc3 line to follow \\toc2", lineNumber: n, characterIndex: 1, details: "not '\\".concat(lastMarker, "'"), location: ourLocation }); // In chapters
                        else if ((PARAGRAPH_MARKERS.indexOf(marker) >= 0 || marker === 's5' || marker === 'ts\\*') && PARAGRAPH_MARKERS.indexOf(lastMarker) >= 0 && !lastRest) addNoticePartial({ priority: 399, C: C, V: V, message: "Useless paragraph marker", lineNumber: n, characterIndex: 1, details: "'\\".concat(lastMarker, "' before '\\").concat(marker, "'"), location: ourLocation });else if (['c', 'ca', 'cl'].indexOf(lastMarker) > 0 && marker === 'v' && (rest === '1' || rest.startsWith('1 '))) addNoticePartial({ priority: C === '1' ? 657 : 457, C: C, V: V, message: "Paragraph marker expected before first verse", lineNumber: n, characterIndex: 1, details: "'\\".concat(marker, "' after '\\").concat(lastMarker, "'"), location: ourLocation }); // Do general checks
                        _context6.next = 31;return checkUSFMLineContents(n, C, V, marker, rest, ourLocation, checkingOptions);case 31:lastMarker = marker;lastRest = rest;case 33:n++;_context6.next = 15;break;case 36: // Do overall global checks of the entire text
                        checkUSFMFileContents(filename, givenText, markerSet, ourLocation, checkingOptions); // Do this last so the results are lower in the lists
                        addSuccessMessage("Checked all ".concat(lines.length.toLocaleString(), " line").concat(lines.length === 1 ? '' : 's', " for ").concat(bookID).concat(ourLocation));case 38:case "end":return _context6.stop();}}}, _callee6);}));return _mainUSFMCheck.apply(this, arguments);};mainUSFMCheck = function _mainUSFMCheck2(_x29, _x30, _x31, _x32) {return _mainUSFMCheck.apply(this, arguments);};_ourCheckNotesLinksToOutside = function _ourCheckNotesLinksTo2() {_ourCheckNotesLinksToOutside = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5(lineNumber, C, V, marker, twLinkText, location, checkingOptions) {var adjustedLanguageCode, coTNlResultObject, _iterator22, _step22, coqNoticeEntry, _iterator23, _step23, checkedRepoName, _iterator24, _step24, checkedFilenameExtension;return _regenerator.default.wrap(function _callee5$(_context5) {while (1) {switch (_context5.prev = _context5.next) {case 0: // Checks that the TA/TW/Bible reference can be found
                        // Updates the global list of notices
                        // functionLog(`checkUSFMText ourCheckNotesLinksToOutside(${lineNumber}, ${C}:${V}, ${marker}, (${twLinkText.length}) '${twLinkText}', ${location}, ${JSON.stringify(checkingOptions)})`);
                        //parameterAssert(marker !== undefined, "checkUSFMText ourCheckNotesLinksToOutside: 'marker' parameter should be defined");
                        //parameterAssert(typeof marker === 'string', `checkUSFMText ourCheckNotesLinksToOutside: 'marker' parameter should be a string not a '${typeof marker}': ${marker}`);
                        //parameterAssert(twLinkText !== undefined, "checkUSFMText ourCheckNotesLinksToOutside: 'twLinkText' parameter should be defined");
                        //parameterAssert(typeof twLinkText === 'string', `checkUSFMText ourCheckNotesLinksToOutside: 'twLinkText' parameter should be a string not a '${typeof twLinkText}': ${twLinkText}`);
                        adjustedLanguageCode = languageCode; // This is the language code of the resource with the link
                        if (languageCode === 'hbo' || languageCode === 'el-x-koine') adjustedLanguageCode = 'en'; // This is a guess (and won't be needed for TWs when we switch to TWLs)
                        _context5.next = 4;return (0, _notesLinksCheck.checkNotesLinksToOutside)(languageCode, repoCode, bookID, C, V, 'TWLink', twLinkText, location, _objectSpread(_objectSpread({}, checkingOptions), {}, { defaultLanguageCode: adjustedLanguageCode }));case 4:coTNlResultObject = _context5.sent; // debugLog(`coTNlResultObject=${JSON.stringify(coTNlResultObject)}`);
                        // If we need to put everything through addNoticePartial, e.g., for debugging or filtering
                        //  process results line by line
                        _iterator22 = _createForOfIteratorHelper(coTNlResultObject.noticeList);try {for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {coqNoticeEntry = _step22.value;if (coqNoticeEntry.extra) // it must be an indirect check on a TA or TW article from a TN2 check
                              result.noticeList.push(coqNoticeEntry); // Just copy the complete notice as is
                            else // For our direct checks, we add the repoCode as an extra value
                              addNoticePartial(_objectSpread(_objectSpread({}, coqNoticeEntry), {}, { lineNumber: lineNumber, C: C, V: V, fieldName: marker }));} // The following is needed coz we might be checking the linked TA and/or TW articles
                        } catch (err) {_iterator22.e(err);} finally {_iterator22.f();}if (coTNlResultObject.checkedFileCount && coTNlResultObject.checkedFileCount > 0) if (typeof result.checkedFileCount === 'number') result.checkedFileCount += coTNlResultObject.checkedFileCount;else result.checkedFileCount = coTNlResultObject.checkedFileCount;if (coTNlResultObject.checkedFilesizes && coTNlResultObject.checkedFilesizes > 0) if (typeof result.checkedFilesizes === 'number') result.checkedFilesizes += coTNlResultObject.checkedFilesizes;else result.checkedFilesizes = coTNlResultObject.checkedFilesizes;if (coTNlResultObject.checkedRepoNames && coTNlResultObject.checkedRepoNames.length > 0) {_iterator23 = _createForOfIteratorHelper(coTNlResultObject.checkedRepoNames);try {for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {checkedRepoName = _step23.value;try {if (result.checkedRepoNames.indexOf(checkedRepoName) < 0) result.checkedRepoNames.push(checkedRepoName);} catch (_unused2) {result.checkedRepoNames = [checkedRepoName];}}} catch (err) {_iterator23.e(err);} finally {_iterator23.f();}}if (coTNlResultObject.checkedFilenameExtensions && coTNlResultObject.checkedFilenameExtensions.length > 0) {_iterator24 = _createForOfIteratorHelper(coTNlResultObject.checkedFilenameExtensions);try {for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {checkedFilenameExtension = _step24.value;try {if (result.checkedFilenameExtensions.indexOf(checkedFilenameExtension) < 0) result.checkedFilenameExtensions.push(checkedFilenameExtension);} catch (_unused3) {result.checkedFilenameExtensions = [checkedFilenameExtension];}}} catch (err) {_iterator24.e(err);} finally {_iterator24.f();}} // if (result.checkedFilenameExtensions) userLog("result", JSON.stringify(result));
                      case 11:case "end":return _context5.stop();}}}, _callee5);}));return _ourCheckNotesLinksToOutside.apply(this, arguments);};ourCheckNotesLinksToOutside = function _ourCheckNotesLinksTo(_x22, _x23, _x24, _x25, _x26, _x27, _x28) {return _ourCheckNotesLinksToOutside.apply(this, arguments);};_checkUSFMLineContents = function _checkUSFMLineContent2() {_checkUSFMLineContents = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(lineNumber, C, V, marker, rest, lineLocation, checkingOptions) {var checkUSFMLineInternals, _checkUSFMLineInternals;return _regenerator.default.wrap(function _callee4$(_context4) {while (1) {switch (_context4.prev = _context4.next) {case 0:_checkUSFMLineInternals = function _checkUSFMLineInterna2() {_checkUSFMLineInternals = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(lineNumber, C, V, marker, rest, lineLocation, checkingOptions) {var Vstr, allowedLinks;return _regenerator.default.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0: // Handles character formatting within the line contents
                                    // functionLog(`checkUSFMLineInternals(${lineNumber}, ${C}:${V}, ${marker}='${rest}', ${lineLocation}, ${JSON.stringify(checkingOptions)})…`);
                                    if (marker === 'c' && isNaN(rest)) addNoticePartial({ priority: 822, message: "Expected field to contain an integer", lineNumber: lineNumber, characterIndex: 3, excerpt: "\\c ".concat(rest), C: C, V: V, location: lineLocation });if (marker === 'v') {Vstr = rest ? rest.split(' ', 1)[0] : '?';if (isNaN(Vstr) && Vstr.indexOf('-') < 0) addNoticePartial({ priority: 822, message: "Expected field to contain an integer", characterIndex: 3, excerpt: "\\v ".concat(rest), C: C, V: V, location: lineLocation });} else if (marker === 'h' || marker === 'toc1' || marker === 'toc2' || marker === 'toc3') if (rest.toLowerCase() === rest || rest.toUpperCase() === rest) addNoticePartial({ priority: languageCode === 'en' || languageCode === 'fr' ? 490 : 190, message: "Expected header field to contain a mixed-case string", fieldName: "\\".concat(marker), excerpt: rest, C: C, V: V, location: lineLocation });if (!rest) {_context3.next = 9;break;}checkUSFMLineText(lineNumber, C, V, marker, rest, lineLocation, checkingOptions);if (!(rest.indexOf('=') >= 0 || rest.indexOf('"') >= 0)) {_context3.next = 7;break;}_context3.next = 7;return checkUSFMLineAttributes(lineNumber, C, V, marker, rest, lineLocation, checkingOptions);case 7:allowedLinks = (marker === 'w' || marker === 'k-s' || marker === 'f' || marker === 'SPECIAL') && // (because we don’t know what marker SPECIAL is, so default to "no false alarms")
                                    rest.indexOf('x-tw') >= 0;ourCheckTextField(lineNumber, C, V, 'USFM', "\\".concat(marker), rest, allowedLinks, lineLocation, checkingOptions);case 9:case "end":return _context3.stop();}}}, _callee3);}));return _checkUSFMLineInternals.apply(this, arguments);};checkUSFMLineInternals = function _checkUSFMLineInterna(_x34, _x35, _x36, _x37, _x38, _x39, _x40) {return _checkUSFMLineInternals.apply(this, arguments);}; // end of checkUSFMLineInternals function
                        // Main code for checkUSFMLineContents()
                        if (ALLOWED_LINE_START_MARKERS.indexOf(marker) >= 0 || marker === 'SPECIAL' || marker === 'NONE') {if (rest && MARKERS_WITHOUT_CONTENT.indexOf(marker) >= 0) if ((0, _textHandlingFunctions.isWhitespace)(rest)) addNoticePartial({ priority: 301, message: "Unexpected whitespace after \\".concat(marker, " marker"), C: C, V: V, lineNumber: lineNumber, characterIndex: marker.length, excerpt: rest, location: lineLocation });else if (rest !== 'ס' && rest !== 'פ') // in UHB NEH 3:20 or EZR 3:18
                            addNoticePartial({ priority: 401, message: "Unexpected content after \\".concat(marker, " marker"), C: C, V: V, lineNumber: lineNumber, characterIndex: marker.length, excerpt: rest, location: lineLocation });else if (MARKERS_WITH_COMPULSORY_CONTENT.indexOf(marker) >= 0 && !rest) addNoticePartial({ priority: 711, message: "Expected compulsory content", C: C, V: V, lineNumber: lineNumber, characterIndex: marker.length, location: " after \\".concat(marker, " marker").concat(lineLocation) });} else // it’s not a recognised line marker
                          // Lower priority of deprecated \s5 markers (compared to all other unknown markers)
                          addNoticePartial({ priority: marker === 's5' ? 111 : 809, message: "".concat(marker === 's5' ? 'Deprecated' : 'Unexpected', " '\\").concat(marker, "' marker at start of line"), C: C, V: V, lineNumber: lineNumber, characterIndex: 1, location: lineLocation });if (!rest) {_context4.next = 6;break;}_context4.next = 6;return checkUSFMLineInternals(lineNumber, C, V, marker, rest, lineLocation, checkingOptions);case 6:case "end":return _context4.stop();}}}, _callee4);}));return _checkUSFMLineContents.apply(this, arguments);};checkUSFMLineContents = function _checkUSFMLineContent(_x15, _x16, _x17, _x18, _x19, _x20, _x21) {return _checkUSFMLineContents.apply(this, arguments);};_checkUSFMLineAttributes = function _checkUSFMLineAttribu2() {_checkUSFMLineAttributes = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(lineNumber, C, V, marker, rest, lineLocation, checkingOptions) {var details, adjustedRest, checkWAttributes, _checkWAttributes, regexResultArray1, regexResultArray2, attributeCounter, attributeName, _attributeCounter, _attributeName;return _regenerator.default.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:_checkWAttributes = function _checkWAttributes3() {_checkWAttributes = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(wContents) {var regexResultArray, attributeCounter, _attributeName2, attributeValue, match;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0: // functionLog(`checkWAttributes(${wContents})…`);
                                    attributeCounter = 0;case 1:if (!(regexResultArray = ATTRIBUTE_REGEX.exec(wContents))) {_context.next = 23;break;}attributeCounter += 1; // debugLog(`  Got attribute Regex in \\w: ${attributeCounter} '${JSON.stringify(regexResultArray2)}`);
                                    _attributeName2 = regexResultArray[1], attributeValue = regexResultArray[2];if (!(repoCode === 'UHB' || repoCode === 'UGNT')) {_context.next = 20;break;}if (attributeCounter === 1) {if (_attributeName2 !== 'lemma') addNoticePartial({ priority: 857, message: "Unexpected first original \\w attribute", details: "expected 'lemma'", lineNumber: lineNumber, C: C, V: V, excerpt: regexResultArray[0], location: lineLocation });} else if (attributeCounter === 2) {if (_attributeName2 !== 'strong') addNoticePartial({ priority: 856, message: "Unexpected second original \\w attribute", details: "expected 'strong'", lineNumber: lineNumber, C: C, V: V, excerpt: regexResultArray[0], location: lineLocation });} else if (attributeCounter === 3) {if (_attributeName2 !== 'x-morph') addNoticePartial({ priority: 855, message: "Unexpected third original \\w attribute", details: "expected 'x-morph'", lineNumber: lineNumber, C: C, V: V, excerpt: regexResultArray[0], location: lineLocation });} else if (attributeCounter === 4) {if (_attributeName2 !== 'x-tw') // we can have TWO of these -- THREE EVEN in EXO 15:23 and 1KI 21:9!!!
                                        addNoticePartial({ priority: 854, message: "Unexpected fourth original \\w attribute", details: "expected 'x-tw'", lineNumber: lineNumber, C: C, V: V, excerpt: regexResultArray[0], location: lineLocation });} else if (attributeCounter === 5) {if (_attributeName2 !== 'x-tw') addNoticePartial({ priority: 854, message: "Unexpected fifth original \\w attribute", details: "expected second 'x-tw'", lineNumber: lineNumber, C: C, V: V, excerpt: regexResultArray[0], location: lineLocation });} else if (attributeCounter === 6) {if (_attributeName2 !== 'x-tw') addNoticePartial({ priority: 854, message: "Unexpected sixth original \\w attribute", details: "expected third 'x-tw'", lineNumber: lineNumber, C: C, V: V, excerpt: regexResultArray[0], location: lineLocation });} else // #7 or more
                                      addNoticePartial({ priority: 853, message: "Unexpected extra original \\w attribute", details: details, lineNumber: lineNumber, C: C, V: V, excerpt: regexResultArray[0], location: lineLocation });if (!(_attributeName2 === 'lemma' && repoCode === 'UHB')) {_context.next = 11;break;}match = HEBREW_CANTILLATION_REGEX.exec(attributeValue);if (match) {// it's null if no matches
                                      // debugLog(`Got cantillation match: ${typeof match} ${match.length} '${JSON.stringify(match)}'`);
                                      addNoticePartial({ priority: 905, message: "Unexpected Hebrew cantillation mark in lemma field", details: "Found ".concat(match.length, " '").concat(match, "'"), lineNumber: lineNumber, C: C, V: V, excerpt: regexResultArray[0], location: lineLocation });}_context.next = 18;break;case 11:if (!(_attributeName2 === 'x-morph' && (repoCode === 'UHB' && !attributeValue.startsWith('He,') && !attributeValue.startsWith('Ar,') || repoCode === 'UGNT' && !attributeValue.startsWith('Gr,')))) {_context.next = 15;break;}addNoticePartial({ priority: 852, message: "Unexpected original \\w x-morph language prefix", details: "Expected 'He,' 'Ar,' or 'Gr,'", lineNumber: lineNumber, C: C, V: V, excerpt: regexResultArray[0], location: lineLocation });_context.next = 18;break;case 15:if (!(_attributeName2 === 'x-tw')) {_context.next = 18;break;}_context.next = 18;return ourCheckNotesLinksToOutside(lineNumber, C, V, marker, attributeValue, lineLocation, checkingOptions);case 18:_context.next = 21;break;case 20: // a translation -- not UHB or UGNT
                                    if (attributeCounter === 1) {if (_attributeName2 !== 'x-occurrence') addNoticePartial({ priority: 848, message: "Unexpected first translation \\w attribute", details: "expected 'x-occurrence'", lineNumber: lineNumber, C: C, V: V, excerpt: regexResultArray[0], location: lineLocation });} else if (attributeCounter === 2) {if (_attributeName2 !== 'x-occurrences') addNoticePartial({ priority: 847, message: "Unexpected second translation \\w attribute", details: "expected 'x-occurrences'", lineNumber: lineNumber, C: C, V: V, excerpt: regexResultArray[0], location: lineLocation });} else // #3 or more
                                      addNoticePartial({ priority: 846, message: "Unexpected extra translation \\w attribute", details: details, lineNumber: lineNumber, C: C, V: V, excerpt: regexResultArray[0], location: lineLocation });case 21:_context.next = 1;break;case 23:if (repoCode === 'UHB' || repoCode === 'UGNT') {if (attributeCounter < 3) addNoticePartial({ priority: 837, message: "Seems too few original \\w attributes", details: "Expected 3-4 attributes but only found ".concat(attributeCounter), lineNumber: lineNumber, C: C, V: V, excerpt: regexResultArray1[0], location: lineLocation });} else if (attributeCounter < 2) addNoticePartial({ priority: 836, message: "Seems too few translation \\w attributes", details: "Expected two attributes but only found ".concat(attributeCounter), lineNumber: lineNumber, C: C, V: V, excerpt: regexResultArray1[0], location: lineLocation });case 24:case "end":return _context.stop();}}}, _callee);}));return _checkWAttributes.apply(this, arguments);};checkWAttributes = function _checkWAttributes2(_x33) {return _checkWAttributes.apply(this, arguments);}; // Looks for USFM fields with attributes, e.g., \w, \zaln-s, \k-s
                        // functionLog(`checkUSFMLineAttributes(${lineNumber}, ${C}:${V}, ${marker}='${rest}', ${lineLocation}, ${JSON.stringify(checkingOptions)})…`);
                        // functionLog(`checkUSFMLineAttributes(${lineNumber}, ${C}:${V}, ${marker}=${rest.length} chars, ${lineLocation}, ${JSON.stringify(checkingOptions)})…`);
                        details = "line marker='\\".concat(marker, "'"); // Put marker inside string so easy to do RegExp searches
                        adjustedRest = "\\".concat(marker, " ").concat(rest);if (adjustedRest.indexOf('="') !== -1) (0, _utilities.dataAssert)(adjustedRest.indexOf('\\w ') !== -1 || adjustedRest.indexOf('\\+w ') !== -1 || adjustedRest.indexOf('\\zaln-s ') !== -1 || adjustedRest.indexOf('\\k-s ') !== -1, "Something wrong in USFM line ".concat(lineNumber, " ").concat(C, ":").concat(V, "'").concat(adjustedRest, "' \\w=").concat(adjustedRest.indexOf('\\w '), " \\+w=").concat(adjustedRest.indexOf('\\+w '), " \\zaln-s=").concat(adjustedRest.indexOf('\\zaln-s '), " \\k-s=").concat(adjustedRest.indexOf('\\k-s ')));(0, _utilities.dataAssert)((0, _textHandlingFunctions.countOccurrences)(adjustedRest, '\\w ') === (0, _textHandlingFunctions.countOccurrences)(adjustedRest, '\\w*'), "checkUSFMLineAttributes expected all \\w fields to be closed in ".concat(adjustedRest));(0, _utilities.dataAssert)((0, _textHandlingFunctions.countOccurrences)(adjustedRest, '\\+w ') === (0, _textHandlingFunctions.countOccurrences)(adjustedRest, '\\+w*'), "checkUSFMLineAttributes expected all \\+w fields to be closed in ".concat(adjustedRest)); // dataAssert(countOccurrences(adjustedRest, '\\zaln-s ') === countOccurrences(adjustedRest, '\\zaln-s*'), `checkUSFMLineAttributes expected all \\zaln-s fields to be closed in ${adjustedRest}`);
                        // dataAssert(countOccurrences(adjustedRest, '\\k-s ') === countOccurrences(adjustedRest, '\\k-s*'), `checkUSFMLineAttributes expected all \\k-s fields to be closed in ${adjustedRest}`);
                        /**
                         *
                         * @param {string} wContents
                         */case 7:if (!(regexResultArray1 = W_REGEX.exec(adjustedRest))) {_context2.next = 12;break;}_context2.next = 10;return checkWAttributes(regexResultArray1[1]);case 10:_context2.next = 7;break;case 12:while (regexResultArray1 = KS_REGEX.exec(adjustedRest)) {// debugLog(`Got ${repoCode} \\k-s Regex in ${C}:${V} line: '${JSON.stringify(regexResultArray1)}`);
                          (0, _utilities.dataAssert)(repoCode === 'UHB' || repoCode === 'UGNT', "checkUSFMLineAttributes expected an original language repo not '".concat(repoCode, "'"));attributeCounter = 0;while (regexResultArray2 = ATTRIBUTE_REGEX.exec(regexResultArray1[1])) {attributeCounter += 1; // debugLog(`  Got attribute Regex in \\k-s: ${attributeCounter} '${JSON.stringify(regexResultArray2)}`);
                            attributeName = regexResultArray2[1]; //, attributeValue = regexResultArray2[2];
                            if (attributeCounter === 1) {if (attributeName !== 'x-tw') addNoticePartial({ priority: 839, message: "Unexpected first \\k-s attribute", details: "expected 'x-tw'", lineNumber: lineNumber, C: C, V: V, excerpt: regexResultArray2[0], location: lineLocation });} else // #2 or more
                              addNoticePartial({ priority: 838, message: "Unexpected extra \\k-s attribute", details: details, lineNumber: lineNumber, C: C, V: V, excerpt: regexResultArray2[0], location: lineLocation });}if (attributeCounter < 1) addNoticePartial({ priority: 835, message: "Seems too few original \\k-s attributes", details: "Expected one attribute but only found ".concat(attributeCounter), lineNumber: lineNumber, C: C, V: V, excerpt: regexResultArray1[0], location: lineLocation });}while (regexResultArray1 = ZALNS_REGEX.exec(adjustedRest)) {// debugLog(`Got ${repoCode} \\zaln-s Regex in ${C}:${V} line: '${JSON.stringify(regexResultArray1)}`);
                          (0, _utilities.dataAssert)(repoCode !== 'UHB' && repoCode !== 'UGNT', "checkUSFMLineAttributes eExpected not an original language repo not '".concat(repoCode, "'"));_attributeCounter = 0;while (regexResultArray2 = ATTRIBUTE_REGEX.exec(regexResultArray1[1])) {_attributeCounter += 1; // debugLog(`  Got attribute Regex in \\zaln-s: ${attributeCounter} '${JSON.stringify(regexResultArray2)}`);
                            _attributeName = regexResultArray2[1]; //, attributeValue = regexResultArray2[2];
                            if (_attributeCounter === 1) {if (_attributeName !== 'x-strong') addNoticePartial({ priority: 830, message: "Unexpected first \\zaln-s attribute", details: details, lineNumber: lineNumber, C: C, V: V, excerpt: regexResultArray2[0], location: lineLocation });} else if (_attributeCounter === 2) {if (_attributeName !== 'x-lemma') addNoticePartial({ priority: 829, message: "Unexpected second \\zaln-s attribute", details: details, lineNumber: lineNumber, C: C, V: V, excerpt: regexResultArray2[0], location: lineLocation });} else if (_attributeCounter === 3) {if (_attributeName !== 'x-morph') addNoticePartial({ priority: 828, message: "Unexpected third \\zaln-s attribute", details: details, lineNumber: lineNumber, C: C, V: V, excerpt: regexResultArray2[0], location: lineLocation });} else if (_attributeCounter === 4) {if (_attributeName !== 'x-occurrence') addNoticePartial({ priority: 827, message: "Unexpected fourth \\zaln-s attribute", details: details, lineNumber: lineNumber, C: C, V: V, excerpt: regexResultArray2[0], location: lineLocation });} else if (_attributeCounter === 5) {if (_attributeName !== 'x-occurrences') addNoticePartial({ priority: 826, message: "Unexpected fifth \\zaln-s attribute", details: details, lineNumber: lineNumber, C: C, V: V, excerpt: regexResultArray2[0], location: lineLocation });} else if (_attributeCounter === 6) {if (_attributeName !== 'x-content') addNoticePartial({ priority: 825, message: "Unexpected sixth \\zaln-s attribute", details: details, lineNumber: lineNumber, C: C, V: V, excerpt: regexResultArray2[0], location: lineLocation });} else // #7 or more
                              addNoticePartial({ priority: 833, message: "Unexpected extra \\zaln-s attribute", details: details, lineNumber: lineNumber, C: C, V: V, excerpt: regexResultArray2[0], location: lineLocation });}if (_attributeCounter < 6) addNoticePartial({ priority: 834, message: "Seems too few translation \\zaln-s attributes", details: "Expected six attributes but only found ".concat(_attributeCounter), lineNumber: lineNumber, C: C, V: V, excerpt: regexResultArray1[0], location: lineLocation });}case 14:case "end":return _context2.stop();}}}, _callee2);}));return _checkUSFMLineAttributes.apply(this, arguments);};checkUSFMLineAttributes = function _checkUSFMLineAttribu(_x8, _x9, _x10, _x11, _x12, _x13, _x14) {return _checkUSFMLineAttributes.apply(this, arguments);};checkUSFMLineText = function _checkUSFMLineText(lineNumber, C, V, marker, rest, lineLocation, checkingOptions) {// Removes character formatting within the line contents and checks the remaining text
              // functionLog(`checkUSFMLineText(${lineNumber}, ${C}:${V}, ${marker}='${rest}', ${lineLocation}, ${JSON.stringify(checkingOptions)})…`);
              // functionLog(`checkUSFMLineText(${lineNumber}, ${C}:${V}, ${marker}=${rest.length} chars, ${lineLocation}, ${JSON.stringify(checkingOptions)})…`);
              var details = "line marker='\\".concat(marker, "'"); // Check for invalid character combinations
              if (languageCode === 'hbo') {// TODO: How should we check other potential bad combinations
                var match = BAD_HEBREW_VOWEL_DAGESH_REGEX.exec(rest);if (match) {// it's null if no matches
                  // debugLog(`Got bad dagesh after vowel character order match: ${typeof match} ${match.length} '${JSON.stringify(match)}'`);
                  var _characterIndex = rest.indexOf(match[0][0]);var excerpt = (_characterIndex > excerptHalfLength ? '…' : '') + rest.substring(_characterIndex - excerptHalfLength, _characterIndex + excerptHalfLengthPlus) + (_characterIndex + excerptHalfLengthPlus < rest.length ? '…' : '');addNoticePartial({ priority: 805, message: "Unexpected Hebrew dagesh after vowel", details: "Found ".concat(match.length, " '").concat(match, "'"), lineNumber: lineNumber, C: C, V: V, characterIndex: _characterIndex, excerpt: excerpt, location: lineLocation });}} // Check that no \w markers touch, i.e., shouldn't have '\w*\w' in file
              var characterIndex;if ((characterIndex = rest.indexOf('\\w*\\w')) !== -1) {// NOTE: There's one example of this in ULT 1 Kings 6:1 "480th"
                //  \w 480|x-occurrence="1" x-occurrences="1"\w*\w th|x-occurrence="1" x-occurrences="1"\w*
                // Also UST Ezra 6:19 "14th" and Ezra 10:9 "20th"
                var badCount = (0, _textHandlingFunctions.countOccurrences)(rest, '\\w*\\w');if (badCount > 1 || rest.indexOf('\\w*\\w th|') === -1) {// there's multiple cases or it's not an ordinal
                  var _excerpt = (characterIndex > excerptHalfLength ? '…' : '') + rest.substring(characterIndex - excerptHalfLength, characterIndex + excerptHalfLengthPlus) + (characterIndex + excerptHalfLengthPlus < rest.length ? '…' : '');addNoticePartial({ priority: 444, message: "Shouldn’t have consecutive word fields without a space", details: badCount > 1 ? details + "".concat(badCount, " occurrences found in line") : details, lineNumber: lineNumber, C: C, V: V, characterIndex: characterIndex, excerpt: _excerpt, location: lineLocation });}} // Check that no \f or \x markers follow a space
              if ((characterIndex = rest.indexOf(' \\f ')) !== -1) {var _badCount = (0, _textHandlingFunctions.countOccurrences)(rest, ' \\f ');var _excerpt2 = (characterIndex > excerptHalfLength ? '…' : '') + rest.substring(characterIndex - excerptHalfLength, characterIndex + excerptHalfLengthPlus).replace(/ /g, '␣') + (characterIndex + excerptHalfLengthPlus < rest.length ? '…' : '');addNoticePartial({ priority: 443, message: "Shouldn’t have a footnote after a space", details: _badCount > 1 ? details + "".concat(_badCount, " occurrences found in line") : details, lineNumber: lineNumber, C: C, V: V, characterIndex: characterIndex, excerpt: _excerpt2, location: lineLocation });}if ((characterIndex = rest.indexOf(' \\x ')) !== -1) {var _badCount2 = (0, _textHandlingFunctions.countOccurrences)(rest, ' \\x ');var _excerpt3 = (characterIndex > excerptHalfLength ? '…' : '') + rest.substring(characterIndex - excerptHalfLength, characterIndex + excerptHalfLengthPlus).replace(/ /g, '␣') + (characterIndex + excerptHalfLengthPlus < rest.length ? '…' : '');addNoticePartial({ priority: 442, message: "Shouldn’t have a cross-reference after a space", details: _badCount2 > 1 ? details + "".concat(_badCount2, " occurrences found in line") : details, lineNumber: lineNumber, C: C, V: V, characterIndex: characterIndex, excerpt: _excerpt3, location: lineLocation });} // Remove any self-closed milestones and internal \v markers
              // NOTE: replaceAll() is not generally available in browsers yet, so need to use RegExps
              var adjustedRest = rest.replace(/\\zaln-e\\\*/g, '').replace(/\\ts\\\*/g, '').replace(/\\k-e\\\*/g, '').replace(/\\v /g, '').replace(/\\k-s[^\\]+\\\*/g, ''); // This last one is a genuine RegExp because it includes the field contents
              // Remove any simple character markers
              // NOTE: replaceAll() is not generally available in browsers yet, so need to use RegExps
              var _iterator21 = _createForOfIteratorHelper(SIMPLE_INTERNAL_MARKERS),_step21;try {for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {var charMarker = _step21.value; // oldTODO: Move the regEx creation so it’s only done once -- not for every line!!!
                  // const startRegex = new RegExp(`\\${charMarker} `, 'g');
                  // // eslint-disable-next-line no-useless-escape
                  // const endRegex = new RegExp(`\\${charMarker}\*`, 'g');
                  // adjustedRest = adjustedRest.replace(startRegex, '').replace(endRegex, '');
                  adjustedRest = (0, _textHandlingFunctions.ourDeleteAll)(adjustedRest, "\\".concat(charMarker, " "));adjustedRest = (0, _textHandlingFunctions.ourDeleteAll)(adjustedRest, "\\".concat(charMarker, "*"));} // if (adjustedRest !== rest) {userLog(`Still Got \n'${adjustedRest}' from \n'${rest}'`); return;}
              } catch (err) {_iterator21.e(err);} finally {_iterator21.f();}var ixEnd;if (marker === 'w') {// Handle first \w field (i.e., if marker==w) -- there may be more \w fields in rest
                var ixWordEnd = adjustedRest.indexOf('|');if (ixWordEnd < 0 && adjustedRest.indexOf('lemma="') >= 0) {var _characterIndex2 = 5; // Presumably, a little bit into the word
                  var _excerpt4 = (_characterIndex2 > excerptHalfLength ? '…' : '') + adjustedRest.substring(_characterIndex2 - excerptHalfLength, _characterIndex2 + excerptHalfLengthPlus).replace(/ /g, '␣') + (_characterIndex2 + excerptHalfLengthPlus < adjustedRest.length ? '…' : '');addNoticePartial({ priority: 912, message: 'Missing | character in \\w line', lineNumber: lineNumber, C: C, V: V, characterIndex: _characterIndex2, excerpt: _excerpt4, location: lineLocation });}(0, _utilities.dataAssert)(ixWordEnd >= 1, "Why1 is w| = ".concat(ixWordEnd, "? ").concat(languageCode, " ").concat(bookID, " ").concat(C, ":").concat(V, " ").concat(lineNumber, " '\\").concat(marker, "'"));ixEnd = adjustedRest.indexOf('\\w*');if (ixEnd >= 0) adjustedRest = adjustedRest.substring(0, ixWordEnd) + adjustedRest.substring(ixEnd + 3, adjustedRest.length);else (0, _utilities.dataAssert)(false, "Why is ixEnd = ".concat(ixEnd, "? ").concat(languageCode, " ").concat(bookID, " ").concat(C, ":").concat(V, " ").concat(lineNumber, " '\\").concat(marker, "'"));} else if (marker === 'zaln-s') {// Remove first \zaln-s milestone (if marker == zaln-s)
                ixEnd = adjustedRest.indexOf('\\*');if (ixEnd >= 0) adjustedRest = adjustedRest.substring(ixEnd + 2, adjustedRest.length);else (0, _utilities.dataAssert)(false, "Why is ixEnd = ".concat(ixEnd, "? ").concat(languageCode, " ").concat(bookID, " ").concat(C, ":").concat(V, " ").concat(lineNumber, " '\\").concat(marker, "'"));} else if (marker === 'k-s') {// Remove first \k-s milestone (if marker == k-s)
                ixEnd = adjustedRest.indexOf('\\*');if (ixEnd >= 0) adjustedRest = adjustedRest.substring(ixEnd + 2, adjustedRest.length);else (0, _utilities.dataAssert)(false, "Why is ixEnd = ".concat(ixEnd, "? ").concat(languageCode, " ").concat(bookID, " ").concat(C, ":").concat(V, " ").concat(lineNumber, " '\\").concat(marker, "'"));} else if (marker === 'f') {// Handle first footnote (if marker == f)
                ixEnd = adjustedRest.indexOf('\\f*');var startIndex = adjustedRest.startsWith('+ ') ? 2 : 0;if (ixEnd >= 0) adjustedRest = adjustedRest.substring(startIndex, ixEnd) + adjustedRest.substring(ixEnd + 3, adjustedRest.length);else {// dataAssert(false, `Why is ixEnd = ${ixEnd}? ${languageCode} ${bookID} ${C}:${V} ${lineNumber} '\\${marker}'`);
                  addNoticePartial({ priority: 312, message: 'Possible unclosed footnote', details: details, lineNumber: lineNumber, C: C, V: V, location: lineLocation });} // debugLog(`After removing f field: '${adjustedRest}' from '${rest}'`);
              } else if (marker === 'va') adjustedRest = adjustedRest.replace('\\va*', '');else if (marker === 'ca') adjustedRest = adjustedRest.replace('\\ca*', ''); // Remove any other \zaln-s fields in the line
              // if (adjustedRest.indexOf('\\z') >= 0) userLog(`checkUSFMLineText here first at ${lineNumber} ${C}:${V} with ${marker}='${adjustedRest}'`);
              var nextZIndex;while ((nextZIndex = adjustedRest.indexOf('\\zaln-s ')) >= 0) {// functionLog(`checkUSFMLineText here with ${marker}='${adjustedRest}'`);
                var ixZEnd = adjustedRest.indexOf('\\*'); // debugLog(`  ${nextZIndex} and ${ixZEnd}`);
                if (ixZEnd >= 0) {// dataAssert(ixZEnd > nextZIndex, `Expected closure at ${ixZEnd} to be AFTER \\zaln-s (${nextZIndex})`);
                  adjustedRest = adjustedRest.substring(0, nextZIndex) + adjustedRest.substring(ixZEnd + 2, adjustedRest.length); // debugLog(`  Now '${adjustedRest}'`);
                } else {(0, _utilities.userLog)("\\zaln-s seems unclosed: 'adjustedRest' from '".concat(rest, "'"));break;}} // Remove any other \w fields in the line
              var nextWIndex;while ((nextWIndex = adjustedRest.indexOf('\\w ')) >= 0) {var _ixWordEnd = adjustedRest.indexOf('|');if (_ixWordEnd < 0 && adjustedRest.indexOf('lemma="') >= 0) {var _characterIndex3 = nextWIndex + 5; // Presumably, a little bit into the word
                  var _excerpt5 = (_characterIndex3 > excerptHalfLength ? '…' : '') + adjustedRest.substring(_characterIndex3 - excerptHalfLength, _characterIndex3 + excerptHalfLengthPlus).replace(/ /g, '␣') + (_characterIndex3 + excerptHalfLengthPlus < adjustedRest.length ? '…' : '');addNoticePartial({ priority: 911, message: 'Missing | character in \\w field', details: details, lineNumber: lineNumber, C: C, V: V, characterIndex: _characterIndex3, excerpt: _excerpt5, location: lineLocation });adjustedRest = ''; // Avoid follow-on errors
                  break;}(0, _utilities.dataAssert)(_ixWordEnd > nextWIndex + 3, "Why2 is w| = ".concat(_ixWordEnd, "? nextWIndex=").concat(nextWIndex, " ").concat(languageCode, " ").concat(bookID, " ").concat(C, ":").concat(V, " ").concat(lineNumber));var ixWEnd = adjustedRest.indexOf('\\w*');if (ixWEnd >= 0) {(0, _utilities.dataAssert)(ixWEnd > nextWIndex, "Expected closure at ".concat(ixWEnd, " to be AFTER \\w (").concat(nextWIndex, ")"));adjustedRest = adjustedRest.substring(0, nextWIndex) + adjustedRest.substring(nextWIndex + 3, _ixWordEnd) + adjustedRest.substring(ixWEnd + 3, adjustedRest.length); // debugLog(`After removing w field, got '${adjustedRest}'`);
                } else {(0, _utilities.userLog)("\\w seems unclosed: 'adjustedRest' from '".concat(rest, "'"));break;}} // Remove any other \+w fields in the line
              while ((nextWIndex = adjustedRest.indexOf('\\+w ')) >= 0) {var _ixWordEnd2 = adjustedRest.indexOf('|');if (_ixWordEnd2 < 0 && adjustedRest.indexOf('lemma="') >= 0) {var _characterIndex4 = nextWIndex + 6; // Presumably, a little bit into the word
                  var _excerpt6 = (_characterIndex4 > excerptHalfLength ? '…' : '') + adjustedRest.substring(_characterIndex4 - excerptHalfLength, _characterIndex4 + excerptHalfLengthPlus).replace(/ /g, '␣') + (_characterIndex4 + excerptHalfLengthPlus < adjustedRest.length ? '…' : '');addNoticePartial({ priority: 911, message: 'Missing | character in \\+w field', details: details, lineNumber: lineNumber, C: C, V: V, characterIndex: _characterIndex4, excerpt: _excerpt6, location: lineLocation });adjustedRest = ''; // Avoid follow-on errors
                  break;}(0, _utilities.dataAssert)(_ixWordEnd2 > nextWIndex + 4, "Why2 is +w| = ".concat(_ixWordEnd2, "? nextWIndex=").concat(nextWIndex, " ").concat(languageCode, " ").concat(bookID, " ").concat(C, ":").concat(V, " ").concat(lineNumber));var _ixWEnd = adjustedRest.indexOf('\\+w*');if (_ixWEnd >= 0) {(0, _utilities.dataAssert)(_ixWEnd > nextWIndex, "Expected closure at ".concat(_ixWEnd, " to be AFTER \\+w (").concat(nextWIndex, ")"));adjustedRest = adjustedRest.substring(0, nextWIndex) + adjustedRest.substring(nextWIndex + 4, _ixWordEnd2) + adjustedRest.substring(_ixWEnd + 4, adjustedRest.length); // debugLog(`After removing w field, got '${adjustedRest}'`);
                } else {(0, _utilities.userLog)("\\+w seems unclosed: 'adjustedRest' from '".concat(rest, "'"));break;}} // Remove any other \f fields in the line
              var nextFIndex;while ((nextFIndex = adjustedRest.indexOf('\\f + ')) >= 0) {var ixFEnd = adjustedRest.indexOf('\\f*');if (ixFEnd >= 0) {(0, _utilities.dataAssert)(ixFEnd > nextWIndex, "Expected closure at ".concat(ixFEnd, " to be AFTER \\w (").concat(nextFIndex, ")"));adjustedRest = adjustedRest.substring(0, nextFIndex) + adjustedRest.substring(nextFIndex + 5, ixFEnd) + adjustedRest.substring(ixFEnd + 3, adjustedRest.length); // functionLog(`checkUSFMLineText(${lineNumber}, ${C}:${V}, ${marker}='${rest}', ${lineLocation}, ${JSON.stringify(checkingOptions)})…`);
                  // debugLog(`After removing footnote: '${adjustedRest}'`);
                } else {(0, _utilities.userLog)("\\f seems unclosed: 'adjustedRest' from '".concat(rest, "'"));break;}}if (adjustedRest) {var _characterIndex5;if ((_characterIndex5 = adjustedRest.indexOf('"')) >= 0) {var _excerpt7 = (_characterIndex5 > excerptHalfLength ? '…' : '') + adjustedRest.substring(_characterIndex5 - excerptHalfLength, _characterIndex5 + excerptHalfLengthPlus).replace(/ /g, '␣') + (_characterIndex5 + excerptHalfLengthPlus < adjustedRest.length ? '…' : '');addNoticePartial({ priority: 776, message: 'Unexpected " straight quote character', details: details, lineNumber: lineNumber, C: C, V: V, excerpt: _excerpt7, location: lineLocation }); // debugLog(`ERROR 776: in ${marker} '${adjustedRest}' from '${rest}'`);
                }if ((_characterIndex5 = adjustedRest.indexOf("'")) >= 0) {var _excerpt8 = (_characterIndex5 > excerptHalfLength ? '…' : '') + adjustedRest.substring(_characterIndex5 - excerptHalfLength, _characterIndex5 + excerptHalfLengthPlus).replace(/ /g, '␣') + (_characterIndex5 + excerptHalfLengthPlus < adjustedRest.length ? '…' : '');addNoticePartial({ priority: 775, message: "Unexpected ' straight quote character", details: details, lineNumber: lineNumber, C: C, V: V, excerpt: _excerpt8, location: lineLocation }); // debugLog(`ERROR 775: in ${marker} '${adjustedRest}' from '${rest}'`);
                }if (adjustedRest.indexOf('\\') >= 0 || adjustedRest.indexOf('|') >= 0) {// functionLog(`checkUSFMLineText ${languageCode} ${filename} ${lineNumber} ${C}:${V} somehow ended up with ${marker}='${adjustedRest}'`);
                  _characterIndex5 = adjustedRest.indexOf('\\');if (_characterIndex5 === -1) _characterIndex5 = adjustedRest.indexOf('|');var _excerpt9 = (_characterIndex5 > excerptHalfLength ? '…' : '') + adjustedRest.substring(_characterIndex5 - excerptHalfLength, _characterIndex5 + excerptHalfLengthPlus).replace(/ /g, '␣') + (_characterIndex5 + excerptHalfLengthPlus < adjustedRest.length ? '…' : '');addNoticePartial({ priority: 875, message: "Unexpected USFM field", details: details, lineNumber: lineNumber, C: C, V: V, excerpt: _excerpt9, location: lineLocation });}if (adjustedRest !== rest) // Only re-check if line has changed (because original is checked in checkUSFMLineInternals())
                  // Note: false (below) is for allowedLinks flag
                  ourCheckTextField(lineNumber, C, V, 'raw', "from \\".concat(marker), adjustedRest, false, lineLocation, checkingOptions);}};checkUSFMFileContents = function _checkUSFMFileContent(filename, fileText, markerSet, fileLocation, checkingOptions) {// Does global checks on the file
              // Note: These run the risk of duplicating messages that are found within individual lines.
              //          However, it’s common in USFM for parentheses to open '(' in one verse
              //                      and close ')' in another. So the USFM line check can’t check that.
              //          Also, the USFM v3.0 spec seems to allow/require whitespace reduction,
              //              i.e., newLines can conceivably appear WITHIN a footnote for example.
              // functionLog(`checkUSFMFileContents(${filename}, ${fileText.length}, ${markerSet}, ${fileLocation}, ${JSON.stringify(checkingOptions)})…`);
              // Check markers like \add ... \add*, \f .. \f*
              checkUSFMCharacterFields(filename, fileText, fileLocation); // Now do the general global checks (e.g., for general punctuation)
              ourBasicFileChecks(filename, fileText, fileLocation, checkingOptions); // Handled elsewhere
              // for (const compulsoryMarker of COMPULSORY_MARKERS)
              //     if (!markerSet.has(compulsoryMarker))
              //         addNoticePartial({ priority: 819, message: "Missing compulsory USFM line", excerpt: `missing \\${compulsoryMarker}`, location: fileLocation });
              var _iterator17 = _createForOfIteratorHelper(EXPECTED_MARKERS),_step17;try {for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {var _expectedMarker2 = _step17.value;if (!markerSet.has(_expectedMarker2) && (!_expectedMarker2.endsWith('1') || !markerSet.has(_expectedMarker2.substring(0, _expectedMarker2.length - 1)))) // NOTE: \mt(1) is required by Proskomma so increased this priority
                    addNoticePartial({ priority: _expectedMarker2 === 'mt1' ? 921 : 519, message: "Missing expected USFM line", excerpt: "missing \\".concat(_expectedMarker2), location: fileLocation });}} catch (err) {_iterator17.e(err);} finally {_iterator17.f();}if (books.isExtraBookID(bookID)) {var _iterator18 = _createForOfIteratorHelper(EXPECTED_PERIPHERAL_BOOK_MARKERS),_step18;try {for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {var expectedMarker = _step18.value;if (!markerSet.has(expectedMarker)) addNoticePartial({ priority: 517, message: "Missing expected USFM line", excerpt: "missing \\".concat(expectedMarker), location: fileLocation });else {var _iterator19 = _createForOfIteratorHelper(EXPECTED_BIBLE_BOOK_MARKERS),_step19;try {for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {var _expectedMarker = _step19.value;if (!markerSet.has(_expectedMarker)) addNoticePartial({ priority: 518, message: "Missing expected USFM line", excerpt: "missing \\".concat(_expectedMarker), location: fileLocation });}} catch (err) {_iterator19.e(err);} finally {_iterator19.f();}}}} catch (err) {_iterator18.e(err);} finally {_iterator18.f();}}var _iterator20 = _createForOfIteratorHelper(DEPRECATED_MARKERS),_step20;try {for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {var deprecatedMarker = _step20.value;if (markerSet.has(deprecatedMarker)) addNoticePartial({ priority: 218, message: "Using deprecated USFM marker", excerpt: "\\".concat(deprecatedMarker), location: fileLocation });}} catch (err) {_iterator20.e(err);} finally {_iterator20.f();}};checkUSFMCharacterFields = function _checkUSFMCharacterFi(filename, fileText, fileLocation) {// Check matched pairs
              var _iterator16 = _createForOfIteratorHelper(MATCHED_CHARACTER_FORMATTING_PAIRS),_step16;try {for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {var punctSet = _step16.value;var opener = punctSet[0],closer = punctSet[1];var lCount = (0, _textHandlingFunctions.countOccurrences)(fileText, opener);var rCount = (0, _textHandlingFunctions.countOccurrences)(fileText, closer);if (lCount !== rCount) addNoticePartial({ priority: 873, message: "Mismatched ".concat(opener).concat(closer, " fields"), excerpt: "(left=".concat(lCount.toLocaleString(), ", right=").concat(rCount.toLocaleString(), ")"), location: fileLocation });}} catch (err) {_iterator16.e(err);} finally {_iterator16.f();}};ourBasicFileChecks = function _ourBasicFileChecks(filename, fileText, fileLocation, checkingOptions) {// Does basic checks for small errors like leading/trailing spaces, etc.
              // We assume that checking for compulsory fields is done elsewhere
              // Updates the global list of notices
              //parameterAssert(filename !== undefined, "cUSFM ourBasicFileChecks: 'filename' parameter should be defined");
              //parameterAssert(typeof filename === 'string', `cUSFM ourBasicFileChecks: 'filename' parameter should be a string not a '${typeof filename}'`);
              //parameterAssert(fileText !== undefined, "cUSFM ourBasicFileChecks: 'fileText' parameter should be defined");
              //parameterAssert(typeof fileText === 'string', `cUSFM ourBasicFileChecks: 'fileText' parameter should be a string not a '${typeof fileText}'`);
              //parameterAssert(checkingOptions !== undefined, "cUSFM ourBasicFileChecks: 'checkingOptions' parameter should be defined");
              var resultObject = (0, _fileTextCheck.checkTextfileContents)(languageCode, repoCode, 'USFM', filename, fileText, fileLocation, checkingOptions); // If we need to put everything through addNoticePartial, e.g., for debugging or filtering
              //  process results line by line
              var _iterator15 = _createForOfIteratorHelper(resultObject.noticeList),_step15;try {for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {var noticeEntry = _step15.value;(0, _utilities.logicAssert)(Object.keys(noticeEntry).length >= 5, "USFM ourBasicFileChecks notice length=".concat(Object.keys(noticeEntry).length));addNoticePartial(noticeEntry);}} catch (err) {_iterator15.e(err);} finally {_iterator15.f();}};ourCheckTextField = function _ourCheckTextField(lineNumber, C, V, fieldType, fieldName, fieldText, allowedLinks, fieldLocation, checkingOptions) {// Does basic checks for small errors like leading/trailing spaces, etc.
              // We assume that checking for compulsory fields is done elsewhere
              // Updates the global list of notices
              // debugLog(`cUSFM ourCheckTextField(${lineNumber}, ${C}:${V}, ${fieldName}, (${fieldText.length} chars), ${allowedLinks}, ${fieldLocation}, ${JSON.stringify(checkingOptions)})…`);
              //parameterAssert(lineNumber !== undefined, "cUSFM ourCheckTextField: 'lineNumber' parameter should be defined");
              //parameterAssert(typeof lineNumber === 'number', `cUSFM ourCheckTextField: 'lineNumber' parameter should be a number not a '${typeof lineNumber}'`);
              //parameterAssert(C !== undefined, "cUSFM ourCheckTextField: 'C' parameter should be defined");
              //parameterAssert(typeof C === 'string', `cUSFM ourCheckTextField: 'C' parameter should be a string not a '${typeof C}'`);
              //parameterAssert(V !== undefined, "cUSFM ourCheckTextField: 'V' parameter should be defined");
              //parameterAssert(typeof V === 'string', `cUSFM ourCheckTextField: 'V' parameter should be a string not a '${typeof V}'`);
              //parameterAssert(fieldType !== undefined, "cUSFM ourCheckTextField: 'fieldType' parameter should be defined");
              //parameterAssert(typeof fieldType === 'string', `cUSFM ourCheckTextField: 'fieldType' parameter should be a string not a '${typeof fieldType}'`);
              //parameterAssert(fieldType === 'USFM' || fieldType === 'raw', `cUSFM ourCheckTextField: Unrecognized 'fieldType' parameter: ${fieldType}`);
              //parameterAssert(fieldName !== undefined, "cUSFM ourCheckTextField: 'fieldName' parameter should be defined");
              //parameterAssert(typeof fieldName === 'string', `cUSFM ourCheckTextField: 'fieldName' parameter should be a string not a '${typeof fieldName}'`);
              //parameterAssert(fieldName !== '', `cUSFM ourCheckTextField: ${fieldType} 'fieldName' parameter should be not be an empty string`);
              //parameterAssert(fieldText !== undefined, "cUSFM ourCheckTextField: 'fieldText' parameter should be defined");
              //parameterAssert(typeof fieldText === 'string', `cUSFM ourCheckTextField: 'fieldText' parameter should be a string not a '${typeof fieldText}'`);
              //parameterAssert(allowedLinks === true || allowedLinks === false, "cUSFM ourCheckTextField: allowedLinks parameter must be either true or false");
              //parameterAssert(fieldLocation !== undefined, "cUSFM ourCheckTextField: 'fieldLocation' parameter should be defined");
              //parameterAssert(typeof fieldLocation === 'string', `cUSFM ourCheckTextField: 'fieldLocation' parameter should be a string not a '${typeof fieldLocation}'`);
              var dbtcResultObject = (0, _fieldTextCheck.checkTextField)(languageCode, repoCode, fieldType, fieldName, fieldText, allowedLinks, fieldLocation, checkingOptions); // Process noticeList line by line to filter out potential false positives
              //  for this particular kind of text field
              var _iterator14 = _createForOfIteratorHelper(dbtcResultObject.noticeList),_step14;try {for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {var noticeEntry = _step14.value; // debugLog("Notice keys", JSON.stringify(Object.keys(noticeEntry)));
                  (0, _utilities.logicAssert)(Object.keys(noticeEntry).length >= 4, "USFM ourCheckTextField notice length=".concat(Object.keys(noticeEntry).length));addNoticePartial(_objectSpread(_objectSpread({}, noticeEntry), {}, { lineNumber: lineNumber, C: C, V: V })); // }
                }} catch (err) {_iterator14.e(err);} finally {_iterator14.f();}};CVCheck = function _CVCheck(bookID, givenText, CVlocation) {/*
              This check uses the USFM-JS package to parse the USFM
                  and then it checks the results to make sure all expected verses are there.
               This has the side advantage that it’s using exactly the same code/package that’s
                  used by tCore and tC Create.
               Note that for verse bridges, USFM-JS returns the bridge, e.g., 24-25
                  AS WELL AS an entry for the bridged verses, e.g., 24 and 25.
               Sadly this package doesn’t return any errors or warnings from its parsing
                  so that’s handle other ways in other places.
               Note that this code below does NOT check for chapters and verses
                  being in the correct order. That’s done elsewhere.
              */ // functionLog(`Running CVCheck(${bookID}, ${givenText.length}, ${CVlocation}) using USFM-JS (can take quite a while for a large book)…`);
              var chapterNumberString, verseNumberString;var MINIMUM_TEXT_WORDS = 4;var MINIMUM_WORD_LENGTH = 2;function hasText(verseObjects) {var gotDeep = false;var _iterator2 = _createForOfIteratorHelper(verseObjects),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var someObject = _step2.value; // debugLog("someObject", JSON.stringify(someObject));
                    if (someObject['type'] === 'text' && someObject['text'].length > MINIMUM_TEXT_WORDS) return true;if (someObject['type'] === 'word' && someObject['text'].length > MINIMUM_WORD_LENGTH) return true;if (someObject['type'] === 'milestone') {var _iterator3 = _createForOfIteratorHelper(someObject['children']),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var someSubobject = _step3.value; // debugLog("someSubobject", JSON.stringify(someSubobject));
                          if (someSubobject['type'] === 'text' && someSubobject['text'].length > MINIMUM_TEXT_WORDS) return true;if (someSubobject['type'] === 'word' && someSubobject['text'].length > MINIMUM_WORD_LENGTH) return true;if (someSubobject['type'] === 'milestone') {var _iterator4 = _createForOfIteratorHelper(someSubobject['children']),_step4;try {for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {var someSub2object = _step4.value; // debugLog("someSub2object", JSON.stringify(someSub2object));
                                if (someSub2object['type'] === 'text' && someSub2object['text'].length > MINIMUM_TEXT_WORDS) return true;if (someSub2object['type'] === 'word' && someSub2object['text'].length > MINIMUM_WORD_LENGTH) return true;if (someSub2object['type'] === 'milestone') {var _iterator5 = _createForOfIteratorHelper(someSub2object['children']),_step5;try {for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {var someSub3object = _step5.value; // debugLog("someSub3object", JSON.stringify(someSub3object));
                                      if (someSub3object['type'] === 'text' && someSub3object['text'].length > MINIMUM_TEXT_WORDS) return true;if (someSub3object['type'] === 'word' && someSub3object['text'].length > MINIMUM_WORD_LENGTH) return true;if (someSub3object['type'] === 'milestone') {var _iterator6 = _createForOfIteratorHelper(someSub3object['children']),_step6;try {for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {var someSub4object = _step6.value; // debugLog("someSub4object", JSON.stringify(someSub4object));
                                            if (someSub4object['type'] === 'text' && someSub4object['text'].length > MINIMUM_TEXT_WORDS) return true;if (someSub4object['type'] === 'word' && someSub4object['text'].length > MINIMUM_WORD_LENGTH) return true;if (someSub4object['type'] === 'milestone') {var _iterator7 = _createForOfIteratorHelper(someSub4object['children']),_step7;try {for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {var someSub5object = _step7.value; // debugLog("someSub5object", JSON.stringify(someSub5object));
                                                  if (someSub5object['type'] === 'text' && someSub5object['text'].length > MINIMUM_TEXT_WORDS) return true;if (someSub5object['type'] === 'word' && someSub5object['text'].length > MINIMUM_WORD_LENGTH) return true;if (someSub5object['type'] === 'milestone') {var _iterator8 = _createForOfIteratorHelper(someSub5object['children']),_step8;try {for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {var someSub6object = _step8.value; // debugLog("someSub6object", bookID, CVlocation, JSON.stringify(someSub6object));
                                                        if (someSub6object['type'] === 'text' && someSub6object['text'].length > MINIMUM_TEXT_WORDS) return true;if (someSub6object['type'] === 'word' && someSub6object['text'].length > MINIMUM_WORD_LENGTH) return true;if (someSub6object['type'] === 'milestone') {var _iterator9 = _createForOfIteratorHelper(someSub6object['children']),_step9;try {for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {var someSub7object = _step9.value; // debugLog("someSub7object", bookID, CVlocation, JSON.stringify(someSub7object));
                                                              if (someSub7object['type'] === 'text' && someSub7object['text'].length > MINIMUM_TEXT_WORDS) return true;if (someSub7object['type'] === 'word' && someSub7object['text'].length > MINIMUM_WORD_LENGTH) return true;if (someSub7object['type'] === 'milestone') {// UST Luke 15:3 has eight levels of nesting !!!
                                                                var _iterator10 = _createForOfIteratorHelper(someSub7object['children']),_step10;try {for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {var someSub8object = _step10.value; // debugLog("someSub8object", bookID, CVlocation, JSON.stringify(someSub8object));
                                                                    if (someSub8object['type'] === 'text' && someSub8object['text'].length > MINIMUM_TEXT_WORDS) return true;if (someSub8object['type'] === 'word' && someSub8object['text'].length > MINIMUM_WORD_LENGTH) return true;if (someSub8object['type'] === 'milestone') {var _iterator11 = _createForOfIteratorHelper(someSub8object['children']),_step11;try {for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {var someSub9object = _step11.value; // debugLog("someSub9object", bookID, CVlocation, JSON.stringify(someSub9object));
                                                                          if (someSub9object['type'] === 'text' && someSub9object['text'].length > MINIMUM_TEXT_WORDS) return true;if (someSub9object['type'] === 'word' && someSub9object['text'].length > MINIMUM_WORD_LENGTH) return true;if (someSub9object['type'] === 'milestone') {var _iterator12 = _createForOfIteratorHelper(someSub9object['children']),_step12;try {for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {var someSub10object = _step12.value; // debugLog("someSub10object", bookID, CVlocation, JSON.stringify(someSub10object));
                                                                                if (someSub10object['type'] === 'text' && someSub10object['text'].length > MINIMUM_TEXT_WORDS) return true;if (someSub10object['type'] === 'word' && someSub10object['text'].length > MINIMUM_WORD_LENGTH) return true;if (someSub10object['type'] === 'milestone') {// UST Obadiah 1:8 has eleven levels of nesting !!!
                                                                                  var _iterator13 = _createForOfIteratorHelper(someSub10object['children']),_step13;try {for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {var someSub11object = _step13.value; // debugLog("someSub11object", bookID, CVlocation, JSON.stringify(someSub11object));
                                                                                      if (someSub11object['type'] === 'text' && someSub11object['text'].length > MINIMUM_TEXT_WORDS) return true;if (someSub11object['type'] === 'word' && someSub11object['text'].length > MINIMUM_WORD_LENGTH) return true;if (someSub11object['type'] === 'milestone') gotDeep = true;}} catch (err) {_iterator13.e(err);} finally {_iterator13.f();}}}} catch (err) {_iterator12.e(err);} finally {_iterator12.f();}}}} catch (err) {_iterator11.e(err);} finally {_iterator11.f();}}}} catch (err) {_iterator10.e(err);} finally {_iterator10.f();}}}} catch (err) {_iterator9.e(err);} finally {_iterator9.f();}}}} catch (err) {_iterator8.e(err);} finally {_iterator8.f();}}}} catch (err) {_iterator7.e(err);} finally {_iterator7.f();}}}} catch (err) {_iterator6.e(err);} finally {_iterator6.f();}}}} catch (err) {_iterator5.e(err);} finally {_iterator5.f();}}}} catch (err) {_iterator4.e(err);} finally {_iterator4.f();}}}} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}}}} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}if (gotDeep) (0, _utilities.logicAssert)(false, "We need to add more depth levels to hasText() for ".concat(bookID, " ").concat(chapterNumberString, ":").concat(verseNumberString)); // debugLog(`hasText() for ${chapterNumberString}:${verseNumberString} returning false with ${typeof verseObjects} (${verseObjects.length}): ${JSON.stringify(verseObjects)}`);
                return false;} // end of hasText function
              // Main code for CVCheck function
              // const lowercaseBookID = bookID.toLowerCase();
              var expectedVersesPerChapterList = [];try {(0, _utilities.logicAssert)(lowercaseBookID !== 'obs', "Shouldn’t happen in usfm-text-check1");expectedVersesPerChapterList = books.expectedVersesPerChapterList(bookID); // A list of integers -- numVerses for each chapter
                // debugLog("Got chapterList", JSON.stringify(expectedVersesPerChapterList));
              } catch (_unused) {} // Try doing this using USFM-JS via runUsfmJsCheck()
              var result1 = (0, _usfmJsCheck.runUsfmJsCheck)(givenText); // debugLog("Got a JSON result", JSON.stringify(result1));
              // debugLog("Got a JSON headers result", JSON.stringify(result1.returnedJSON.headers));
              // debugLog("Got a JSON chapters result", JSON.stringify(result1.returnedJSON.chapters));
              for (chapterNumberString in result1.returnedJSON.chapters) {// debugLog(`chapterNumberString=${chapterNumberString}`);
                // if (chapterNumberString === '3')
                //     userLog(`chapter ${chapterNumberString} ${JSON.stringify(result1.returnedJSON.chapters[chapterNumberString])}`);
                var chapterInt = void 0;try {chapterInt = (0, _utilities.ourParseInt)(chapterNumberString);} catch (usfmCIerror) {(0, _utilities.userLog)("CVCheck couldn\u2019t convert ".concat(bookID, " chapter '").concat(chapterNumberString, "': ").concat(usfmCIerror));}if (chapterInt < 1 || chapterInt > expectedVersesPerChapterList.length) addNoticePartial({ priority: 869, message: "Chapter number out of range", C: chapterNumberString, excerpt: "".concat(bookID, " ").concat(chapterNumberString), location: CVlocation });else {var discoveredVerseList = [],discoveredVerseWithTextList = []; // debugLog(`Chapter ${chapterNumberString} verses ${Object.keys(result1.returnedJSON.chapters[chapterNumberString])}`);
                  for (verseNumberString in result1.returnedJSON.chapters[chapterNumberString]) {if (verseNumberString === 'front') continue; // skip the rest here
                    // if (chapterNumberString === '3')
                    //     userLog(`verseNumberString=${verseNumberString}`);
                    // if (chapterNumberString === '3' && verseNumberString === '14')
                    //     userLog(`verse ${verseNumberString} ${JSON.stringify(result1.returnedJSON.chapters[chapterNumberString][verseNumberString])}`);
                    var verseObjects = result1.returnedJSON.chapters[chapterNumberString][verseNumberString]['verseObjects']; // if (chapterNumberString === '3' && verseNumberString === '14')
                    //     userLog(`verseObjects=${verseObjects}`);
                    var verseHasText = hasText(verseObjects);if (verseNumberString.indexOf('-') >= 0) {// It’s a verse bridge
                      var bits = verseNumberString.split('-');var firstVString = bits[0],secondVString = bits[1];var intFirstV = void 0,intSecondV = void 0;try {intFirstV = (0, _utilities.ourParseInt)(firstVString);intSecondV = (0, _utilities.ourParseInt)(secondVString);for (var v = intFirstV; v <= intSecondV; v++) {discoveredVerseList.push(v);if (verseHasText) discoveredVerseWithTextList.push(v);}} catch (usfmVIerror) {addNoticePartial({ priority: 762, message: "Unable to convert verse bridge numbers to integers", C: chapterNumberString, V: verseNumberString, characterIndex: 3, excerpt: verseNumberString, location: "".concat(CVlocation, " with ").concat(usfmVIerror) });}} else {// It’s NOT a verse bridge
                      var verseInt = void 0;try {verseInt = (0, _utilities.ourParseInt)(verseNumberString);discoveredVerseList.push(verseInt);} catch (usfmPIerror) {(0, _utilities.userLog)("We couldn\u2019t convert ".concat(bookID, " ").concat(chapterNumberString, " verse '").concat(verseNumberString, "': ").concat(usfmPIerror));}if (verseInt < 1 || verseInt > expectedVersesPerChapterList[chapterInt - 1]) addNoticePartial({ priority: 868, message: "Verse number out of range", C: chapterNumberString, V: verseNumberString, excerpt: "".concat(bookID, " ").concat(chapterNumberString, ":").concat(verseNumberString), location: CVlocation });if (verseHasText) discoveredVerseWithTextList.push(verseInt);}} // Check that expected verses numbers were actually all there
                  // debugLog("Doing missing verse check");
                  for (var _v = 1; _v <= expectedVersesPerChapterList[chapterInt - 1]; _v++) {if (!discoveredVerseList.includes(_v)) if (books.isOftenMissing(bookID, chapterInt, _v)) addNoticePartial({ priority: 67, C: chapterNumberString, V: "".concat(_v), message: "Verse appears to be left out", location: CVlocation });else addNoticePartial({ priority: 867, C: chapterNumberString, V: "".concat(_v), message: "Verse appears to be missing", location: CVlocation }); // Check for existing verses but missing text
                    if (!discoveredVerseWithTextList.includes(_v)) {// const firstVerseObject = result1.returnedJSON.chapters[chapterNumberString][v]['verseObjects'][0];
                      // debugLog("firstVerseObject", JSON.stringify(firstVerseObject));
                      addNoticePartial({ priority: 866, C: chapterNumberString, V: "".concat(_v), message: "Verse seems to have no text", location: CVlocation });}}}}addSuccessMessage("Checked C:V patterns for ".concat(bookID).concat(CVlocation));};ourRunBCSGrammarCheck = function _ourRunBCSGrammarChec(filename, fileText, fileLocation) {// Runs the BCS USFM Grammar checker
              //  which can be quite time-consuming on large, complex USFM files
              // functionLog("Running our BCS USFM grammar check (can take quite a while for a large book)…");
              var grammarCheckResult = (0, _BCSUsfmGrammarCheck.runBCSGrammarCheck)('strict', bookID, fileText, filename, fileLocation, checkingOptions); // NOTE: We haven’t figured out how to get ERRORS out of this parser yet
              // debugLog(`  Finished our BCS USFM grammar check with ${grammarCheckResult.isValidUSFM} and ${grammarCheckResult.warnings.length} warnings.`);
              addSuccessMessage("Checked USFM Grammar (strict mode) ".concat(grammarCheckResult.isValidUSFM ? "without errors" : " (but the USFM DIDN’T validate)")); // if (!grammarCheckResult.isValidUSFM) // TEMP DEGRADE TO WARNING 994 -> 544 ................XXXXXXXXXXXXXXXXXXXXXX
              // Don’t do this since we add the actual error message elsewhere now
              // addNoticePartial({priority:994, '', '', `USFM3 Grammar Check (strict mode) doesn’t pass`, location:fileLocation});
              // We only get one error if it fails
              if (grammarCheckResult.error && grammarCheckResult.error.priority) // Prevent these false alarms (from Ohm schema issues, esp. empty lemma="" fields)
                if (!grammarCheckResult.error.excerpt // Note: checking the excerpt might not always be reliable if they choose a length < 10
                || grammarCheckResult.error.excerpt.indexOf('mma="" ') < 0 // see https://github.com/Bridgeconn/usfm-grammar/issues/87
                && grammarCheckResult.error.message.indexOf('Expected "c", "v", ') < 0 // forgotten what this prevents ???
                && grammarCheckResult.error.message.indexOf('Expected "f*", "+", ') < 0 // see https://github.com/Bridgeconn/usfm-grammar/issues/86
                ) addNoticePartial(grammarCheckResult.error); // debugLog("  Warnings:", JSON.stringify(grammarCheckResult.warnings));
              // Display these warnings but with a lower priority
              var _iterator = _createForOfIteratorHelper(grammarCheckResult.warnings),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var warningString = _step.value;if (!warningString.startsWith("Empty lines present") // we allow empty lines in our USFM
                  && !warningString.startsWith("Trailing spaces present at line end") // we find these ourselves
                  ) addNoticePartial({ priority: 102, message: "USFMGrammar: ".concat(warningString), location: fileLocation });}} catch (err) {_iterator.e(err);} finally {_iterator.f();}if (!grammarCheckResult.isValidUSFM) {var relaxedGrammarCheckResult = (0, _BCSUsfmGrammarCheck.runBCSGrammarCheck)('relaxed', bookID, fileText, filename, fileLocation);addSuccessMessage("Checked USFM Grammar (relaxed mode) ".concat(relaxedGrammarCheckResult.isValidUSFM ? "without errors" : " (but the USFM DIDN’T validate)"));if (!relaxedGrammarCheckResult.isValidUSFM) addNoticePartial({ priority: 644, message: "USFM3 Grammar Check (relaxed mode) doesn’t pass either", location: fileLocation });}};addNoticePartial = function _addNoticePartial(noticeObject) {// debugLog("checkUSFMText addNoticePartial:", JSON.stringify(noticeObject));
              // functionLog(`checkUSFMText addNoticePartial: (priority=${noticeObject.priority}) ${noticeObject.C}:${noticeObject.V} ${noticeObject.message}${noticeObject.characterIndex > 0 ? ` (at character ${noticeObject.characterIndex})` : ""}${noticeObject.excerpt ? ` ${noticeObject.excerpt}` : ""}${noticeObject.location}`);
              //parameterAssert(noticeObject.priority !== undefined, "cUSFM addNoticePartial: 'priority' parameter should be defined");
              //parameterAssert(typeof noticeObject.priority === 'number', `cUSFM addNoticePartial: 'priority' parameter should be a number not a '${typeof noticeObject.priority}': ${noticeObject.priority}`);
              //parameterAssert(noticeObject.message !== undefined, "cUSFM addNoticePartial: 'message' parameter should be defined");
              //parameterAssert(typeof noticeObject.message === 'string', `cUSFM addNoticePartial: 'message' parameter should be a string not a '${typeof noticeObject.message}': ${noticeObject.message}`);
              // //parameterAssert(C !== undefined, "cUSFM addNoticePartial: 'C' parameter should be defined");
              if (noticeObject.C) {//parameterAssert(typeof noticeObject.C === 'string', `cUSFM addNoticePartial: 'C' parameter should be a string not a '${typeof noticeObject.C}': ${noticeObject.C}`);
              } // //parameterAssert(V !== undefined, "cUSFM addNoticePartial: 'V' parameter should be defined");
              if (noticeObject.V) {//parameterAssert(typeof noticeObject.V === 'string', `cUSFM addNoticePartial: 'V' parameter should be a string not a '${typeof noticeObject.V}': ${noticeObject.V}`);
              } // //parameterAssert(characterIndex !== undefined, "cUSFM addNoticePartial: 'characterIndex' parameter should be defined");
              if (noticeObject.characterIndex !== undefined) {//parameterAssert(typeof noticeObject.characterIndex === 'number', `cUSFM addNoticePartial: 'characterIndex' parameter should be a number not a '${typeof noticeObject.characterIndex}': ${noticeObject.characterIndex}`);
              } // //parameterAssert(excerpt !== undefined, "cUSFM addNoticePartial: 'excerpt' parameter should be defined");
              if (noticeObject.excerpt) {//parameterAssert(typeof noticeObject.excerpt === 'string', `cUSFM addNoticePartial: 'excerpt' parameter should be a string not a '${typeof noticeObject.excerpt}': ${noticeObject.excerpt}`);
              } //parameterAssert(noticeObject.location !== undefined, "cUSFM addNoticePartial: 'location' parameter should be defined");
              //parameterAssert(typeof noticeObject.location === 'string', `cUSFM addNoticePartial: 'location' parameter should be a string not a '${typeof noticeObject.location}': ${noticeObject.location}`);
              // Doublecheck -- we don’t want "Mismatched {}" per line, only per file
              // eslint-disable-next-line no-unused-vars
              var noticeObjectString = JSON.stringify(noticeObject); //parameterAssert(noticeObject.message.indexOf("Mismatched {}") === -1 || noticeObject.lineNumber === undefined, `checkUSFMText addNoticePartial: got bad notice: ${noticeObjectString}`);
              //parameterAssert(noticeObjectString.indexOf('NONE') === -1 && noticeObjectString.indexOf('SPECIAL') === -1, `checkUSFMText addNoticePartial: 'NONE' & 'SPECIAL' shouldn't make it thru to end user: ${noticeObjectString}`)
              if (noticeObject.debugChain) noticeObject.debugChain = "checkUSFMText ".concat(noticeObject.debugChain);result.noticeList.push(_objectSpread(_objectSpread({}, noticeObject), {}, { bookID: bookID, filename: filename }));};addSuccessMessage = function _addSuccessMessage(successString) {// functionLog(`checkUSFMText success: ${successString}`);
              result.successList.push(successString);}; /* This function is optimised for checking the entire file, i.e., all lines.
             bookID is a three-character UPPERCASE USFM book identifier.
             filename parameter can be an empty string if we don’t have one.
              Returns a result object containing a successList and a noticeList
             */ // functionLog(`checkUSFMText(${languageCode}, ${repoCode}, ${bookID}, ${filename}, ${givenText.length.toLocaleString()} chars, '${givenLocation}', ${JSON.stringify(checkingOptions)})…`);
            // const match = HEBREW_CANTILLATION_REGEX.exec('\\f + \\ft Q \\+w הִנֵּ֤ה|lemma="הִנֵּ֤ה" strong="H2009" x-morph="He,Tm"\\+w*\\f*');
            // console.log(`Got test cantillation match: ${typeof match} ${match.length} '${JSON.stringify(match)}'`);
            //parameterAssert(languageCode !== undefined, "checkUSFMText: 'languageCode' parameter should be defined");
            //parameterAssert(typeof languageCode === 'string', `checkUSFMText: 'languageCode' parameter should be a string not a '${typeof languageCode}'`);
            //parameterAssert(repoCode !== undefined, "checkUSFMText: 'repoCode' parameter should be defined");
            //parameterAssert(typeof repoCode === 'string', `checkUSFMText: 'repoCode' parameter should be a string not a '${typeof repoCode}'`);
            //parameterAssert(REPO_CODES_LIST.includes(repoCode), `checkUSFMText: 'repoCode' parameter should not be '${repoCode}'`);
            //parameterAssert(bookID !== undefined, "checkUSFMText: 'bookID' parameter should be defined");
            //parameterAssert(typeof bookID === 'string', `checkUSFMText: 'bookID' parameter should be a string not a '${typeof bookID}'`);
            //parameterAssert(bookID.length === 3, `checkUSFMText: 'bookID' parameter should be three characters long not ${bookID.length}`);
            //parameterAssert(bookID.toUpperCase() === bookID, `checkUSFMText: 'bookID' parameter should be UPPERCASE not '${bookID}'`);
            //parameterAssert(bookID === 'OBS' || books.isValidBookID(bookID), `checkUSFMText: '${bookID}' is not a valid USFM book identifier`);
            //parameterAssert(filename !== undefined, "checkUSFMText: 'filename' parameter should be defined");
            //parameterAssert(typeof filename === 'string', `checkUSFMText: 'filename' parameter should be a string not a '${typeof filename}'`);
            //parameterAssert(givenLocation !== undefined, "checkUSFMText: 'givenRowLocation' parameter should be defined");
            //parameterAssert(typeof givenLocation === 'string', `checkUSFMText: 'givenRowLocation' parameter should be a string not a '${typeof givenLocation}'`);
            //parameterAssert(checkingOptions !== undefined, "checkUSFMText: 'checkingOptions' parameter should be defined");
            ourLocation = givenLocation;if (ourLocation && ourLocation[0] !== ' ') ourLocation = " ".concat(ourLocation);try {excerptLength = checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.excerptLength;} catch (usfmELerror) {}if (typeof excerptLength !== 'number' || isNaN(excerptLength)) {excerptLength = _defaults.DEFAULT_EXCERPT_LENGTH; // debugLog(`Using default excerptLength=${excerptLength}`);
            } // else
            // debugLog(`Using supplied excerptLength=${excerptLength} cf. default=${DEFAULT_EXCERPT_LENGTH}`);
            excerptHalfLength = Math.floor(excerptLength / 2); // rounded down
            excerptHalfLengthPlus = Math.floor((excerptLength + 1) / 2); // rounded up
            // debugLog(`Using excerptHalfLength=${excerptHalfLength}`, `excerptHalfLengthPlus=${excerptHalfLengthPlus}`);
            lowercaseBookID = bookID.toLowerCase();validLineStartCharacters = VALID_LINE_START_CHARACTERS;if (repoCode === 'ST') validLineStartCharacters += '{';result = { successList: [], noticeList: [] }; // end of mainUSFMCheck function
            /* function runSlowTask(which) {
                // Ideally these should be run in parallel using multiprocessing
                //  See https://hackernoon.com/multithreading-multiprocessing-and-the-nodejs-event-loop-5b2929bd450b
                userLog(`runSlowTask(${which})`)
                return (which === 1)
                    ? mainUSFMCheck(bookID, filename, givenText, location)
                    : runBCSGrammarCheck(filename, givenText, location);
            } */ // Main code for checkUSFMText()
            // debugLog("Starting USFM checking tasks…");
            // const tasks = [1,2].map(runSlowTask);
            // const allResults = await Promise.all(tasks);
            // userLog(`  Finished all tasks with ${JSON.stringify(allResults)}.`);
            // userLog("  Finished all tasks.");
            // if (!allResults[1].isValidUSFM)
            //     addNoticePartial({priority: 942, "USFM Grammar check fails", location});
            // userLog("  Warnings:", JSON.stringify(allResults[1].warnings));
            // // Display these warnings but with a lower priority
            // for (const warningString of allResults[1].warnings)
            //     addNoticePartial({priority:103, `USFMGrammar: ${warningString.trim()}`, location});
            // NOTE: If we're careful about how/when we add their notices to our global list,
            //  we should be able to run these three slowish checks in parallel on different threads/processes
            allResults = [];_context7.t0 = allResults;_context7.next = 31;return mainUSFMCheck(bookID, filename, givenText, ourLocation);case 31:_context7.t1 = _context7.sent;_context7.t0.push.call(_context7.t0, _context7.t1);allResults.push(CVCheck(bookID, givenText, ourLocation));if (!books.isExtraBookID(bookID)) {numChapters = books.chaptersInBook(bookID);kB = Math.trunc(givenText.length / 1024);if (numChapters < 20 || kB < 2048) {// 2MB -- large files can run the grammar checker out of memory
                (0, _utilities.userLog)("Running the BCS USFMGrammar checker for ".concat(repoCode, " ").concat(bookID, " (").concat(kB.toLocaleString(), " KB) -- may take several ").concat(kB > 1200 ? 'minutes' : 'seconds', "\u2026"));allResults.push(ourRunBCSGrammarCheck(filename, givenText, ourLocation));} else {(0, _utilities.userLog)("Skipped running BCS USFMGrammar checker for ".concat(repoCode, " ").concat(bookID, " (").concat(kB.toLocaleString(), " KB with ").concat(numChapters, " chapters)")); // Success message seems not to be displayed in the demos
                addSuccessMessage("Skipped running BCS USFMGrammar checker for ".concat(repoCode, " ").concat(bookID, " (").concat(kB.toLocaleString(), " KB with ").concat(numChapters, " chapters)"));addNoticePartial({ priority: 25, message: "Note: skipped running BCS USFMGrammar checker for large book", details: "".concat(numChapters, " chapters (").concat(kB.toLocaleString(), " KB)"), location: ourLocation });}} // logicAssert(allResults.length === 2);
            // debugLog("allResults", JSON.stringify(allResults));
            // if (!allResults[1].isValidUSFM)
            //     addNoticePartial({priority: 941, "USFM Grammar check fails", location});
            // debugLog("  Warnings:", JSON.stringify(allResults[1].warnings));
            // // Display these warnings but with a lower priority
            // for (const warningString of allResults[1].warnings)
            // addNoticePartial({priority:103, `USFMGrammar: ${warningString.trim()}`, location});
            if (!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.suppressNoticeDisablingFlag)) {// functionLog(`checkUSFMText: calling removeDisabledNotices(${result.noticeList.length}) having ${JSON.stringify(checkingOptions)}`);
              result.noticeList = (0, _disabledNotices.removeDisabledNotices)(result.noticeList);} // debugLog(`  checkUSFMText returning with ${result.successList.length.toLocaleString()} success(es) and ${result.noticeList.length.toLocaleString()} notice(s).`);
            // functionLog(`checkUSFMText result is ${JSON.stringify(result)}`);
            return _context7.abrupt("return", result);case 37:case "end":return _context7.stop();}}}, _callee7);}));return _checkUSFMText.apply(this, arguments);}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,