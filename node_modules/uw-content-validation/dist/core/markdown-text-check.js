"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.checkMarkdownText = checkMarkdownText;var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defaults = require("./defaults");
var _fieldTextCheck = require("./field-text-check");
var _notesLinksCheck = require("./notes-links-check");

var _disabledNotices = require("./disabled-notices");

var _utilities = require("./utilities");function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {(0, _defineProperty2.default)(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}


var MARKDOWN_TEXT_VALIDATOR_VERSION_STRING = '0.7.3';


/**
 *
 * @param {string} languageCode, e.g., 'en'
 * @param {string} repoCode -- e.g., 'TN' or 'TQ2', etc.
 * @param {string} textOrFileName -- used for identification
 * @param {string} markdownText -- the actual text to be checked
 * @param {string} givenLocation
 * @param {Object} checkingOptions
 */function
checkMarkdownText(_x, _x2, _x3, _x4, _x5, _x6) {return _checkMarkdownText.apply(this, arguments);}







































































































































































































































































































































































































// end of checkMarkdownText function
function _checkMarkdownText() {_checkMarkdownText = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(languageCode, repoCode, textOrFileName, markdownText, givenLocation, checkingOptions) {var ourLocation, excerptLength, excerptHalfLength, excerptHalfLengthPlus, result, addSuccessMessage, addNotice, ourCheckTextField, ourCheckNotesLinksToOutside, _ourCheckNotesLinksToOutside, checkMarkdownLineContents, _checkMarkdownLineContents, lines, headerLevel, lastLine, indentLevels, suggestedLines, notifiedBlankLines, n, line, nextLine, notice, _notice, numLeadingSpaces, thisHeaderLevel, _notice2, previousIndentLevel, foundPreviousLevel, z, _notice3, suggestedLine, _notice4, _i, _arr, thisSet, thisField, thisRegex, count, characterIndex, iy, excerpt, suggestion;return _regenerator.default.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:_checkMarkdownLineContents = function _checkMarkdownLineCon2() {_checkMarkdownLineContents = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(lineNumber, lineText, lineLocation) {var thisText, suggestion;return _regenerator.default.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:if (!(lineText.indexOf('[') >= 0)) {_context2.next = 3;break;}_context2.next = 3;return ourCheckNotesLinksToOutside(lineNumber, lineText, givenLocation, checkingOptions);case 3:thisText = lineText; // so we can adjust it
                        // Remove leading and trailing hash signs #
                        thisText = thisText.replace(/^#+|#+$/g, ''); // debugLog(`After removing hashes have '${thisText}'`);
                        // Remove leading spaces
                        thisText = thisText.replace(/^ +/g, ''); // Remove leading block text markers >
                        while (thisText.startsWith('>')) {thisText = thisText.replace(/^>+ */g, '');} // if (thisText.indexOf('>') >= 0) userLog(`After removing leading block text markers from '${lineText}' still have '${thisText}'`);
                        // Remove leading spaces again
                        // thisText = thisText.replace(/^ +/g, '');
                        // debugLog(`After removing leading spaces have '${thisText}'`);
                        // // Remove leading asterisks
                        // thisText = thisText.replace(/^\*/g,'')
                        // debugLog(`After removing asterisks have '${thisText}'`);
                        // // Remove leading spaces again now
                        // thisText = thisText.replace(/^ +/g,'')
                        // debugLog(`After removing more leading spaces have '${thisText}'`);
                        if (thisText && lineText[0] !== '|') // Doesnâ€™t really make sense to check table line entries
                          suggestion = ourCheckTextField(textOrFileName, lineNumber, thisText, true, lineLocation, checkingOptions);if (!(thisText === lineText)) {_context2.next = 10;break;}return _context2.abrupt("return", suggestion);case 10:case "end":return _context2.stop();}}}, _callee2);}));return _checkMarkdownLineContents.apply(this, arguments);};checkMarkdownLineContents = function _checkMarkdownLineCon(_x11, _x12, _x13) {return _checkMarkdownLineContents.apply(this, arguments);};_ourCheckNotesLinksToOutside = function _ourCheckNotesLinksTo2() {_ourCheckNotesLinksToOutside = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(lineNumber, lineText, location, checkingOptions) {var adjustedTextOrFileName, adjustedLanguageCode, coTNlResultObject, _iterator2, _step2, coqNoticeEntry, _iterator3, _step3, checkedRepoName, _iterator4, _step4, checkedFilenameExtension;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0: // Checks that the TA/TW/Bible reference can be found
                        // Updates the global list of notices
                        // functionLog(`checkUSFMText ourCheckNotesLinksToOutside(${lineNumber}, ${C}:${V}, ${marker}, (${twLinkText.length}) '${twLinkText}', ${location}, ${JSON.stringify(checkingOptions)})`);
                        //parameterAssert(lineNumber !== undefined, "checkUSFMText ourCheckNotesLinksToOutside: 'lineNumber' parameter should be defined");
                        //parameterAssert(typeof lineNumber === 'number', `checkUSFMText ourCheckNotesLinksToOutside: 'lineNumber' parameter should be a number not a '${typeof lineNumber}': ${lineNumber}`);
                        //parameterAssert(lineText !== undefined, "checkUSFMText ourCheckNotesLinksToOutside: 'lineText' parameter should be defined");
                        //parameterAssert(typeof lineText === 'string', `checkUSFMText ourCheckNotesLinksToOutside: 'lineText' parameter should be a string not a '${typeof lineText}': ${lineText}`);
                        //parameterAssert(location !== undefined, "checkUSFMText ourCheckNotesLinksToOutside: 'location' parameter should be defined");
                        //parameterAssert(typeof location === 'string', `checkUSFMText ourCheckNotesLinksToOutside: 'location' parameter should be a string not a '${typeof location}': ${location}`);
                        // Empty fields on the next line are bookID, C, V (as we don't have that information here)
                        adjustedTextOrFileName = textOrFileName;if (textOrFileName === 'README.md' || textOrFileName === 'LICENSE.md') adjustedTextOrFileName = textOrFileName.substring(0, textOrFileName.length - 3);adjustedLanguageCode = languageCode; // This is the language code of the resource with the link
                        if (languageCode === 'hbo' || languageCode === 'el-x-koine') adjustedLanguageCode = 'en'; // This is a guess (and won't be needed for TWs when we switch to TWLs)
                        _context.next = 6;return (0, _notesLinksCheck.checkNotesLinksToOutside)(languageCode, repoCode, '', '', '', adjustedTextOrFileName, lineText, location, _objectSpread(_objectSpread({}, checkingOptions), {}, { defaultLanguageCode: adjustedLanguageCode }));case 6:coTNlResultObject = _context.sent; // debugLog(`coTNlResultObject=${JSON.stringify(coTNlResultObject)}`);
                        // Choose only ONE of the following
                        // This is the fast way of append the results from this field
                        // result.noticeList = result.noticeList.concat(coTNlResultObject.noticeList);
                        // If we need to put everything through addNoticePartial, e.g., for debugging or filtering
                        //  process results line by line
                        _iterator2 = _createForOfIteratorHelper(coTNlResultObject.noticeList);try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {coqNoticeEntry = _step2.value;if (coqNoticeEntry.extra) // it must be an indirect check on a TA or TW article from a TN2 check
                              result.noticeList.push(coqNoticeEntry); // Just copy the complete notice as is -- would be confusing to have this lineNumber
                            else // For our direct checks, we add the repoCode as an extra value
                              addNotice(_objectSpread(_objectSpread({}, coqNoticeEntry), {}, { lineNumber: lineNumber }));} // The following is needed coz we might be checking the linked TA and/or TW articles
                        } catch (err) {_iterator2.e(err);} finally {_iterator2.f();}if (coTNlResultObject.checkedFileCount && coTNlResultObject.checkedFileCount > 0) if (typeof result.checkedFileCount === 'number') result.checkedFileCount += coTNlResultObject.checkedFileCount;else result.checkedFileCount = coTNlResultObject.checkedFileCount;if (coTNlResultObject.checkedFilesizes && coTNlResultObject.checkedFilesizes > 0) if (typeof result.checkedFilesizes === 'number') result.checkedFilesizes += coTNlResultObject.checkedFilesizes;else result.checkedFilesizes = coTNlResultObject.checkedFilesizes;if (coTNlResultObject.checkedRepoNames && coTNlResultObject.checkedRepoNames.length > 0) {_iterator3 = _createForOfIteratorHelper(coTNlResultObject.checkedRepoNames);try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {checkedRepoName = _step3.value;try {if (result.checkedRepoNames.indexOf(checkedRepoName) < 0) result.checkedRepoNames.push(checkedRepoName);} catch (_unused) {result.checkedRepoNames = [checkedRepoName];}}} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}}if (coTNlResultObject.checkedFilenameExtensions && coTNlResultObject.checkedFilenameExtensions.length > 0) {_iterator4 = _createForOfIteratorHelper(coTNlResultObject.checkedFilenameExtensions);try {for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {checkedFilenameExtension = _step4.value;try {if (result.checkedFilenameExtensions.indexOf(checkedFilenameExtension) < 0) result.checkedFilenameExtensions.push(checkedFilenameExtension);} catch (_unused2) {result.checkedFilenameExtensions = [checkedFilenameExtension];}}} catch (err) {_iterator4.e(err);} finally {_iterator4.f();}} // if (result.checkedFilenameExtensions) userLog("result", JSON.stringify(result));
                      case 13:case "end":return _context.stop();}}}, _callee);}));return _ourCheckNotesLinksToOutside.apply(this, arguments);};ourCheckNotesLinksToOutside = function _ourCheckNotesLinksTo(_x7, _x8, _x9, _x10) {return _ourCheckNotesLinksToOutside.apply(this, arguments);};ourCheckTextField = function _ourCheckTextField(fieldName, lineNumber, fieldText, allowedLinks, optionalFieldLocation, checkingOptions) {/**
              * @description - checks the given text field and processes the returned results
              * @param {string} fieldName - name of the field being checked
              * @param {string} fieldText - the actual text of the field being checked
              * @param {boolean} allowedLinks - true if links are allowed in the field, otherwise false
              * @param {string} optionalFieldLocation - description of where the field is located
              * @param {Object} checkingOptions - parameters that might affect the check
              */ // Does basic checks for small errors like leading/trailing spaces, etc.
              // We assume that checking for compulsory fields is done elsewhere
              // Updates the global list of notices
              // functionLog(`cMdT ourCheckTextField(${fieldName}, (${fieldText.length}), ${allowedLinks}, ${optionalFieldLocation}, â€¦)`);
              //parameterAssert(fieldName !== undefined, "cMdT ourCheckTextField: 'fieldName' parameter should be defined");
              //parameterAssert(typeof fieldName === 'string', `cMdT ourCheckTextField: 'fieldName' parameter should be a string not a '${typeof fieldName}'`);
              //parameterAssert(lineNumber !== undefined, "cMdT ourCheckTextField: 'lineNumber' parameter should be defined");
              //parameterAssert(typeof lineNumber === 'number', `cMdT ourCheckTextField: 'lineNumber' parameter should be a number not a '${typeof lineNumber}'`);
              //parameterAssert(fieldText !== undefined, "cMdT ourCheckTextField: 'fieldText' parameter should be defined");
              //parameterAssert(typeof fieldText === 'string', `cMdT ourCheckTextField: 'fieldText' parameter should be a string not a '${typeof fieldText}'`);
              //parameterAssert(allowedLinks === true || allowedLinks === false, "cMdT ourCheckTextField: allowedLinks parameter must be either true or false");
              //parameterAssert(optionalFieldLocation !== undefined, "cMdT ourCheckTextField: 'optionalFieldLocation' parameter should be defined");
              //parameterAssert(typeof optionalFieldLocation === 'string', `cMdT ourCheckTextField: 'optionalFieldLocation' parameter should be a string not a '${typeof optionalFieldLocation}'`);
              var dbtcResultObject = (0, _fieldTextCheck.checkTextField)(languageCode, repoCode, 'markdown', fieldName, fieldText, allowedLinks, optionalFieldLocation, checkingOptions); // If we need to put everything through addNotice, e.g., for debugging or filtering
              //  process results line by line
              var _iterator = _createForOfIteratorHelper(dbtcResultObject.noticeList),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var noticeEntry = _step.value;addNotice(_objectSpread(_objectSpread({}, noticeEntry), {}, { lineNumber: lineNumber }));}} catch (err) {_iterator.e(err);} finally {_iterator.f();}return dbtcResultObject.suggestion; // There may or may not be one!
            };addNotice = function _addNotice(noticeObject) {// functionLog(`checkMarkdownText addNotice: (priority=${noticeObject.priority}) ${noticeObject.message}${noticeObject.characterIndex > 0 ? ` (at character ${noticeObject.characterIndex})` : ""}${noticeObject.excerpt ? " " + excerpt : ""}${noticeObject.location}`);
              //parameterAssert(noticeObject.priority !== undefined, "cMdT addNotice: 'priority' parameter should be defined");
              //parameterAssert(typeof noticeObject.priority === 'number', `cMdT addNotice: 'priority' parameter should be a number not a '${typeof noticeObject.priority}': ${noticeObject.priority}`);
              //parameterAssert(noticeObject.message !== undefined, "cMdT addNotice: 'message' parameter should be defined");
              //parameterAssert(typeof noticeObject.message === 'string', `cMdT addNotice: 'message' parameter should be a string not a '${typeof noticeObject.message}': ${noticeObject.message}`);
              // //parameterAssert(characterIndex !== undefined, "cMdT addNotice: 'characterIndex' parameter should be defined");
              if (noticeObject.characterIndex) {//parameterAssert(typeof noticeObject.characterIndex === 'number', `cMdT addNotice: 'characterIndex' parameter should be a number not a '${typeof noticeObject.characterIndex}': ${noticeObject.characterIndex}`);
              } // //parameterAssert(excerpt !== undefined, "cMdT addNotice: 'excerpt' parameter should be defined");
              if (noticeObject.excerpt) {//parameterAssert(typeof noticeObject.excerpt === 'string', `cMdT addNotice: 'excerpt' parameter should be a string not a '${typeof noticeObject.excerpt}': ${noticeObject.excerpt}`);
              } //parameterAssert(noticeObject.location !== undefined, "cMdT addNotice: 'location' parameter should be defined");
              //parameterAssert(typeof noticeObject.location === 'string', `cMdT addNotice: 'location' parameter should be a string not a '${typeof noticeObject.location}': ${noticeObject.location}`);
              // noticeObject.debugChain = noticeObject.debugChain ? `checkMarkdownText(${languageCode}, ${textOrFileName}) ${noticeObject.debugChain}` : `checkMarkdownText(${languageCode}, ${textOrFileName})`;
              result.noticeList.push(noticeObject); // Used to have filename: textName, but that isnâ€™t always a filename !!!
            };addSuccessMessage = function _addSuccessMessage(successString) {// debugLog("checkMarkdownText success: " + successString);
              result.successList.push(successString);}; /* This function is optimised for checking the entire markdown text, i.e., all lines.
             This text may not necessarily be from a file -- it may be from a (multiline) field within a file
              Returns a result object containing a successList and a noticeList
             */ // functionLog(`checkMarkdownText(${languageCode}, ${repoCode}, ${textOrFileName}, ${markdownText.length}, ${givenLocation}, â€¦)â€¦`);
            //parameterAssert(languageCode !== undefined, "checkMarkdownText: 'languageCode' parameter should be defined");
            //parameterAssert(typeof languageCode === 'string', `checkMarkdownText: 'languageCode' parameter should be a string not a '${typeof languageCode}': ${languageCode}`);
            //parameterAssert(languageCode !== 'unfoldingWord', `checkMarkdownText: 'languageCode' ${languageCode} parameter should be not be 'unfoldingWord'`);
            //parameterAssert(repoCode !== undefined, "checkMarkdownText: 'repoCode' parameter should be defined");
            //parameterAssert(typeof repoCode === 'string', `checkMarkdownText: 'repoCode' parameter should be a string not a '${typeof repoCode}': ${repoCode}`);
            //parameterAssert(REPO_CODES_LIST.includes(repoCode), `checkMarkdownText: 'repoCode' parameter should not be '${repoCode}'`);
            //parameterAssert(textOrFileName !== undefined, "checkMarkdownText: 'textOrFileName' parameter should be defined");
            //parameterAssert(typeof textOrFileName === 'string', `checkMarkdownText: 'textOrFileName' parameter should be a string not a '${typeof textOrFileName}': ${textOrFileName}`);
            //parameterAssert(textOrFileName !== `${languageCode}_${repoCode.toLowerCase()}`, `checkMarkdownText: 'textOrFileName' parameter should not be the repoName: '${textOrFileName}'`);
            if (textOrFileName === "".concat(languageCode, "_").concat(repoCode.toLowerCase())) {console.trace('checkMarkdownText()');} //parameterAssert(markdownText !== undefined, "checkMarkdownText: 'markdownText' parameter should be defined");
            //parameterAssert(typeof markdownText === 'string', `checkMarkdownText: 'markdownText' parameter should be a string not a '${typeof markdownText}': ${markdownText}`);
            //parameterAssert(givenLocation !== undefined, "checkMarkdownText: 'optionalFieldLocation' parameter should be defined");
            //parameterAssert(typeof givenLocation === 'string', `checkMarkdownText: 'optionalFieldLocation' parameter should be a string not a '${typeof givenLocation}': ${givenLocation}`);
            //parameterAssert(givenLocation.indexOf('true') === -1, `checkMarkdownText: 'optionalFieldLocation' parameter should not be '${givenLocation}'`);
            //parameterAssert(checkingOptions !== undefined, "checkMarkdownText: 'checkingOptions' parameter should be defined");
            if (checkingOptions !== undefined) {//parameterAssert(typeof checkingOptions === 'object', `checkMarkdownText: 'checkingOptions' parameter should be an object not a '${typeof checkingOptions}': ${JSON.stringify(checkingOptions)}`);
            }ourLocation = givenLocation;if (ourLocation && ourLocation[0] !== ' ') ourLocation = " ".concat(ourLocation);try {excerptLength = checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.excerptLength;} catch (mdtcError) {}if (typeof excerptLength !== 'number' || isNaN(excerptLength)) {excerptLength = _defaults.DEFAULT_EXCERPT_LENGTH; // debugLog("Using default excerptLength=" + excerptLength);
            } // else
            // debugLog("Using supplied excerptLength=" + excerptLength, `cf. default=${DEFAULT_EXCERPT_LENGTH}`);
            excerptHalfLength = Math.floor(excerptLength / 2); // rounded down
            excerptHalfLengthPlus = Math.floor((excerptLength + 1) / 2); // rounded up
            // debugLog("Using excerptHalfLength=" + excerptHalfLength, `excerptHalfLengthPlus=${excerptHalfLengthPlus}`);
            result = { successList: [], noticeList: [] }; // end of checkMarkdownLineContents function
            // Main code for checkMarkdownText function
            lines = markdownText.split('\n'); // debugLog(`  '${location}' has ${lines.length.toLocaleString()} total lines`);
            headerLevel = 0;indentLevels = [];suggestedLines = [];notifiedBlankLines = false;n = 1;case 22:if (!(n <= lines.length)) {_context3.next = 66;break;}line = lines[n - 1];nextLine = n < lines.length - 1 ? lines[n] : undefined; // Markdown headers should be preceded and followed by a blank line
            if (line.startsWith('#')) {if (n > 1 && lastLine.length !== 0) {notice = { priority: 252, message: "Markdown headers should be preceded by a blank line", lineNumber: n, location: ourLocation };if (textOrFileName === 'Note' || textOrFileName === 'OccurrenceNote') notice.details = "markdown line ".concat(n);addNotice(notice);}if ((nextLine === null || nextLine === void 0 ? void 0 : nextLine.length) !== 0) {_notice = { priority: 251, message: "Markdown headers should be followed by a blank line", lineNumber: n, location: ourLocation };if (textOrFileName === 'Note' || textOrFileName === 'OccurrenceNote') _notice.details = "markdown line ".concat(n);addNotice(_notice);}}numLeadingSpaces = void 0;if (!line) {_context3.next = 59;break;}thisHeaderLevel = line.match(/^#*/)[0].length; // debugLog(`Got thisHeaderLevel=${thisHeaderLevel} for ${line}${atString}`);
            if (thisHeaderLevel > headerLevel + 1 && !textOrFileName.startsWith('TA ')) {// Suppress this notice for translationAcademy subsections
              _notice2 = { priority: 172, message: "Header levels should only increment by one", lineNumber: n, characterIndex: 0, location: ourLocation };if (textOrFileName === 'Note' || textOrFileName === 'OccurrenceNote') _notice2.details = "markdown line ".concat(n);addNotice(_notice2);}if (thisHeaderLevel > 0) {headerLevel = thisHeaderLevel;indentLevels = []; // reset
            }numLeadingSpaces = line.match(/^ */)[0].length; // debugLog(`Got numLeadingSpaces=${numLeadingSpaces} with indentLevels=${JSON.stringify(indentLevels)} for ${line}${ourLocation}`);
            previousIndentLevel = indentLevels.length > 0 ? indentLevels[indentLevels.length - 1] : 0;if (!(numLeadingSpaces > previousIndentLevel || // We have an indent level increase
            numLeadingSpaces === 0 && line.length > 0 && indentLevels.length === 0)) {_context3.next = 37;break;} // we have our first zero-level indent
            indentLevels.push(numLeadingSpaces);_context3.next = 53;break;case 37:if (!(numLeadingSpaces < previousIndentLevel)) {_context3.next = 53;break;}if (!(indentLevels.length > 1 && indentLevels[indentLevels.length - 2] === numLeadingSpaces)) {_context3.next = 42;break;} // We went back to the previous level
            indentLevels.pop();_context3.next = 53;break;case 42: // seems we didn't go back to the previous level ???
            foundPreviousLevel = false;z = indentLevels.length - 1;case 44:if (!(z >= 0)) {_context3.next = 52;break;}if (!(indentLevels[z] === numLeadingSpaces)) {_context3.next = 49;break;} // debugLog(`After finding ${numLeadingSpaces} spaces, reducing length of ${JSON.stringify(indentLevels)} to ${z+1}`);
            indentLevels.length = z + 1;foundPreviousLevel = true;return _context3.abrupt("break", 52);case 49:z--;_context3.next = 44;break;case 52:if (!foundPreviousLevel) {_notice3 = { priority: 282, message: "Nesting of header levels seems confused", details: "recent indent levels=".concat(JSON.stringify(indentLevels), " but now ").concat(numLeadingSpaces), lineNumber: n, characterIndex: 0, location: ourLocation };if (textOrFileName === 'Note' || textOrFileName === 'OccurrenceNote') _notice3.details = "markdown line ".concat(n);addNotice(_notice3);}case 53:_context3.next = 55;return checkMarkdownLineContents(n, line, ourLocation);case 55:suggestedLine = _context3.sent;suggestedLines.push(suggestedLine === undefined ? line : suggestedLine);_context3.next = 62;break;case 59: // This is a blank line
            numLeadingSpaces = 0;suggestedLines.push(''); // Should only ever have single blank lines in markdown
            if (n > 1 && lastLine.length === 0 && (nextLine === null || nextLine === void 0 ? void 0 : nextLine.length) === 0 && !notifiedBlankLines) {_notice4 = { priority: 250, message: "Multiple blank lines are not expected in markdown", lineNumber: n, location: ourLocation };if (textOrFileName === 'Note' || textOrFileName === 'OccurrenceNote') _notice4.details = "markdown line ".concat(n);addNotice(_notice4);notifiedBlankLines = true;}case 62:lastLine = line; // lastNumLeadingSpaces = numLeadingSpaces;
          case 63:n++;_context3.next = 22;break;case 66:_i = 0, _arr = [// Put longest ones first
            // Seems that the fancy ones (commented out) don't find occurrences at the start (or end?) of the text
            ['___', /___/g], // ['___', r'[^_]___[^_]'], // three underlines
            ['***', /\*\*\*/g], // ['***', r'[^\*]\*\*\*[^\*]'], // three asterisks
            ['__', /__/g], // ['__', r'[^_]__[^_]'], // two underlines
            ['**', /\*\*/g] // ['**', r'[^\*]\*\*[^\*]'], // two asterisks
            ];case 67:if (!(_i < _arr.length)) {_context3.next = 80;break;}thisSet = _arr[_i];thisField = thisSet[0], thisRegex = thisSet[1];count = ((markdownText || '').match(thisRegex) || []).length; // Finds only NON-OVERLAPPING matches hopefully
            if (!(count && count % 2 !== 0)) {_context3.next = 77;break;}characterIndex = markdownText.indexOf(thisField);iy = characterIndex + excerptHalfLength; // Want excerpt to focus more on what follows
            excerpt = /*(iy > excerptHalfLength ? 'â€¦' : '') +*/markdownText.substring(iy - excerptHalfLength, iy + excerptHalfLengthPlus) + (iy + excerptHalfLengthPlus < markdownText.length ? 'â€¦' : '');addNotice({ priority: 378, message: "Possible mismatched '".concat(thisField, "' markdown formatting pairs"), details: "".concat(count.toLocaleString(), " total occurrence").concat(count === 1 ? '' : 's'), characterIndex: characterIndex, excerpt: excerpt, location: ourLocation });return _context3.abrupt("break", 80);case 77:_i++;_context3.next = 67;break;case 80:suggestion = suggestedLines.join('\n');if (suggestion !== markdownText) {// debugLog(`Had markdown ${markdownText}`);
              // debugLog(`Sug markdown ${suggestion}`);
              result.suggestion = suggestion;}if (!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.suppressNoticeDisablingFlag)) {// functionLog(`checkMarkdownText: calling removeDisabledNotices(${result.noticeList.length}) having ${JSON.stringify(checkingOptions)}`);
              result.noticeList = (0, _disabledNotices.removeDisabledNotices)(result.noticeList);}addSuccessMessage("Checked all ".concat(lines.length.toLocaleString(), " line").concat(lines.length === 1 ? '' : 's').concat(ourLocation, "."));if (result.noticeList.length) addSuccessMessage("checkMarkdownText v".concat(MARKDOWN_TEXT_VALIDATOR_VERSION_STRING, " finished with ").concat(result.noticeList.length ? result.noticeList.length.toLocaleString() : "zero", " notice").concat(result.noticeList.length === 1 ? '' : 's'));else addSuccessMessage("No errors or warnings found by checkMarkdownText v".concat(MARKDOWN_TEXT_VALIDATOR_VERSION_STRING)); // debugLog(`  checkMarkdownText returning with ${result.successList.length.toLocaleString()} success(es), ${result.noticeList.length.toLocaleString()} notice(s).`);
            return _context3.abrupt("return", result);case 86:case "end":return _context3.stop();}}}, _callee3);}));return _checkMarkdownText.apply(this, arguments);}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,