"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.checkYAMLText = checkYAMLText;var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var _yaml = _interopRequireDefault(require("yaml"));

var _defaults = require("./defaults");
var _fieldTextCheck = require("./field-text-check");
var _fileTextCheck = require("./file-text-check");
var _disabledNotices = require("./disabled-notices");

var _utilities = require("./utilities");function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {(0, _defineProperty2.default)(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}


var YAML_VALIDATOR_VERSION_STRING = '0.4.3';


/**
 *
 * @param {string} languageCode
 * @param {string} repoCode -- e.g., 'TN' or 'TQ2', etc.
 * @param {string} textName
 * @param {string} YAMLText
 * @param {string} givenLocation
 * @param {Object} checkingOptions
 */
function checkYAMLText(languageCode, repoCode, textName, YAMLText, givenLocation, checkingOptions) {
  /* This function is optimised for checking the entire file, i.e., all lines.
    Returns a result object containing a successList and a noticeList,
      as well as the parsed YAML for further checking.
    */


  // functionLog(`checkYAMLText(${textName}, ${YAMLText.length}, ${givenLocation})…`);
  //parameterAssert(languageCode !== undefined, "checkYAMLText: 'languageCode' parameter should be defined");
  //parameterAssert(typeof languageCode === 'string', `checkYAMLText: 'languageCode' parameter should be a string not a '${typeof languageCode}': ${languageCode}`);
  //parameterAssert(repoCode !== undefined, "checkYAMLText: 'repoCode' parameter should be defined");
  //parameterAssert(typeof repoCode === 'string', `checkYAMLText: 'repoCode' parameter should be a string not a '${typeof repoCode}': ${repoCode}`);
  //parameterAssert(REPO_CODES_LIST.includes(repoCode), `checkYAMLText: 'repoCode' parameter should not be '${repoCode}'`);
  //parameterAssert(textName !== undefined, "checkYAMLText: 'textName' parameter should be defined");
  //parameterAssert(typeof textName === 'string', `checkYAMLText: 'textName' parameter should be a string not a '${typeof textName}': ${textName}`);
  //parameterAssert(YAMLText !== undefined, "checkYAMLText: 'YAMLText' parameter should be defined");
  //parameterAssert(typeof YAMLText === 'string', `checkYAMLText: 'YAMLText' parameter should be a string not a '${typeof YAMLText}': ${YAMLText}`);
  //parameterAssert(givenLocation !== undefined, "checkYAMLText: 'optionalFieldLocation' parameter should be defined");
  //parameterAssert(typeof givenLocation === 'string', `checkYAMLText: 'optionalFieldLocation' parameter should be a string not a '${typeof givenLocation}': ${givenLocation}`);
  //parameterAssert(givenLocation.indexOf('true') === -1, `checkYAMLText: 'optionalFieldLocation' parameter should not be '${givenLocation}'`);
  //parameterAssert(checkingOptions !== undefined, "checkYAMLText: 'checkingOptions' parameter should be defined");
  if (checkingOptions !== undefined) {//parameterAssert(typeof checkingOptions === 'object', `checkYAMLText: 'checkingOptions' parameter should be an object not a '${typeof checkingOptions}': ${JSON.stringify(checkingOptions)}`);
  }

  var ourLocation = givenLocation;
  if (ourLocation && ourLocation[0] !== ' ') ourLocation = " ".concat(ourLocation);
  // if (textName) ourLocation = ` in ${textName}${ourLocation}`;

  var excerptLength;
  try {
    excerptLength = checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.excerptLength;
  } catch (ytcError) {}
  if (typeof excerptLength !== 'number' || isNaN(excerptLength)) {
    excerptLength = _defaults.DEFAULT_EXCERPT_LENGTH;
    // debugLog(`Using default excerptLength=${excerptLength}`);
  }
  // else
  // debugLog(`Using supplied excerptLength=${excerptLength}`, `cf. default=${DEFAULT_EXCERPT_LENGTH}`);
  // const excerptHalfLength = Math.floor(excerptLength / 2); // rounded down
  // const excerptHalfLengthPlus = Math.floor((excerptLength+1) / 2); // rounded up
  // debugLog(`Using excerptHalfLength=${excerptHalfLength}`, `excerptHalfLengthPlus=${excerptHalfLengthPlus}`);

  var cytResult = { successList: [], noticeList: [] };

  function addSuccessMessage(successString) {
    // functionLog(`checkYAMLText success: ${successString}`);
    cytResult.successList.push(successString);
  }
  function addNotice(noticeObject) {
    // functionLog(`checkYAMLText Notice: (priority=${priority}) ${message}${characterIndex > 0 ? ` (at character ${characterIndex})` : ""}${excerpt ? ` ${excerpt}` : ""}${location}`);
    //parameterAssert(noticeObject.priority !== undefined, "cYt addNotice: 'priority' parameter should be defined");
    //parameterAssert(typeof noticeObject.priority === 'number', `cManT addNotice: 'priority' parameter should be a number not a '${typeof noticeObject.priority}': ${noticeObject.priority}`);
    //parameterAssert(noticeObject.message !== undefined, "cYt addNotice: 'message' parameter should be defined");
    //parameterAssert(typeof noticeObject.message === 'string', `cManT addNotice: 'message' parameter should be a string not a '${typeof noticeObject.message}': ${noticeObject.message}`);
    // //parameterAssert(characterIndex!==undefined, "cYt addNotice: 'characterIndex' parameter should be defined");
    if (noticeObject.characterIndex) {//parameterAssert(typeof noticeObject.characterIndex === 'number', `cManT addNotice: 'characterIndex' parameter should be a number not a '${typeof noticeObject.characterIndex}': ${noticeObject.characterIndex}`);
    }
    // //parameterAssert(excerpt!==undefined, "cYt addNotice: 'excerpt' parameter should be defined");
    if (noticeObject.excerpt) {//parameterAssert(typeof noticeObject.excerpt === 'string', `cManT addNotice: 'excerpt' parameter should be a string not a '${typeof noticeObject.excerpt}': ${noticeObject.excerpt}`);
    }
    //parameterAssert(noticeObject.location !== undefined, "cYt addNotice: 'location' parameter should be defined");
    //parameterAssert(typeof noticeObject.location === 'string', `cYt addNotice: 'location' parameter should be a string not a '${typeof noticeObject.location}': ${noticeObject.location}`);
    if (noticeObject.debugChain) noticeObject.debugChain = "checkYAMLText ".concat(noticeObject.debugChain);
    cytResult.noticeList.push(noticeObject);
  }

  function ourCheckTextField(lineNumber, fieldText, allowedLinks, optionalFieldLocation, checkingOptions) {
    /**
    * @description - checks the given text field and processes the returned results
    * @param {string} fieldName - name of the field being checked
    * @param {string} fieldText - the actual text of the field being checked
    * @param {boolean} allowedLinks - true if links are allowed in the field, otherwise false
    * @param {string} optionalFieldLocation - description of where the field is located
    * @param {Object} checkingOptions - parameters that might affect the check
    */
    // Does basic checks for small errors like leading/trailing spaces, etc.

    // We assume that checking for compulsory fields is done elsewhere

    // Updates the global list of notices
    // debugLog(`cYt ourCheckTextField(${fieldName}, (${fieldText.length}), ${allowedLinks}, ${fieldLocation}, …)`);
    //parameterAssert(fieldText !== undefined, "cYt ourCheckTextField: 'fieldText' parameter should be defined");
    //parameterAssert(typeof fieldText === 'string', `cYt ourCheckTextField: 'fieldText' parameter should be a string not a '${typeof fieldText}'`);
    //parameterAssert(allowedLinks === true || allowedLinks === false, "cYt ourCheckTextField: allowedLinks parameter must be either true or false");
    //parameterAssert(optionalFieldLocation !== undefined, "cYt ourCheckTextField: 'optionalFieldLocation' parameter should be defined");
    //parameterAssert(typeof optionalFieldLocation === 'string', `cYt ourCheckTextField: 'optionalFieldLocation' parameter should be a string not a '${typeof optionalFieldLocation}'`);

    var resultObject = (0, _fieldTextCheck.checkTextField)(languageCode, repoCode, 'YAML', '', fieldText, allowedLinks, optionalFieldLocation, checkingOptions);

    // Concat is faster if we don’t need to process each notice individually
    // cytResult.noticeList = cytResult.noticeList.concat(resultObject.noticeList);
    // // Process noticeList line by line
    // //  suppressing undesired errors
    var _iterator = _createForOfIteratorHelper(resultObject.noticeList),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var noticeEntry = _step.value;
        addNotice(_objectSpread(_objectSpread({}, noticeEntry), {}, { lineNumber: lineNumber }));}} catch (err) {_iterator.e(err);} finally {_iterator.f();}
  }
  // end of ourCheckTextField function

  function checkYAMLLineContents(lineNumber, lineText, lineLocation) {

    // functionLog(`checkYAMLLineContents for '${lineNumber} ${lineText}' at${lineLocation}`);
    var thisText = lineText;

    // Remove leading spaces
    thisText = thisText.replace(/^ +/g, '');
    // debugLog(`After removing leading spaces have '${thisText}'`);

    // Remove leading hyphens
    thisText = thisText.replace(/^-/g, '');
    // debugLog(`After removing hyphens have '${thisText}'`);

    // Remove leading spaces again now
    thisText = thisText.replace(/^ +/g, '');
    // debugLog(`After removing more leading spaces have '${thisText}'`);

    var allowedLinksInLine = thisText.startsWith('url:') || thisText.startsWith('chapter_url:') || thisText.startsWith('rc:');
    if (thisText)
    ourCheckTextField(lineNumber, thisText, allowedLinksInLine, lineLocation, checkingOptions);
  }
  // end of checkYAMLLine function


  function ourBasicFileChecks(filename, fileText, fileLocation, checkingOptions) {
    // Does basic checks for small errors like leading/trailing spaces, etc.

    // We assume that checking for compulsory fields is done elsewhere

    // Updates the global list of notices
    //parameterAssert(filename !== undefined, "cYT ourBasicFileChecks: 'filename' parameter should be defined");
    //parameterAssert(typeof filename === 'string', `cYT ourBasicFileChecks: 'filename' parameter should be a string not a '${typeof filename}'`);
    //parameterAssert(fileText !== undefined, "cYT ourBasicFileChecks: 'fileText' parameter should be defined");
    //parameterAssert(typeof fileText === 'string', `cYT ourBasicFileChecks: 'fileText' parameter should be a string not a '${typeof fileText}'`);
    //parameterAssert(checkingOptions !== undefined, "cYT ourBasicFileChecks: 'checkingOptions' parameter should be defined");

    var resultObject = (0, _fileTextCheck.checkTextfileContents)(languageCode, repoCode, 'YAML', filename, fileText, fileLocation, checkingOptions);

    // If we need to put everything through addNoticePartial, e.g., for debugging or filtering
    //  process results line by line
    var _iterator2 = _createForOfIteratorHelper(resultObject.noticeList),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var noticeEntry = _step2.value;
        //parameterAssert(Object.keys(noticeEntry).length >= 5, `USFM ourBasicFileChecks notice length=${Object.keys(noticeEntry).length}`);
        addNotice(noticeEntry);
      }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}
  }
  // end of ourBasicFileChecks function


  // Main code for checkYAMLText function
  var lines = YAMLText.split('\n');
  // debugLog(`  '${location}' has ${lines.length.toLocaleString()} total lines`);
  var formData;
  try {
    formData = _yaml.default.parse(YAMLText);
    // debugLog("yaml.parse(YAMLText) got formData", JSON.stringify(formData));
  }
  catch (yamlError) {
    // console.error(`yaml parse error: ${yamlError.message}`);
    addNotice({ priority: 920, message: yamlError.message, location: ourLocation });
  }
  // Add the parsed YAML to our result
  cytResult.formData = formData;

  // let lastNumLeadingSpaces = 0;
  // let lastLineContents;
  for (var n = 1; n <= lines.length; n++) {

    var line = lines[n - 1];
    // let numLeadingSpaces;
    // if (line) {
    //     numLeadingSpaces = line.match(/^ */)[0].length;
    // debugLog(`Got numLeadingSpaces=${numLeadingSpaces} for ${line}${atString}`);
    //     if (numLeadingSpaces && lastNumLeadingSpaces && numLeadingSpaces!=lastNumLeadingSpaces)
    //         addNotice({472, "Nesting seems confused", 0, '', atString);

    checkYAMLLineContents(n, line, ourLocation);
    // } else {
    //     // This is a blank line
    //     numLeadingSpaces = 0;
    // }

    // lastLineContents = line;
    // lastNumLeadingSpaces = numLeadingSpaces;
  }

  // Do basic file checks
  ourBasicFileChecks(textName, YAMLText, givenLocation, checkingOptions);

  if (!(checkingOptions !== null && checkingOptions !== void 0 && checkingOptions.suppressNoticeDisablingFlag)) {
    // functionLog(`checkYAMLText: calling removeDisabledNotices(${cytResult.noticeList.length}) having ${JSON.stringify(checkingOptions)}`);
    cytResult.noticeList = (0, _disabledNotices.removeDisabledNotices)(cytResult.noticeList);
  }

  addSuccessMessage("Checked all ".concat(lines.length.toLocaleString(), " line").concat(lines.length === 1 ? '' : 's').concat(ourLocation, "."));
  if (cytResult.noticeList.length)
  addSuccessMessage("checkYAMLText v".concat(YAML_VALIDATOR_VERSION_STRING, " finished with ").concat(cytResult.noticeList.length ? cytResult.noticeList.length.toLocaleString() : "zero", " notice").concat(cytResult.noticeList.length === 1 ? '' : 's'));else

  addSuccessMessage("No errors or warnings found by checkYAMLText v".concat(YAML_VALIDATOR_VERSION_STRING));
  // debugLog(`  checkYAMLText returning with ${cytResult.successList.length.toLocaleString()} success(es), ${cytResult.noticeList.length.toLocaleString()} notice(s).`);
  // debugLog("checkYAMLText result is", JSON.stringify(result));
  return cytResult;
}
// end of checkYAMLText function
//# sourceMappingURL=data:application/json;charset=utf-8;base64,