"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _typeof = require("@babel/runtime/helpers/typeof");Object.defineProperty(exports, "__esModule", { value: true });exports.checkTWL_TSV6DataRow = checkTWL_TSV6DataRow;var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _defaults = require("./defaults");
var _textHandlingFunctions = require("./text-handling-functions");
var books = _interopRequireWildcard(require("./books/books"));
var _fieldTextCheck = require("./field-text-check");


var _notesLinksCheck = require("./notes-links-check");
var _origQuoteCheck = require("./orig-quote-check");

var _utilities = require("./utilities");function _getRequireWildcardCache(nodeInterop) {if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {return nodeInterop ? cacheNodeInterop : cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj, nodeInterop) {if (!nodeInterop && obj && obj.__esModule) {return obj;}if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}function _createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {(0, _defineProperty2.default)(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}


// const TWL_TABLE_ROW_VALIDATOR_VERSION_STRING = '0.1.8';

var NUM_EXPECTED_TWL_TSV_FIELDS = 6; // so expects 5 tabs per line
var EXPECTED_TWL_HEADING_LINE = 'Reference\tID\tTags\tOrigWords\tOccurrence\tTWLink';

var LC_ALPHABET = 'abcdefghijklmnopqrstuvwxyz';
var LC_ALPHABET_PLUS_DIGITS = 'abcdefghijklmnopqrstuvwxyz0123456789';
var LC_ALPHABET_PLUS_DIGITS_PLUS_HYPHEN = 'abcdefghijklmnopqrstuvwxyz0123456789-';


/**
 *
 * @description - Checks one TSV data row of translation word links (TWL)
 * @param {string} languageCode - the language code, e.g., 'en'
 * @param {string} repoCode - 'TWL' or 'OBS-TWL'-- keeps parameter set consistent with other similar functions
 * @param {string} line - the TSV line to be checked
 * @param {string} bookID - 3-character UPPERCASE USFM book identifier or 'OBS'
 * @param {string} givenC - chapter number or (for OBS) story number string
 * @param {string} givenV - verse number or (for OBS) frame number string
 * @param {string} givenRowLocation - description of where the line is located
 * @param {Object} checkingOptions - may contain excerptLength parameter
 * @return {Object} - containing noticeList
 */function
checkTWL_TSV6DataRow(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8) {return _checkTWL_TSV6DataRow.apply(this, arguments);}





















































































































































































































































































































































































































// end of checkTWL_TSV6DataRow function
function _checkTWL_TSV6DataRow() {_checkTWL_TSV6DataRow = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(languageCode, repoCode, line, bookID, givenC, givenV, givenRowLocation, checkingOptions) {var ourRowLocation, linkCheckingOptions, drResult, addNoticePartial, ourCheckTextField, ourCheckTNOriginalLanguageQuoteAndOccurrence, _ourCheckTNOriginalLanguageQuoteAndOccurrence, ourCheckNotesLinksToOutside, _ourCheckNotesLinksToOutside, excerptLength, excerptHalfLength, excerptHalfLengthPlus, lowercaseBookID, numChaptersThisBook, haveGoodBookID, fields, RIDSuggestion, QSuggestion, OSuggestion, LSuggestion, _fields, reference, rowID, tags, origWords, occurrence, TWLink, _reference$split, _reference$split2, C, V, numVersesThisChapter, haveGoodChapterNumber, intC, intV, tagsList, _iterator2, _step2, thisTag, charCount, bits, characterIndex, excerpt, suggestion, _rowID;return _regenerator.default.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:_ourCheckNotesLinksToOutside = function _ourCheckNotesLinksTo2() {_ourCheckNotesLinksToOutside = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(rowID, fieldName, twLinkText, rowLocation, checkingOptions) {var adjustedLanguageCode, coTNlResultObject, _iterator4, _step4, coqNoticeEntry, _iterator5, _step5, checkedRepoName, _iterator6, _step6, checkedFilenameExtension;return _regenerator.default.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0: // Checks that the TA/TW/Bible reference can be found
                        // Updates the global list of notices
                        // functionLog(`checkTWL_TSV6DataRow ourCheckNotesLinksToOutside(${rowID}, ${fieldName}, (${twLinkText.length}) '${twLinkText}', ${rowLocation}, ${JSON.stringify(checkingOptions)})`);
                        //parameterAssert(rowID !== undefined, "checkTWL_TSV6DataRow ourCheckNotesLinksToOutside: 'rowID' parameter should be defined");
                        //parameterAssert(typeof rowID === 'string', `checkTWL_TSV6DataRow ourCheckNotesLinksToOutside: 'rowID' parameter should be a string not a '${typeof rowID}'`);
                        //parameterAssert(fieldName === 'TWLink', `checkTWL_TSV6DataRow ourCheckNotesLinksToOutside: 'fieldName' parameter should be 'TWLink' not '${fieldName}'`);
                        //parameterAssert(twLinkText !== undefined, "checkTWL_TSV6DataRow ourCheckNotesLinksToOutside: 'twLinkText' parameter should be defined");
                        //parameterAssert(typeof twLinkText === 'string', `checkTWL_TSV6DataRow ourCheckNotesLinksToOutside: 'twLinkText' parameter should be a string not a '${typeof twLinkText}'`);
                        adjustedLanguageCode = languageCode; // This is the language code of the resource with the link
                        if (languageCode === 'hbo' || languageCode === 'el-x-koine') adjustedLanguageCode = 'en'; // This is a guess (and won't be needed for TWs when we switch to TWLs)
                        _context2.next = 4;return (0, _notesLinksCheck.checkNotesLinksToOutside)(languageCode, repoCode, bookID, givenC, givenV, fieldName, twLinkText, rowLocation, _objectSpread(_objectSpread({}, checkingOptions), {}, { defaultLanguageCode: adjustedLanguageCode }));case 4:coTNlResultObject = _context2.sent; // debugLog(`coTNlResultObject=${JSON.stringify(coTNlResultObject)}`);
                        // Choose only ONE of the following
                        // This is the fast way of append the results from this field
                        // result.noticeList = result.noticeList.concat(coTNlResultObject.noticeList);
                        // If we need to put everything through addNoticePartial, e.g., for debugging or filtering
                        //  process results line by line
                        _iterator4 = _createForOfIteratorHelper(coTNlResultObject.noticeList);try {for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {coqNoticeEntry = _step4.value;if (coqNoticeEntry.extra) // it must be an indirect check on a TA or TW article from a TN2 check
                              drResult.noticeList.push(coqNoticeEntry); // Just copy the complete notice as is
                            else // For our direct checks, we add the repoCode as an extra value
                              addNoticePartial(_objectSpread(_objectSpread({}, coqNoticeEntry), {}, { rowID: rowID, fieldName: fieldName }));} // The following is needed coz we might be checking the linked TA and/or TW articles
                        } catch (err) {_iterator4.e(err);} finally {_iterator4.f();}if (coTNlResultObject.checkedFileCount && coTNlResultObject.checkedFileCount > 0) if (typeof drResult.checkedFileCount === 'number') drResult.checkedFileCount += coTNlResultObject.checkedFileCount;else drResult.checkedFileCount = coTNlResultObject.checkedFileCount;if (coTNlResultObject.checkedFilesizes && coTNlResultObject.checkedFilesizes > 0) if (typeof drResult.checkedFilesizes === 'number') drResult.checkedFilesizes += coTNlResultObject.checkedFilesizes;else drResult.checkedFilesizes = coTNlResultObject.checkedFilesizes;if (coTNlResultObject.checkedRepoNames && coTNlResultObject.checkedRepoNames.length > 0) {_iterator5 = _createForOfIteratorHelper(coTNlResultObject.checkedRepoNames);try {for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {checkedRepoName = _step5.value;try {if (drResult.checkedRepoNames.indexOf(checkedRepoName) < 0) drResult.checkedRepoNames.push(checkedRepoName);} catch (_unused2) {drResult.checkedRepoNames = [checkedRepoName];}}} catch (err) {_iterator5.e(err);} finally {_iterator5.f();}}if (coTNlResultObject.checkedFilenameExtensions && coTNlResultObject.checkedFilenameExtensions.length > 0) {_iterator6 = _createForOfIteratorHelper(coTNlResultObject.checkedFilenameExtensions);try {for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {checkedFilenameExtension = _step6.value;try {if (drResult.checkedFilenameExtensions.indexOf(checkedFilenameExtension) < 0) drResult.checkedFilenameExtensions.push(checkedFilenameExtension);} catch (_unused3) {drResult.checkedFilenameExtensions = [checkedFilenameExtension];}}} catch (err) {_iterator6.e(err);} finally {_iterator6.f();}} // if (drResult.checkedFilenameExtensions) userLog("drResult", JSON.stringify(drResult));
                      case 11:case "end":return _context2.stop();}}}, _callee2);}));return _ourCheckNotesLinksToOutside.apply(this, arguments);};ourCheckNotesLinksToOutside = function _ourCheckNotesLinksTo(_x15, _x16, _x17, _x18, _x19) {return _ourCheckNotesLinksToOutside.apply(this, arguments);};_ourCheckTNOriginalLanguageQuoteAndOccurrence = function _ourCheckTNOriginalLa2() {_ourCheckTNOriginalLanguageQuoteAndOccurrence = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(rowID, fieldName, fieldText, occurrence, rowLocation, checkingOptions) {var colqResultObject, _iterator3, _step3, noticeEntry;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:_context.next = 2;return (0, _origQuoteCheck.checkOriginalLanguageQuoteAndOccurrence)(languageCode, repoCode, fieldName, fieldText, occurrence, bookID, givenC, givenV, rowLocation, checkingOptions);case 2:colqResultObject = _context.sent; // Choose only ONE of the following
                        // This is the fast way of append the results from this field
                        // result.noticeList = result.noticeList.concat(colqResultObject.noticeList);
                        // If we need to put everything through addNoticePartial, e.g., for debugging or filtering
                        //  process results line by line
                        _iterator3 = _createForOfIteratorHelper(colqResultObject.noticeList);try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {noticeEntry = _step3.value; // //parameterAssert(Object.keys(noticeEntry).length === 5, `TL ourCheckTNOriginalLanguageQuoteAndOccurrence notice length=${Object.keys(noticeEntry).length}`);
                            addNoticePartial(_objectSpread(_objectSpread({}, noticeEntry), {}, { rowID: rowID, fieldName: fieldName }));}} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}case 5:case "end":return _context.stop();}}}, _callee);}));return _ourCheckTNOriginalLanguageQuoteAndOccurrence.apply(this, arguments);};ourCheckTNOriginalLanguageQuoteAndOccurrence = function _ourCheckTNOriginalLa(_x9, _x10, _x11, _x12, _x13, _x14) {return _ourCheckTNOriginalLanguageQuoteAndOccurrence.apply(this, arguments);};ourCheckTextField = function _ourCheckTextField(rowID, fieldName, fieldText, allowedLinks, rowLocation, checkingOptions) {/**
              * @description - checks the given text field and processes the returned results
              * @param {string} rowID - 4-character row ID field
              * @param {string} fieldName - name of the field being checked
              * @param {string} fieldText - the actual text of the field being checked
              * @param {boolean} allowedLinks - true if links are allowed in the field, otherwise false
              * @param {string} rowLocation - description of where the line is located
              * @param {Object} checkingOptions - parameters that might affect the check
              */ // Does basic checks for small errors like leading/trailing spaces, etc.
              // We assume that checking for compulsory fields is done elsewhere
              // Updates the global list of notices
              // functionLog(`checkTWL_TSV6DataRow ourCheckTextField(${fieldName}, (${fieldText.length}), ${allowedLinks}, ${rowLocation}, …)`);
              //parameterAssert(rowID !== undefined, "checkTWL_TSV6DataRow ourCheckTextField: 'rowID' parameter should be defined");
              //parameterAssert(typeof rowID === 'string', `checkTWL_TSV6DataRow ourCheckTextField: 'rowID' parameter should be a string not a '${typeof rowID}'`);
              //parameterAssert(fieldName !== undefined, "checkTWL_TSV6DataRow ourCheckTextField: 'fieldName' parameter should be defined");
              //parameterAssert(typeof fieldName === 'string', `checkTWL_TSV6DataRow ourCheckTextField: 'fieldName' parameter should be a string not a '${typeof fieldName}'`);
              //parameterAssert(fieldText !== undefined, "checkTWL_TSV6DataRow ourCheckTextField: 'fieldText' parameter should be defined");
              //parameterAssert(typeof fieldText === 'string', `checkTWL_TSV6DataRow ourCheckTextField: 'fieldText' parameter should be a string not a '${typeof fieldText}'`);
              //parameterAssert(allowedLinks === true || allowedLinks === false, "checkTWL_TSV6DataRow ourCheckTextField: allowedLinks parameter must be either true or false");
              //parameterAssert(rowLocation !== undefined, "checkTWL_TSV6DataRow ourCheckTextField: 'rowLocation' parameter should be defined");
              //parameterAssert(typeof rowLocation === 'string', `checkTWL_TSV6DataRow ourCheckTextField: 'rowLocation' parameter should be a string not a '${typeof rowLocation}'`);
              //parameterAssert(rowLocation.indexOf(fieldName) < 0, `checkTWL_TSV6DataRow ourCheckTextField: 'rowLocation' parameter should be not contain fieldName=${fieldName}`);
              var fieldType = 'raw';var octfResultObject = (0, _fieldTextCheck.checkTextField)(languageCode, repoCode, fieldType, fieldName, fieldText, allowedLinks, rowLocation, checkingOptions); // Choose only ONE of the following
              // This is the fast way of append the results from this field
              // result.noticeList = result.noticeList.concat(dbtcResultObject.noticeList);
              // If we need to put everything through addNoticePartial, e.g., for debugging or filtering
              //  process results line by line
              var _iterator = _createForOfIteratorHelper(octfResultObject.noticeList),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var noticeEntry = _step.value; // //parameterAssert(Object.keys(noticeEntry).length === 5, `TL ourCheckTextField notice length=${Object.keys(noticeEntry).length}`);
                  addNoticePartial(_objectSpread(_objectSpread({}, noticeEntry), {}, { rowID: rowID, fieldName: fieldName }));}} catch (err) {_iterator.e(err);} finally {_iterator.f();}return octfResultObject.suggestion; // There may or may not be one!
            };addNoticePartial = function _addNoticePartial(noticeObject) {/**
              * @description - adds a new notice entry, adding bookID,C,V to the given fields
              * @param {Number} priority - notice priority from 1 (lowest) to 999 (highest)
              * @param {string} message - the text of the notice message
              * @param {string} rowID - 4-character row ID field
              * @param {Number} lineNumber - one-based line number
              * @param {Number} characterIndex - zero-based index of where the issue occurs in the line
              * @param {string} excerpt - short excerpt from the line centred on the problem (if available)
              * @param {string} location - description of where the issue is located
              */ // functionLog(`checkTWL_TSV6DataRow addNoticePartial(priority=${noticeObject.priority}) ${noticeObject.message}, ${noticeObject.characterIndex}, ${noticeObject.excerpt}, ${noticeObject.location}`);
              //parameterAssert(noticeObject.priority !== undefined, "checkTWL_TSV6DataRow addNoticePartial: 'priority' parameter should be defined");
              //parameterAssert(typeof noticeObject.priority === 'number', `checkTWL_TSV6DataRow addNoticePartial: 'priority' parameter should be a number not a '${typeof noticeObject.priority}': ${noticeObject.priority}`);
              //parameterAssert(noticeObject.message !== undefined, "checkTWL_TSV6DataRow addNoticePartial: 'message' parameter should be defined");
              //parameterAssert(typeof noticeObject.message === 'string', `checkTWL_TSV6DataRow addNoticePartial: 'message' parameter should be a string not a '${typeof noticeObject.message}': ${noticeObject.message}`);
              // //parameterAssert(lineNumber !== undefined, "checkTWL_TSV6DataRow addNoticePartial: 'lineNumber' parameter should be defined");
              // //parameterAssert(typeof lineNumber === 'number', `checkTWL_TSV6DataRow addNoticePartial: 'lineNumber' parameter should be a number not a '${typeof lineNumber}': ${lineNumber}`);
              // //parameterAssert(characterIndex !== undefined, "checkTWL_TSV6DataRow addNoticePartial: 'characterIndex' parameter should be defined");
              if (noticeObject.characterIndex) {//parameterAssert(typeof noticeObject.characterIndex === 'number', `checkTWL_TSV6DataRow addNoticePartial: 'characterIndex' parameter should be a number not a '${typeof noticeObject.characterIndex}': ${noticeObject.characterIndex}`);
              } // //parameterAssert(excerpt !== undefined, "checkTWL_TSV6DataRow addNoticePartial: 'excerpt' parameter should be defined");
              if (noticeObject.excerpt) {//parameterAssert(typeof noticeObject.excerpt === 'string', `checkTWL_TSV6DataRow addNoticePartial: 'excerpt' parameter should be a string not a '${typeof noticeObject.excerpt}': ${noticeObject.excerpt}`);
              } //parameterAssert(noticeObject.location !== undefined, "checkTWL_TSV6DataRow addNoticePartial: 'location' parameter should be defined");
              //parameterAssert(typeof noticeObject.location === 'string', `checkTWL_TSV6DataRow addNoticePartial: 'location' parameter should be a string not a '${typeof noticeObject.location}': ${noticeObject.location}`);
              // Also uses the given bookID,C,V, parameters from the main function call
              // noticeObject.debugChain = noticeObject.debugChain ? `checkTWL_TSV6DataRow ${noticeObject.debugChain}` : `checkTWL_TSV6DataRow(${repoCode})`;
              drResult.noticeList.push(_objectSpread(_objectSpread({}, noticeObject), {}, { bookID: bookID, C: givenC, V: givenV }));}; /* This function is only for checking one data row
                  and the function doesn’t assume that it has any previous context.
                 TWL being translation word-links.
                 bookID is a three-character UPPERCASE USFM book identifier or 'OBS'
                    so givenC and givenV are usually chapter number and verse number
                        but can be story number and frame number for OBS.
                 It’s designed to be able to quickly show errors for a single row being displayed/edited.
                 Returns an object containing the noticeList.
            */ // functionLog(`checkTWL_TSV6DataRow(${languageCode}, ${repoCode}, ${line}, ${bookID}, ${givenRowLocation}, ${JSON.stringify(checkingOptions)})…`);
            //parameterAssert(languageCode !== undefined, "checkTWL_TSV6DataRow: 'languageCode' parameter should be defined");
            //parameterAssert(typeof languageCode === 'string', `checkTWL_TSV6DataRow: 'languageCode' parameter should be a string not a '${typeof languageCode}'`);
            //parameterAssert(repoCode === 'TWL' || repoCode === 'OBS-TWL', `checkTWL_TSV6DataRow: repoCode expected 'TWL' or 'OBS-TWL' not '${repoCode}'`);
            //parameterAssert(line !== undefined, "checkTWL_TSV6DataRow: 'line' parameter should be defined");
            //parameterAssert(typeof line === 'string', `checkTWL_TSV6DataRow: 'line' parameter should be a string not a '${typeof line}'`);
            //parameterAssert(bookID !== undefined, "checkTWL_TSV6DataRow: 'bookID' parameter should be defined");
            //parameterAssert(typeof bookID === 'string', `checkTWL_TSV6DataRow: 'bookID' parameter should be a string not a '${typeof bookID}'`);
            //parameterAssert(bookID.length === 3, `checkTWL_TSV6DataRow: 'bookID' parameter should be three characters long not ${bookID.length}`);
            //parameterAssert(bookID.toUpperCase() === bookID, `checkTWL_TSV6DataRow: 'bookID' parameter should be UPPERCASE not '${bookID}'`);
            //parameterAssert(bookID === 'OBS' || books.isValidBookID(bookID), `checkTWL_TSV6DataRow: '${bookID}' is not a valid USFM book identifier`);
            // //parameterAssert(givenC !== undefined, "checkTWL_TSV6DataRow: 'givenC' parameter should be defined");
            if (givenC) {//parameterAssert(typeof givenC === 'string', `checkTWL_TSV6DataRow: 'givenC' parameter should be a string not a '${typeof givenC}'`);
            } // //parameterAssert(givenV !== undefined, "checkTWL_TSV6DataRow: 'givenV' parameter should be defined");
            if (givenV) {//parameterAssert(typeof givenV === 'string', `checkTWL_TSV6DataRow: 'givenV' parameter should be a string not a '${typeof givenV}'`);
            } //parameterAssert(givenRowLocation !== undefined, "checkTWL_TSV6DataRow: 'givenRowLocation' parameter should be defined");
            //parameterAssert(typeof givenRowLocation === 'string', `checkTWL_TSV6DataRow: 'givenRowLocation' parameter should be a string not a '${typeof givenRowLocation}'`);
            //parameterAssert(givenRowLocation.indexOf('true') === -1, "checkTWL_TSV6DataRow: 'givenRowLocation' parameter should not be 'true'");
            ourRowLocation = givenRowLocation;if (ourRowLocation && ourRowLocation[0] !== ' ') ourRowLocation = " ".concat(ourRowLocation);linkCheckingOptions = _objectSpread({}, checkingOptions);linkCheckingOptions.twRepoLanguageCode = languageCode;drResult = { noticeList: [] };if (!(line === EXPECTED_TWL_HEADING_LINE)) {_context3.next = 15;break;}return _context3.abrupt("return", drResult);case 15:try {excerptLength = checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.excerptLength;} catch (tlcELerror) {}if (typeof excerptLength !== 'number' || isNaN(excerptLength)) {excerptLength = _defaults.DEFAULT_EXCERPT_LENGTH; // debugLog(`Using default excerptLength=${excerptLength}`);
            } // else
            // debugLog(`Using supplied excerptLength=${excerptLength}`, `cf. default=${DEFAULT_EXCERPT_LENGTH}`);
            excerptHalfLength = Math.floor(excerptLength / 2); // rounded down
            excerptHalfLengthPlus = Math.floor((excerptLength + 1) / 2); // rounded up
            // debugLog(`Using excerptHalfLength=${excerptHalfLength}`, `excerptHalfLengthPlus=${excerptHalfLengthPlus}`);
            lowercaseBookID = bookID.toLowerCase();if (bookID === 'OBS') numChaptersThisBook = 50; // There's 50 Open Bible Stories
            else {//parameterAssert(lowercaseBookID !== 'obs', "Shouldn’t happen in checkTWL_TSV6DataRow");
                try {numChaptersThisBook = books.chaptersInBook(bookID);} catch (tlcNCerror) {addNoticePartial({ priority: 979, message: "Invalid book identifier passed to checkTWL_TSV6DataRow", location: " '".concat(bookID, "' in first parameter: ").concat(tlcNCerror) });}}haveGoodBookID = numChaptersThisBook !== undefined;fields = line.split('\t');if (!(fields.length === NUM_EXPECTED_TWL_TSV_FIELDS)) {_context3.next = 68;break;}_fields = (0, _slicedToArray2.default)(fields, 6), reference = _fields[0], rowID = _fields[1], tags = _fields[2], origWords = _fields[3], occurrence = _fields[4], TWLink = _fields[5]; // let withString = ` with '${rowID}'${inString}`;
            // let CV_withString = ` ${C}:${V}${withString}`;
            // let atString = ` at ${B} ${C}:${V} (${rowID})${inString}`;
            // Check the fields one-by-one
            _reference$split = reference.split(':'), _reference$split2 = (0, _slicedToArray2.default)(_reference$split, 2), C = _reference$split2[0], V = _reference$split2[1];if (C.length) {if (C !== givenC) addNoticePartial({ priority: 976, message: "Wrong chapter number", details: "expected '".concat(givenC, "'"), fieldName: 'Reference', rowID: rowID, excerpt: C, location: ourRowLocation });if (C === 'front') {} else if (/^\d+$/.test(C)) {intC = Number(C);if (intC === 0) {addNoticePartial({ priority: 824, message: "Invalid zero chapter number", excerpt: C, rowID: rowID, fieldName: 'Reference', location: ourRowLocation });haveGoodChapterNumber = false;} // TODO: Does this next section need rewriting (see verse check below)???
                else if (intC > numChaptersThisBook) {addNoticePartial({ priority: 823, message: "Invalid large chapter number", excerpt: C, rowID: rowID, fieldName: 'Reference', location: ourRowLocation });haveGoodChapterNumber = false;}if (lowercaseBookID === 'obs') numVersesThisChapter = 99; // Set to maximum expected number of frames
                else {try {numVersesThisChapter = books.versesInChapter(lowercaseBookID, intC);haveGoodChapterNumber = true;} catch (tlcNVerror) {if (!haveGoodBookID) // addNoticePartial({priority:500, "Invalid chapter number", rowLocation);
                        // else
                        addNoticePartial({ priority: 822, message: "Unable to check chapter number", excerpt: C, rowID: rowID, fieldName: 'Reference', location: ourRowLocation });haveGoodChapterNumber = false;}}} else addNoticePartial({ priority: 821, message: "Bad chapter number", excerpt: C, rowID: rowID, fieldName: 'Reference', location: ourRowLocation });} else addNoticePartial({ priority: 820, message: "Missing chapter number", rowID: rowID, fieldName: 'Reference', location: " ?:".concat(V).concat(ourRowLocation) });if (V !== null && V !== void 0 && V.length) {// can be undefined if no colon at split above
              if (V !== givenV) addNoticePartial({ priority: 975, message: "Wrong verse number", details: "expected '".concat(givenV, "'"), rowID: rowID, fieldName: 'Reference', excerpt: V, location: ourRowLocation });if (bookID === 'OBS' || V === 'intro') {} else if (/^\d+$/.test(V)) {intV = Number(V);if (intV === 0 && bookID !== 'PSA') // Psalms have \d as verse zero
                  addNoticePartial({ priority: 814, message: "Invalid zero verse number", rowID: rowID, fieldName: 'Reference', excerpt: V, location: ourRowLocation });else {if (haveGoodChapterNumber) {if (intV > numVersesThisChapter) addNoticePartial({ priority: 813, message: "Invalid large verse number", details: "".concat(bookID, " chapter ").concat(C, " only has ").concat(numVersesThisChapter, " verses"), rowID: rowID, fieldName: 'Reference', excerpt: V, location: ourRowLocation });} else addNoticePartial({ priority: 812, message: "Unable to check verse number", rowID: rowID, fieldName: 'Reference', location: ourRowLocation });}} else addNoticePartial({ priority: 811, message: "Bad verse number", rowID: rowID, fieldName: 'Reference', location: " '".concat(V, "'").concat(ourRowLocation) });} else addNoticePartial({ priority: 810, message: "Missing verse number", rowID: rowID, fieldName: 'Reference', location: " after ".concat(C, ":?").concat(ourRowLocation) });if (!rowID.length) addNoticePartial({ priority: 931, message: "Missing row ID field", fieldName: 'Reference', location: ourRowLocation });else {if (rowID.length !== 4) {addNoticePartial({ priority: 778, message: "Row ID should be exactly 4 characters", details: "not ".concat(rowID.length), rowID: rowID, fieldName: 'ID', excerpt: rowID, location: ourRowLocation });if (rowID.length > 4) RIDSuggestion = rowID.substring(0, 5);else {// must be < 4
                  RIDSuggestion = rowID;while (RIDSuggestion.length < 4) {RIDSuggestion += LC_ALPHABET_PLUS_DIGITS[Math.floor(Math.random() * LC_ALPHABET_PLUS_DIGITS.length)];};}} else if (LC_ALPHABET.indexOf(rowID[0]) < 0) addNoticePartial({ priority: 176, message: "Row ID should start with a lowercase letter", characterIndex: 0, rowID: rowID, fieldName: 'ID', excerpt: rowID, location: ourRowLocation });else if (LC_ALPHABET_PLUS_DIGITS.indexOf(rowID[3]) < 0) addNoticePartial({ priority: 175, message: "Row ID should end with a lowercase letter or digit", characterIndex: 3, rowID: rowID, fieldName: 'ID', excerpt: rowID, location: ourRowLocation });else if (LC_ALPHABET_PLUS_DIGITS_PLUS_HYPHEN.indexOf(rowID[1]) < 0) addNoticePartial({ priority: 174, message: "Row ID characters should only be lowercase letters, digits, or hypen", fieldName: 'ID', characterIndex: 1, rowID: rowID, excerpt: rowID, location: ourRowLocation });else if (LC_ALPHABET_PLUS_DIGITS_PLUS_HYPHEN.indexOf(rowID[2]) < 0) addNoticePartial({ priority: 173, message: "Row ID characters should only be lowercase letters, digits, or hypen", fieldName: 'ID', characterIndex: 2, rowID: rowID, excerpt: rowID, location: ourRowLocation });}if (tags.length) {tagsList = tags.split('; ');_iterator2 = _createForOfIteratorHelper(tagsList);try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {thisTag = _step2.value;if (thisTag !== 'keyterm' && thisTag !== 'name') addNoticePartial({ priority: 740, message: "Unrecognized tag", details: "found '".concat(thisTag, "' but expected 'keyterm' or 'name'"), excerpt: tags, fieldName: 'Tags', rowID: rowID, location: ourRowLocation });}} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}}if (!origWords.length) {_context3.next = 40;break;} // need to check UTN against UHB and UGNT
            QSuggestion = ourCheckTextField(rowID, 'OrigWords', origWords, false, ourRowLocation, checkingOptions);if (!occurrence.length) {_context3.next = 37;break;}_context3.next = 35;return ourCheckTNOriginalLanguageQuoteAndOccurrence(rowID, 'OrigWords', origWords, occurrence, ourRowLocation, checkingOptions);case 35:_context3.next = 38;break;case 37:addNoticePartial({ priority: 750, message: "Missing occurrence field when we have an original quote", fieldName: 'Occurrence', rowID: rowID, location: ourRowLocation });case 38:_context3.next = 41;break;case 40: // TODO: Find more details about when these fields are really compulsory (and when they're not, e.g., for 'intro') ???
            if (V !== 'intro' && occurrence !== '0') addNoticePartial({ priority: 919, message: "Missing OrigWords field", fieldName: 'OrigWords', rowID: rowID, location: ourRowLocation });case 41:if (occurrence.length) {// This should usually be a digit
              if (occurrence === '0') {// zero means that it doesn’t occur
                if (origWords.length) {addNoticePartial({ priority: 751, message: "Invalid zero occurrence field when we have an original quote", fieldName: 'Occurrence', rowID: rowID, excerpt: occurrence, location: ourRowLocation });OSuggestion = '1';} // if (V !== 'intro')
                //     addNoticePartial({priority:500, message:"Invalid zero occurrence field", rowID, location:rowLocation);
              } else if (occurrence === '-1') {} // TODO check the special conditions when this can occur???
              else if ('12345678'.indexOf(occurrence) < 0) {// it’s not one of these integers
                  addNoticePartial({ priority: 792, message: "Invalid occurrence field", fieldName: 'Occurrence', rowID: rowID, excerpt: occurrence, location: ourRowLocation });OSuggestion = '1';}} else if (origWords.length) {addNoticePartial({ priority: 791, message: "Missing occurrence field", fieldName: 'Occurrence', rowID: rowID, location: ourRowLocation });OSuggestion = '1';}if (!TWLink.length) {_context3.next = 63;break;} // debugLog(`checkTWL_TSV6DataRow checking ${bookID} ${rowID} TWLink='${TWLink}'`);
            if (TWLink.indexOf("\u200B") >= 0) {charCount = (0, _textHandlingFunctions.countOccurrences)(TWLink, "\u200B");addNoticePartial({ priority: 374, message: "Field contains zero-width space(s)", details: "".concat(charCount, " occurrence").concat(charCount === 1 ? '' : 's', " found"), fieldName: 'TWLink', rowID: rowID, location: ourRowLocation });}if (!(0, _textHandlingFunctions.isWhitespace)(TWLink)) {_context3.next = 48;break;}addNoticePartial({ priority: 796, message: "Field is only whitespace", fieldName: 'TWLink', rowID: rowID, location: ourRowLocation });_context3.next = 61;break;case 48:if (TWLink.startsWith('rc://*/tw/dict/bible/')) {_context3.next = 52;break;}addNoticePartial({ priority: 798, message: "Field doesn’t contain expected TW link", details: "should start with 'rc://*/tw/dict/bible/'", fieldName: 'TWLink', rowID: rowID, location: ourRowLocation });_context3.next = 61;break;case 52: // it starts correctly
            bits = TWLink.substring('rc://*/tw/dict/bible/'.length).split('/'); // Get the last two bits of the link path
            // debugLog(`checkTWL_TSV6DataRow checking ${bookID} ${rowID} TWLink='${TWLink}' got bits=${JSON.stringify(bits)}`);
            if (!(bits[0] !== 'kt' && bits[0] !== 'names' && bits[0] !== 'other')) {_context3.next = 59;break;}characterIndex = 'rc://*/tw/dict/bible/'.length;excerpt = (characterIndex > excerptHalfLength ? '…' : '') + TWLink.substring(characterIndex - excerptHalfLength, characterIndex + excerptHalfLengthPlus) + (characterIndex + excerptHalfLengthPlus < TWLink.length ? '…' : '');addNoticePartial({ priority: 797, message: "Field doesn’t contain proper TW link", details: "should be 'kt', 'names', or 'other'", fieldName: 'TWLink', rowID: rowID, characterIndex: characterIndex, excerpt: excerpt, location: ourRowLocation });_context3.next = 61;break;case 59:_context3.next = 61;return ourCheckNotesLinksToOutside(rowID, 'TWLink', TWLink, ourRowLocation, linkCheckingOptions);case 61:_context3.next = 64;break;case 63: // TWLink is empty/missing
            addNoticePartial({ priority: 799, message: "Missing TWLink field", fieldName: 'TWLink', rowID: rowID, location: ourRowLocation });case 64: // 7 [reference, rowID, tags, quote, occurrence, TWLink]
            suggestion = "".concat(reference, "\t").concat(RIDSuggestion === undefined ? rowID : RIDSuggestion, "\t").concat(tags, "\t").concat(QSuggestion === undefined ? origWords : QSuggestion, "\t").concat(OSuggestion === undefined ? occurrence : OSuggestion, "\t").concat(LSuggestion === undefined ? TWLink : LSuggestion);if (suggestion !== line) {drResult.suggestion = suggestion;}_context3.next = 71;break;case 68: // wrong number of fields in the row
            // Have a go at getting some of the first fields out of the row
            _rowID = '????';try {_rowID = fields[1];} catch (_unused) {}addNoticePartial({ priority: 984, message: "Found wrong number of TSV fields (expected ".concat(NUM_EXPECTED_TWL_TSV_FIELDS, ")"), details: "Found ".concat(fields.length, " field").concat(fields.length === 1 ? '' : 's'), rowID: _rowID, location: ourRowLocation });case 71:return _context3.abrupt("return", drResult);case 72:case "end":return _context3.stop();}}}, _callee3);}));return _checkTWL_TSV6DataRow.apply(this, arguments);}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,