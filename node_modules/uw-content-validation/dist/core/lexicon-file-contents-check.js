"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.checkLexiconFileContents = checkLexiconFileContents;var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _defaults = require("./defaults");
var _markdownTextCheck = require("./markdown-text-check");
var _fileTextCheck = require("./file-text-check");

var _utilities = require("./utilities");function _createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {(0, _defineProperty2.default)(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}


var LEXICON_MARKDOWN_FILE_VALIDATOR_VERSION_STRING = '0.4.4';


/**
 *
 * @param {string} languageCode
 * @param {string} repoCode -- e.g., 'UHAL', or 'UGL', etc.
 * @param {string} lexiconFilename -- used for identification
 * @param {string} lexiconMarkdownText -- the actual text to be checked
 * @param {string} givenLocation
 * @param {Object} checkingOptions
 */function
checkLexiconFileContents(_x, _x2, _x3, _x4, _x5, _x6) {return _checkLexiconFileContents.apply(this, arguments);}








































































































































































// end of checkLexiconFileContents function
function _checkLexiconFileContents() {_checkLexiconFileContents = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(languageCode, repoCode, lexiconFilename, lexiconMarkdownText, givenLocation, checkingOptions) {var ourLocation, excerptLength, result, addSuccessMessage, addNoticePartial, ourCheckMarkdownText, _ourCheckMarkdownText, ourFileTextCheck, lines, hierarchy, currentLevel, _iterator2, _step2, line, adjustedLine, colonIndex, compulsoryFields, _loop, _i, _compulsoryFields;return _regenerator.default.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:ourFileTextCheck = function _ourFileTextCheck(lexiconMarkdownText, optionalFieldLocation, checkingOptions) {// Does basic checks for small errors like leading/trailing spaces, etc.
              // We assume that checking for compulsory fields is done elsewhere
              // Updates the global list of notices
              // debugLog(`cMdFC ourFileTextCheck(${lexiconMarkdownText}, (${lexiconMarkdownText.length}), ${optionalFieldLocation}, ${JSON.stringify(checkingOptions)})`);
              //parameterAssert(lexiconMarkdownText !== undefined, "cMdFC ourFileTextCheck: 'lexiconMarkdownText' parameter should be defined");
              //parameterAssert(typeof lexiconMarkdownText === 'string', `cMdFC ourFileTextCheck: 'lexiconMarkdownText' parameter should be a string not a '${typeof lexiconMarkdownText}'`);
              //parameterAssert(checkingOptions !== undefined, "cMdFC ourFileTextCheck: 'checkingOptions' parameter should be defined");
              var ctfcResultObject = (0, _fileTextCheck.checkTextfileContents)(languageCode, repoCode, 'markdown', lexiconFilename, lexiconMarkdownText, optionalFieldLocation, checkingOptions); // debugLog(`ctfcResultObject=${JSON.stringify(ctfcResultObject)}`);
              // If we need to put everything through addNoticePartial, e.g., for debugging or filtering
              //  process results line by line
              var _iterator = _createForOfIteratorHelper(ctfcResultObject.noticeList),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var noticeEntry = _step.value;addNoticePartial(noticeEntry);}} catch (err) {_iterator.e(err);} finally {_iterator.f();}};_ourCheckMarkdownText = function _ourCheckMarkdownText3() {_ourCheckMarkdownText = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(lexiconMarkdownText, optionalFieldLocation, checkingOptions) {var cmtResultObject, _iterator3, _step3, noticeEntry;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:_context.next = 2;return (0, _markdownTextCheck.checkMarkdownText)(languageCode, repoCode, lexiconFilename, lexiconMarkdownText, optionalFieldLocation, checkingOptions);case 2:cmtResultObject = _context.sent; // debugLog(`cmtResultObject=${JSON.stringify(cmtResultObject)}`);
                        // If we need to put everything through addNoticePartial, e.g., for debugging or filtering
                        //  process results line by line
                        _iterator3 = _createForOfIteratorHelper(cmtResultObject.noticeList);try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {noticeEntry = _step3.value;addNoticePartial(noticeEntry);}} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}case 5:case "end":return _context.stop();}}}, _callee);}));return _ourCheckMarkdownText.apply(this, arguments);};ourCheckMarkdownText = function _ourCheckMarkdownText2(_x7, _x8, _x9) {return _ourCheckMarkdownText.apply(this, arguments);};addNoticePartial = function _addNoticePartial(noticeObject) {// functionLog(`checkLexiconFileContents addNoticePartial: (priority=${noticeObject.priority}) ${noticeObject.message}${noticeObject.characterIndex > 0 ? ` (at character ${noticeObject.characterIndex})` : ""}${noticeObject.excerpt ? " " + noticeObject.excerpt : ""}${noticeObject.location}`);
              //parameterAssert(noticeObject.priority !== undefined, "cMdT addNoticePartial: 'priority' parameter should be defined");
              //parameterAssert(typeof noticeObject.priority === 'number', `cMdT addNoticePartial: 'priority' parameter should be a number not a '${typeof noticeObject.priority}': ${noticeObject.priority}`);
              //parameterAssert(noticeObject.message !== undefined, "cMdT addNoticePartial: 'message' parameter should be defined");
              //parameterAssert(typeof noticeObject.message === 'string', `cMdT addNoticePartial: 'message' parameter should be a string not a '${typeof noticeObject.message}': ${noticeObject.message}`);
              // //parameterAssert(characterIndex !== undefined, "cMdT addNoticePartial: 'characterIndex' parameter should be defined");
              if (noticeObject.characterIndex) {//parameterAssert(typeof noticeObject.characterIndex === 'number', `cMdT addNoticePartial: 'characterIndex' parameter should be a number not a '${typeof noticeObject.characterIndex}': ${noticeObject.characterIndex}`);
              } // //parameterAssert(excerpt !== undefined, "cMdT addNoticePartial: 'excerpt' parameter should be defined");
              if (noticeObject.excerpt) {//parameterAssert(typeof noticeObject.excerpt === 'string', `cMdT addNoticePartial: 'excerpt' parameter should be a string not a '${typeof noticeObject.excerpt}': ${noticeObject.excerpt}`);
              } //parameterAssert(noticeObject.location !== undefined, "cMdT addNoticePartial: 'location' parameter should be defined");
              //parameterAssert(typeof noticeObject.location === 'string', `cMdT addNoticePartial: 'location' parameter should be a string not a '${typeof noticeObject.location}': ${noticeObject.location}`);
              if (noticeObject.debugChain) noticeObject.debugChain = "checkLexiconFileContents ".concat(noticeObject.debugChain); // Prepend our name
              result.noticeList.push(_objectSpread(_objectSpread({}, noticeObject), {}, { filename: lexiconFilename }));};addSuccessMessage = function _addSuccessMessage(successString) {// debugLog("checkLexiconFileContents success: " + successString);
              result.successList.push(successString);}; /* This function is optimised for checking the entire markdown file, i.e., all lines.
              Returns a result object containing a successList and a noticeList
             */ // functionLog(`checkLexiconFileContents(lC=${languageCode}, rC=${repoCode}, fn=${lexiconFilename}, ${lexiconMarkdownText.length}, ${givenLocation})…`);
            //parameterAssert(languageCode !== undefined, "checkLexiconFileContents: 'languageCode' parameter should be defined");
            //parameterAssert(typeof languageCode === 'string', `checkLexiconFileContents: 'languageCode' parameter should be a string not a '${typeof languageCode}': ${languageCode}`);
            (0, _utilities.parameterAssert)(repoCode === 'UHAL' || repoCode === 'UGL', "checkLexiconFileContents: 'repoCode' parameter should be 'UHAL' or 'UGL', not '".concat(repoCode, "'")); //parameterAssert(lexiconFilename !== undefined, "checkLexiconFileContents: 'lexiconFilename' parameter should be defined");
            //parameterAssert(typeof lexiconFilename === 'string', `checkLexiconFileContents: 'lexiconFilename' parameter should be a string not a '${typeof lexiconFilename}': ${lexiconFilename}`);
            //parameterAssert(lexiconMarkdownText !== undefined, "checkLexiconFileContents: 'lexiconMarkdownText' parameter should be defined");
            //parameterAssert(typeof lexiconMarkdownText === 'string', `checkLexiconFileContents: 'lexiconMarkdownText' parameter should be a string not a '${typeof lexiconMarkdownText}': ${lexiconMarkdownText}`);
            //parameterAssert(givenLocation !== undefined, "checkLexiconFileContents: 'givenLocation' parameter should be defined");
            //parameterAssert(typeof givenLocation === 'string', `checkLexiconFileContents: 'givenLocation' parameter should be a string not a '${typeof givenLocation}': ${givenLocation}`);
            //parameterAssert(givenLocation.indexOf('true') === -1, `checkLexiconFileContents: 'givenLocation' parameter should not be '${givenLocation}'`);
            if (checkingOptions !== undefined) {//parameterAssert(typeof checkingOptions === 'object', `checkLexiconFileContents: 'checkingOptions' parameter should be an object not a '${typeof checkingOptions}': ${JSON.stringify(checkingOptions)}`);
            }ourLocation = givenLocation;if (ourLocation && ourLocation[0] !== ' ') ourLocation = " ".concat(ourLocation);try {excerptLength = checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.excerptLength;} catch (mdtcError) {}if (typeof excerptLength !== 'number' || isNaN(excerptLength)) {excerptLength = _defaults.DEFAULT_EXCERPT_LENGTH; // debugLog("Using default excerptLength=" + excerptLength);
            } // else
            // debugLog("Using supplied excerptLength=" + excerptLength, `cf. default=${DEFAULT_EXCERPT_LENGTH}`);
            // const excerptHalfLength = Math.floor(excerptLength / 2); // rounded down
            // const excerptHalfLengthPlus = Math.floor((excerptLength + 1) / 2); // rounded up
            // debugLog("Using excerptHalfLength=" + excerptHalfLength, `excerptHalfLengthPlus=${excerptHalfLengthPlus}`);
            result = { successList: [], noticeList: [] }; // end of ourFileTextCheck function
            // Main code for checkLexiconFileContents function
            lines = lexiconMarkdownText.split('\n'); // debugLog(`  '${location}' has ${lines.length.toLocaleString()} total lines`);
            // Create the hierarchy of the headings
            hierarchy = [];_iterator2 = _createForOfIteratorHelper(lines);try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {line = _step2.value;if (line.startsWith('## ')) {currentLevel = line.substring(3);hierarchy.push({ level: currentLevel, sublevels: [] });}if (currentLevel && line.startsWith('* ')) {adjustedLine = line.substring(2);colonIndex = adjustedLine.indexOf(':');if (colonIndex !== -1) adjustedLine = adjustedLine.substring(0, colonIndex); // we don't want the actual data
                  hierarchy[hierarchy.length - 1].sublevels.push(adjustedLine);}} // debugLog(`checkLexiconFileContents hierarchy=${JSON.stringify(hierarchy)}`);
            } catch (err) {_iterator2.e(err);} finally {_iterator2.f();}compulsoryFields = ['## Word data', '## Etymology', '## Senses'];if (repoCode === 'UHAL') {} else if (repoCode === 'UGL') {} // This next part is common for UHAL and UGL
            if (!lines[0].startsWith('# ') || lines[0].length < 4) addNoticePartial({ priority: 630, message: "Expected lexicon lemma on first line", except: lines[0], location: ourLocation });if (!lines[2].startsWith('<!-- Status: ')) addNoticePartial({ priority: 330, message: "Expected lexicon entry status on third line", except: lines[2], location: ourLocation });_loop = function _loop() {var compulsoryField = _compulsoryFields[_i];if (!lines.find(function (field) {return field.startsWith(compulsoryField);})) addNoticePartial({ priority: 620, message: "Expected lexicon lemma on first line", except: lines[0], location: ourLocation });};for (_i = 0, _compulsoryFields = compulsoryFields; _i < _compulsoryFields.length; _i++) {_loop();} // Now do the standard markdown checks
            _context2.next = 24;return ourCheckMarkdownText(lexiconMarkdownText, givenLocation, checkingOptions);case 24:ourFileTextCheck(lexiconMarkdownText, givenLocation, checkingOptions);addSuccessMessage("Checked lexicon file: ".concat(lexiconFilename));if (result.noticeList.length) addSuccessMessage("checkLexiconFileContents v".concat(LEXICON_MARKDOWN_FILE_VALIDATOR_VERSION_STRING, " finished with ").concat(result.noticeList.length ? result.noticeList.length.toLocaleString() : "zero", " notice").concat(result.noticeList.length === 1 ? '' : 's'));else addSuccessMessage("No errors or warnings found by checkLexiconFileContents v".concat(LEXICON_MARKDOWN_FILE_VALIDATOR_VERSION_STRING)); // debugLog(`  checkLexiconFileContents returning with ${result.successList.length.toLocaleString()} success(es), ${result.noticeList.length.toLocaleString()} notice(s).`);
            // userLog(`checkLexiconFileContents result is ${JSON.stringify(result)}`);
            return _context2.abrupt("return", result);case 28:case "end":return _context2.stop();}}}, _callee2);}));return _checkLexiconFileContents.apply(this, arguments);}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,