"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _typeof = require("@babel/runtime/helpers/typeof");Object.defineProperty(exports, "__esModule", { value: true });exports.checkFileContents = checkFileContents;var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var books = _interopRequireWildcard(require("../../core/books/books"));
var _core = require("../../core");function _getRequireWildcardCache(nodeInterop) {if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {return nodeInterop ? cacheNodeInterop : cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj, nodeInterop) {if (!nodeInterop && obj && obj.__esModule) {return obj;}if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {(0, _defineProperty2.default)(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}










// const CHECK_FILE_CONTENTS_VERSION_STRING = '0.5.0';


/**
 *
 * @param {string} username for Door43.org
 * @param {string} languageCode, e.g., 'en'
 * @param {string} repoCode, e.g., 'LT', 'TN', 'TN2', 'TQ', 'TWL', etc.
 * @param {string} branch, e.g., 'master'
 * @param {string} filepath -- often just a filename
 * @param {string} fileContent
 * @param {string} givenLocation
 * @param {Object} checkingOptions
 */function
checkFileContents(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8) {return _checkFileContents.apply(this, arguments);}function _checkFileContents() {_checkFileContents = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(username, languageCode, repoCode, branch, filepath, fileContent, givenLocation, checkingOptions) {var startTime, ourCFLocation, filebits, filename, filenameLower, repoName, checkFileResult, filenameMain, bookID, checkFunction, _filenameMain, _bookID, _filenameMain2, _bookID2,






























































































    addFilenameField;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:addFilenameField = function _addFilenameField(noticeObject) {
              if (noticeObject.debugChain) noticeObject.debugChain = "checkFileContents ".concat(noticeObject.debugChain);
              if (noticeObject.fieldName === filepath) delete noticeObject.fieldName;
              // TODO: Might we need to add username, repoName, or branch here ???
              return noticeObject.extra ? noticeObject : _objectSpread(_objectSpread({}, noticeObject), {}, { filename: filepath }); // NOTE: might be an indirect check on a TA or TW article
            }; // Determine the file type from the filename extension
            //  and return the results of checking that kind of file text
            // functionLog(`checkFileContents(un='${username}', lC='${languageCode}', rC='${repoCode}', rBr='${branch}', fn='${filepath}', ${fileContent.length} chars, ${givenLocation}, ${JSON.stringify(checkingOptions)})â€¦`);
            //parameterAssert(username !== undefined, "checkFileContents: 'username' parameter should be defined");
            //parameterAssert(typeof username === 'string', `checkFileContents: 'username' parameter should be a string not a '${typeof username}': ${username}`);
            //parameterAssert(languageCode !== undefined, "checkFileContents: 'languageCode' parameter should be defined");
            //parameterAssert(typeof languageCode === 'string', `checkFileContents: 'languageCode' parameter should be a string not a '${typeof languageCode}': ${languageCode}`);
            //parameterAssert(repoCode !== undefined, "checkFileContents: 'repoCode' parameter should be defined");
            //parameterAssert(typeof repoCode === 'string', `checkFileContents: 'repoCode' parameter should be a string not a '${typeof repoCode}': ${repoCode}`);
            //parameterAssert(REPO_CODES_LIST.includes(repoCode), `checkFileContents: 'repoCode' parameter should not be '${repoCode}'`);
            //parameterAssert(branch !== undefined, "checkFileContents: 'branch' parameter should be defined");
            //parameterAssert(typeof branch === 'string', `checkFileContents: 'branch' parameter should be a string not a '${typeof branch}': ${branch}`);
            //parameterAssert(filepath !== undefined, "checkFileContents: 'filepath' parameter should be defined");
            //parameterAssert(typeof filepath === 'string', `checkFileContents: 'filepath' parameter should be a string not a '${typeof filepath}': ${filepath}`);
            //parameterAssert(fileContent !== undefined, "checkFileContents: 'fileContent' parameter should be defined");
            //parameterAssert(typeof fileContent === 'string', `checkFileContents: 'fileContent' parameter should be a string not a '${typeof fileContent}': ${fileContent.length}`);
            //parameterAssert(givenLocation !== undefined, "checkFileContents: 'givenLocation' parameter should be defined");
            //parameterAssert(typeof givenLocation === 'string', `checkFileContents: 'givenLocation' parameter should be a string not a '${typeof givenLocation}': ${givenLocation}`);
            //parameterAssert(checkingOptions !== undefined, "checkFileContents: 'checkingOptions' parameter should be defined");
            startTime = new Date();ourCFLocation = givenLocation;if (ourCFLocation[0] !== ' ') ourCFLocation = ' ' + ourCFLocation;filebits = filepath.split('/');filename = filebits[filebits.length - 1]; // debugLog(`checkFileContents from filepath='${filepath}' got (${filebits.length}) ${filebits} and then '${filename}'`);
            filenameLower = filename.toLowerCase();repoName = (0, _core.formRepoName)(languageCode, repoCode);checkFileResult = { checkedFileCount: 0 };if (!filenameLower.endsWith('.tsv')) {_context.next = 26;break;}filenameMain = filepath.substring(0, filepath.length - 4); // drop .tsv
            // functionLog(`checkFileContents have TSV filenameMain=${filenameMain}`);
            bookID = filenameMain.startsWith("".concat(languageCode, "_")) || filenameMain.startsWith('en_') ? filenameMain.substring(filenameMain.length - 3) : filenameMain.substring(filenameMain.length - 3, filenameMain.length).toUpperCase(); // functionLog(`checkFileContents have TSV bookID=${bookID}`);
            //parameterAssert(bookID === 'OBS' || books.isValidBookID(bookID), `checkFileContents: '${bookID}' is not a valid USFM book identifier`);
            if (!(filepath.startsWith("".concat(languageCode, "_")) || filenameMain.startsWith('en_'))) {_context.next = 19;break;}(0, _core.logicAssert)(repoCode === 'TN', "These filenames ".concat(filenameMain, " are only for TN ").concat(repoCode));_context.next = 16;return (0, _core.checkTN_TSV9Table)(languageCode, repoCode, bookID, filepath, fileContent, ourCFLocation, checkingOptions);case 16:checkFileResult = _context.sent;_context.next = 24;break;case 19: // let adjustedRepoCode = repoCode;
            // if (adjustedRepoCode.startsWith('OBS-'))
            //   adjustedRepoCode = adjustedRepoCode.substring(4); // Remove the 'OBS-' from the beginning
            (0, _core.logicAssert)(repoCode !== 'TN' && repoCode !== 'TQ' && repoCode !== 'OBS-TN' && repoCode !== 'OBS-TQ' && repoCode !== 'OBS_SN' && repoCode !== 'OBS-SQ', "This code with ".concat(filenameMain, " is not for ").concat(repoCode));checkFunction = { 'TWL': _core.checkTWL_TSV6Table, 'OBS-TWL': _core.checkTWL_TSV6Table, 'TN2': _core.checkNotesTSV7Table, 'OBS-TN2': _core.checkNotesTSV7Table, 'TQ2': _core.checkQuestionsTSV7Table, 'OBS-TQ2': _core.checkQuestionsTSV7Table, 'SN': _core.checkNotesTSV7Table, 'OBS-SN2': _core.checkNotesTSV7Table, 'SQ': _core.checkQuestionsTSV7Table, 'OBS-SQ2': _core.checkQuestionsTSV7Table }[repoCode]; // debugLog(`checkFileContents() got ${checkFunction} function for ${repoCode}`);
            _context.next = 23;return checkFunction(languageCode, repoCode, bookID, filepath, fileContent, ourCFLocation, checkingOptions);case 23:checkFileResult = _context.sent;case 24:_context.next = 79;break;case 26:if (!filenameLower.endsWith('.usfm')) {_context.next = 34;break;}_filenameMain = filepath.substring(0, filepath.length - 5); // drop .usfm
            // debugLog(`Have USFM filenameMain=${filenameMain}`);
            _bookID = _filenameMain.substring(_filenameMain.length - 3); // debugLog(`Have USFM bookcode=${bookID}`);
            //parameterAssert(books.isValidBookID(bookID), `checkFileContents: '${bookID}' is not a valid USFM book identifier`);
            _context.next = 31;return (0, _core.checkUSFMText)(languageCode, repoCode, _bookID, filepath, fileContent, ourCFLocation, checkingOptions);case 31:checkFileResult = _context.sent;_context.next = 79;break;case 34:if (!filenameLower.endsWith('.sfm')) {_context.next = 44;break;}_filenameMain2 = filepath.substring(0, filepath.length - 4); // drop .sfm
            (0, _core.userLog)("checkFileContents have SFM filenameMain=".concat(_filenameMain2));_bookID2 = _filenameMain2.substring(2, 5);(0, _core.userLog)("checkFileContents have SFM bookcode=".concat(_bookID2)); //parameterAssert(books.isValidBookID(bookID), `checkFileContents: '${bookID}' is not a valid USFM book identifier`);
            _context.next = 41;return (0, _core.checkUSFMText)(languageCode, repoCode, _bookID2, filepath, fileContent, ourCFLocation, checkingOptions);case 41:checkFileResult = _context.sent;_context.next = 79;break;case 44:if (!filenameLower.endsWith('.md')) {_context.next = 56;break;}if (!(repoCode === 'UHAL' && filename[0] === 'H' && filename.length === 8 || repoCode === 'UGL' && filename === '01.md')) {_context.next = 51;break;}_context.next = 48;return (0, _core.checkLexiconFileContents)(languageCode, repoCode, filepath, fileContent, ourCFLocation, checkingOptions);case 48:checkFileResult = _context.sent;_context.next = 54;break;case 51:_context.next = 53;return (0, _core.checkMarkdownFileContents)(languageCode, repoCode, filepath, fileContent, ourCFLocation, checkingOptions);case 53:checkFileResult = _context.sent;case 54:_context.next = 79;break;case 56:if (!filenameLower.endsWith('.txt')) {_context.next = 60;break;}checkFileResult = (0, _core.checkPlainText)(languageCode, repoCode, 'text', filepath, fileContent, ourCFLocation, checkingOptions);_context.next = 79;break;case 60:if (!(filenameLower === 'manifest.yaml')) {_context.next = 66;break;}_context.next = 63;return (0, _core.checkManifestText)(languageCode, repoCode, username, repoName, branch, fileContent, ourCFLocation, checkingOptions);case 63:checkFileResult = _context.sent;_context.next = 79;break;case 66:if (!filenameLower.endsWith('.yaml')) {_context.next = 70;break;}checkFileResult = (0, _core.checkYAMLText)(languageCode, repoCode, filepath, fileContent, ourCFLocation, checkingOptions);_context.next = 79;break;case 70:if (!filenameLower.startsWith('license')) {_context.next = 77;break;}_context.next = 73;return (0, _core.checkMarkdownFileContents)(languageCode, repoCode, filepath, fileContent, ourCFLocation, checkingOptions);case 73:checkFileResult = _context.sent;checkFileResult.noticeList.unshift({ priority: 982, message: "File extension is not recognized, so treated as markdown.", filename: filepath, location: ourCFLocation });_context.next = 79;break;case 77:checkFileResult = (0, _core.checkPlainText)(languageCode, repoCode, 'raw', filepath, fileContent, ourCFLocation, checkingOptions);checkFileResult.noticeList.unshift({ priority: 995, message: "File extension is not recognized, so treated as plain text.", filename: filepath, location: ourCFLocation });case 79:checkFileResult.noticeList = checkFileResult.noticeList.map(addFilenameField); // Add some extra fields to our checkFileResult object
            //  in case we need this information again later
            checkFileResult.checkedFileCount += 1;checkFileResult.checkedFilename = filepath;checkFileResult.checkedFilesize = fileContent.length;checkFileResult.checkedOptions = checkingOptions;checkFileResult.elapsedSeconds = (new Date() - startTime) / 1000; // seconds
            // debugLog(`checkFileContents() returning ${JSON.stringify(checkFileResult)}`);
            return _context.abrupt("return", checkFileResult);case 86:case "end":return _context.stop();}}}, _callee);}));return _checkFileContents.apply(this, arguments);}; // end of checkFileContents()
//# sourceMappingURL=data:application/json;charset=utf-8;base64,