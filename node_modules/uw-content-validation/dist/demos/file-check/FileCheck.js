"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _typeof = require("@babel/runtime/helpers/typeof");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));var _react = _interopRequireWildcard(require("react"));
var _styles = require("@material-ui/core/styles");
var _core = require("../../core");
var _noticeProcessingFunctions = require("../notice-processing-functions");
var _RenderProcessedResults = require("../RenderProcessedResults");
var _checkFileContents = require("./checkFileContents");

var _utilities = require("../../core/utilities");function _getRequireWildcardCache(nodeInterop) {if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {return nodeInterop ? cacheNodeInterop : cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj, nodeInterop) {if (!nodeInterop && obj && obj.__esModule) {return obj;}if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;} // eslint-disable-next-line no-unused-vars


// const FILE_CHECK_VERSION_STRING = '0.3.2';


function FileCheck(props) {
  // debugLog(`I'm here in FileCheck v${FILE_CHECK_VERSION_STRING}`);
  // consoleLogObject("props", props);

  var _useState = (0, _react.useState)("Waiting-FileCheck"),_useState2 = (0, _slicedToArray2.default)(_useState, 2),result = _useState2[0],setResultValue = _useState2[1];
  (0, _react.useEffect)(function () {
    // debugLog("FileCheck.useEffect() called with ", JSON.stringify(props));

    // Use an IIFE (Immediately Invoked Function Expression)
    //  e.g., see https://medium.com/javascript-in-plain-english/https-medium-com-javascript-in-plain-english-stop-feeling-iffy-about-using-an-iife-7b0292aba174
    (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {var fileContent, rawCFResults, addFields, languageCode, repoCodeGuess, processOptions, displayType,






































































































      renderSummary, processedResults, _processedResults, _processedResults2;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:renderSummary = function _renderSummary(processedResults) {
                var cutoffString = '';
                // NOTE: Couldn't figure out why ?. was not allowed in the statement below
                if (rawCFResults && rawCFResults.checkedOptions && rawCFResults.checkedOptions.cutoffPriorityLevel)
                cutoffString = " Priority level ".concat(rawCFResults.checkedOptions.cutoffPriorityLevel, " or lower were not included.");
                return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/
                _react.default.createElement("p", null, "Checked ", /*#__PURE__*/_react.default.createElement("b", null, filename), " (from ", /*#__PURE__*/_react.default.createElement("i", null, username), " ", repoName, " ", /*#__PURE__*/_react.default.createElement("i", null, branchOrRelease === undefined ? 'DEFAULT' : branchOrRelease), " branch)"), /*#__PURE__*/
                _react.default.createElement("p", null, "\xA0\xA0\xA0\xA0Finished in ", /*#__PURE__*/_react.default.createElement(_RenderProcessedResults.RenderElapsedTime, { elapsedSeconds: processedResults.elapsedSeconds }), " with ", rawCFResults.noticeList.length === 0 ? 'no' : rawCFResults.noticeList.length.toLocaleString(), " notice", rawCFResults.noticeList.length === 1 ? '' : 's',
                processedResults.numIgnoredNotices || processedResults.numDisabledNotices ? ' (but ' : '',
                processedResults.numIgnoredNotices ? "".concat(processedResults.numIgnoredNotices.toLocaleString(), " ignored notice(s)") : "",
                processedResults.numIgnoredNotices && processedResults.numDisabledNotices ? ' and ' : '',
                processedResults.numDisabledNotices ? "".concat(processedResults.numDisabledNotices.toLocaleString(), " expected/disabled notice").concat(processedResults.numDisabledNotices === 1 ? '' : 's') : "",
                processedResults.numIgnoredNotices || processedResults.numDisabledNotices ? ')' : '', ".", cutoffString));


              };if (!(!props.wait || props.wait !== 'N')) {_context.next = 4;break;}setResultValue( /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement("span", { style: { color: 'blue' } }, "Waiting for user\u2026"), " (Adjust settings below as necessary and then set ", /*#__PURE__*/_react.default.createElement("b", null, "wait='N'"), " to start)"));return _context.abrupt("return");case 4:if (username) {_context.next = 7;break;}setResultValue( /*#__PURE__*/_react.default.createElement("p", { style: { color: 'red' } }, "No ", /*#__PURE__*/_react.default.createElement("b", null, "username"), " set!"));return _context.abrupt("return");case 7:if (repoName) {_context.next = 10;break;}setResultValue( /*#__PURE__*/_react.default.createElement("p", { style: { color: 'red' } }, "No ", /*#__PURE__*/_react.default.createElement("b", null, "repoName"), " set!"));return _context.abrupt("return");case 10:if (filename) {_context.next = 13;break;}setResultValue( /*#__PURE__*/_react.default.createElement("p", { style: { color: 'red' } }, "No ", /*#__PURE__*/_react.default.createElement("b", null, "filename"), " set!"));return _context.abrupt("return");case 13:if (!(props.reloadAllFilesFirst && props.reloadAllFilesFirst.slice(0).toUpperCase() === 'Y')) {_context.next = 20;break;}(0, _utilities.userLog)("Clearing cache before running file check…");setResultValue( /*#__PURE__*/_react.default.createElement("p", { style: { color: 'orange' } }, "Clearing cache before running file check\u2026"));_context.next = 18;return (0, _core.clearCaches)();case 18:_context.next = 22;break;case 20:_context.next = 22;return (0, _core.clearCheckedArticleCache)();case 22: // otherwise we wouldn't see any of the warnings again from checking these
              // Display our "waiting" message
              setResultValue( /*#__PURE__*/_react.default.createElement("p", { style: { color: 'magenta' } }, "Fetching ", /*#__PURE__*/_react.default.createElement("i", null, username), " ", repoName, " ", /*#__PURE__*/_react.default.createElement("b", null, filename), "\u2026")); // Fetch the file that we need to check (but it might already be in the cache)
              // debugLog(`FileCheck about to call cachedGetFile(${username}, ${repoName}, ${filename}, ${branch})…`);
              _context.next = 25;return (0, _core.cachedGetFile)({ username: username, repository: repoName, path: filename, branch: branchOrRelease });case 25:fileContent = _context.sent;if (fileContent) {_context.next = 31;break;} // could it be a release, not a branch???
              (0, _utilities.userLog)("Unable to fetch ".concat(filename, " from branch ").concat(branchOrRelease, ", so trying a release instead\u2026"));_context.next = 30;return (0, _core.cachedFetchFileFromServerWithTag)({ username: username, repository: repoName, path: filename, tag: branchOrRelease });case 30:fileContent = _context.sent;case 31:setResultValue( /*#__PURE__*/_react.default.createElement("p", { style: { color: 'magenta' } }, "Checking ", /*#__PURE__*/_react.default.createElement("i", null, username), " ", repoName, " ", /*#__PURE__*/_react.default.createElement("b", null, filename), "\u2026"));rawCFResults = { noticeList: [{ priority: 990, message: "Unable to load file", details: "username=".concat(username), repoName: repoName, filename: filename }], elapsedSeconds: 0 };if (!fileContent) {_context.next = 42;break;} // debugLog(`rawCFResults=${JSON.stringify(rawCFResults)}`);
              // Because we know here that we're only checking one file, we don’t need the filename field in the notices
              // WRONG: We want the filename so that the lineNumber can be made into a live link
              addFields = function addFields(notice) {notice.username = username;notice.repoName = repoName;notice.repoCode = repoCodeGuess;if (!notice.extra) notice.extra = repoCodeGuess;return notice;};languageCode = repoName.split('_')[0];repoCodeGuess = '';if (repoName === 'hbo_uhb') repoCodeGuess = 'UHB';else if (repoName === 'el-x-koine_ugnt') repoCodeGuess = 'UGNT';else if (repoName.endsWith('_twl')) repoCodeGuess = 'TWL';else if (repoName.endsWith('_tn')) repoCodeGuess = 'TN';else if (repoName.endsWith('_ta')) repoCodeGuess = 'TA';else if (repoName.endsWith('_tq')) repoCodeGuess = 'TQ';else if (repoName.endsWith('_tw')) repoCodeGuess = 'TW';else if (repoName.endsWith('_sn')) repoCodeGuess = 'SN';else if (repoName.endsWith('_sq')) repoCodeGuess = 'SQ';else if (repoName.endsWith('lt')) repoCodeGuess = 'LT';else if (repoName.endsWith('st')) repoCodeGuess = 'ST';_context.next = 40;return (0, _checkFileContents.checkFileContents)(username, languageCode, repoCodeGuess, branchOrRelease, filename, fileContent, givenLocation, checkingOptions);case 40:rawCFResults = _context.sent;rawCFResults.noticeList = rawCFResults.noticeList.map(addFields);case 42: // debugLog(`FileCheck got initial results with ${rawCFResults.successList.length} success message(s) and ${rawCFResults.noticeList.length} notice(s)`);
              // // Since we know the repoName here, add it to our notices
              // for (const thisNotice of rawCFResults.noticeList)
              //   thisNotice.repoName = repoName; // Add in this info that we know
              // Add some extra fields to our rawCFResults object in case we need this information again later
              rawCFResults.checkType = 'File';rawCFResults.username = username;rawCFResults.repoName = repoName;rawCFResults.branch = props.branch;rawCFResults.filename = filename;rawCFResults.checkingOptions = checkingOptions; // Now do our final handling of the result
              processOptions = {// Uncomment any of these to test them
                // 'maximumSimilarMessages': 4, // default is 3  -- 0 means don’t suppress
                // 'errorPriorityLevel': 800, // default is 700
                // 'cutoffPriorityLevel': 100, // default is 0
                // 'sortBy': 'ByRepo', // default is 'ByPriority', also have 'AsFound'
                // 'ignorePriorityNumberList': [123, 202], // default is []
              }; // Or this allows the parameters to be specified as a FileCheck property
              if (props.maximumSimilarMessages) processOptions.maximumSimilarMessages = (0, _core.ourParseInt)(props.maximumSimilarMessages);if (props.errorPriorityLevel) processOptions.errorPriorityLevel = (0, _core.ourParseInt)(props.errorPriorityLevel); // if (props.cutoffPriorityLevel) processOptions.cutoffPriorityLevel = ourParseInt(props.cutoffPriorityLevel);
              if (props.sortBy) processOptions.sortBy = props.sortBy; // if (props.ignorePriorityNumberList) processOptions.ignorePriorityNumberList = props.ignorePriorityNumberList;
              displayType = 'ErrorsWarnings'; // default
              if (props.displayType) displayType = props.displayType;if (displayType === 'ErrorsWarnings') {processedResults = (0, _noticeProcessingFunctions.processNoticesToErrorsWarnings)(rawCFResults, processOptions); //                 userLog(`${`FileCheck got processed results with ${processedResults.successList.length.toLocaleString()} success message(s), ${processedResults.errorList.length.toLocaleString()} error(s) and ${processedResults.warningList.length.toLocaleString()} warning(s)`}
                //   numIgnoredNotices=${processedResults.numIgnoredNotices.toLocaleString()} numHiddenErrors=${processedResults.numHiddenErrors.toLocaleString()} numHiddenWarnings=${processedResults.numHiddenWarnings.toLocaleString()}`);
                if (processedResults.errorList.length || processedResults.warningList.length) setResultValue( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, renderSummary(processedResults), /*#__PURE__*/_react.default.createElement(_RenderProcessedResults.RenderSuccessesErrorsWarnings, { results: processedResults })));else // no errors or warnings
                  setResultValue( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, renderSummary(processedResults), /*#__PURE__*/_react.default.createElement(_RenderProcessedResults.RenderSuccessesErrorsWarnings, { results: processedResults })));} else if (displayType === 'SevereMediumLow') {_processedResults = (0, _noticeProcessingFunctions.processNoticesToSevereMediumLow)(rawCFResults, processOptions); //                 userLog(`FileCheck got processed results with ${processedResults.successList.length.toLocaleString()} success message(s), ${processedResults.errorList.length.toLocaleString()} error(s) and ${processedResults.warningList.length.toLocaleString()} warning(s)
                //   numIgnoredNotices=${processedResults.numIgnoredNotices.toLocaleString()} numHiddenErrors=${processedResults.numHiddenErrors.toLocaleString()} numHiddenWarnings=${processedResults.numHiddenWarnings.toLocaleString()}`);
                if (_processedResults.severeList.length || _processedResults.mediumList.length || _processedResults.lowList.length) setResultValue( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, renderSummary(_processedResults), /*#__PURE__*/_react.default.createElement(_RenderProcessedResults.RenderSuccessesSevereMediumLow, { results: _processedResults })));else // no severe, medium, or low notices
                  setResultValue( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, renderSummary(_processedResults), /*#__PURE__*/_react.default.createElement(_RenderProcessedResults.RenderSuccessesSevereMediumLow, { results: _processedResults })));

              } else if (displayType === 'SingleList') {
                _processedResults2 = (0, _noticeProcessingFunctions.processNoticesToSingleList)(rawCFResults, processOptions);
                //       userLog(`FileCheck got processed results with ${processedResults.successList.length.toLocaleString()} success message(s) and ${processedResults.warningList.length.toLocaleString()} notice(s)
                // numIgnoredNotices=${processedResults.numIgnoredNotices.toLocaleString()} numHiddenWarnings=${processedResults.numHiddenWarnings.toLocaleString()}`);

                if (_processedResults2.warningList.length)
                setResultValue( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null,
                renderSummary(_processedResults2), /*#__PURE__*/
                _react.default.createElement(_RenderProcessedResults.RenderSuccessesNoticesGradient, { results: _processedResults2 })));else

                  // no warnings
                  setResultValue( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null,
                  renderSummary(_processedResults2), /*#__PURE__*/
                  _react.default.createElement(_RenderProcessedResults.RenderSuccessesNoticesGradient, { results: _processedResults2 })));

              } else setResultValue( /*#__PURE__*/_react.default.createElement("b", { style: { color: 'red' } }, "Invalid displayType='", displayType, "'"));case 55:case "end":return _context.stop();}}}, _callee);}))();
    // end of async part in unnamedFunction
    // Doesn’t work if we add this to next line: username,repoName,branch,checkingOptions,filename,givenLocation,props
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // end of useEffect part

  var username = props.username;
  // debugLog(`FileCheck username='${username}'`);
  if (!username) return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("b", null, "ERROR"), ": The Door43 ", /*#__PURE__*/_react.default.createElement("b", null, "username"), " must be specified");
  var repoName = props.repoName;
  // debugLog(`FileCheck repoName='${repoName}'`);
  if (!repoName) return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("b", null, "ERROR"), ": The Door43 ", /*#__PURE__*/_react.default.createElement("b", null, "repository name"), " must be specified");
  var branchOrRelease = props.branchOrRelease;
  // debugLog(`FileCheck branchOrRelease='${branchOrRelease}'`);
  if (branchOrRelease === undefined) branchOrRelease = 'master';
  var filename = props.filename;
  // debugLog(`filename='${filename}'`);
  if (!filename) return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("b", null, "ERROR"), ": The Door43 ", /*#__PURE__*/_react.default.createElement("b", null, "filename"), " must be specified");

  var givenLocation = props['location'] ? props['location'] : "";
  if (givenLocation && givenLocation[0] !== ' ') givenLocation = " ".concat(givenLocation);

  var checkingOptions = { // Uncomment any of these to test them
    // excerptLength: 25,
    suppressNoticeDisablingFlag: true // Leave this one as true (otherwise demo checks are less efficient)
  };
  // Or this allows the parameters to be specified as a FileCheck property
  if (props.excerptLength) checkingOptions.excerptLength = (0, _core.ourParseInt)(props.excerptLength);
  if (props.cutoffPriorityLevel) checkingOptions.cutoffPriorityLevel = (0, _core.ourParseInt)(props.cutoffPriorityLevel);
  if (props.disableAllLinkFetchingFlag) checkingOptions.disableAllLinkFetchingFlag = props.disableAllLinkFetchingFlag.toLowerCase() === 'true';
  if (props.disableLinkedTAArticlesCheckFlag) checkingOptions.disableLinkedTAArticlesCheckFlag = props.disableLinkedTAArticlesCheckFlag.toLowerCase() === 'true';
  if (props.disableLinkedTWArticlesCheckFlag) checkingOptions.disableLinkedTWArticlesCheckFlag = props.disableLinkedTWArticlesCheckFlag.toLowerCase() === 'true';

  // {/* <div className={classes.root}> */}
  return /*#__PURE__*/(
    _react.default.createElement("div", { className: "Fred" },
    result));


};
// end of FileCheck()

var styles = function styles(theme) {return {
    root: {} };};var _default =



(0, _styles.withStyles)(styles)(FileCheck);exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,