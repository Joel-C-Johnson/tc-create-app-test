"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _typeof = require("@babel/runtime/helpers/typeof");Object.defineProperty(exports, "__esModule", { value: true });exports.checkBookPackage = checkBookPackage;var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _react = _interopRequireDefault(require("react"));

var _defaults = require("../../core/defaults");
var books = _interopRequireWildcard(require("../../core/books/books"));
var _core = require("../../core");
var _checkFileContents = require("../file-check/checkFileContents");
var _checkRepo = require("../repo-check/checkRepo");

var _utilities = require("../../core/utilities");function _getRequireWildcardCache(nodeInterop) {if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {return nodeInterop ? cacheNodeInterop : cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj, nodeInterop) {if (!nodeInterop && obj && obj.__esModule) {return obj;}if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}function _createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {(0, _defineProperty2.default)(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}


// const BP_VALIDATOR_VERSION_STRING = '0.7.8';

var STANDARD_MANIFEST_FILENAME = 'manifest.yaml';


/*
    checkBookPackage
*/
/**
 *
 * @param {string} username, e.g., 'unfoldingWord'
 * @param {string} languageCode, e.g., 'en'
 * @param {string} bookID -- 3-character USFM book ID or 'OBS'
 * @param {Function} setResultValue function
 * @param {Object} checkingOptions -- can contain: getFile (function), originalLanguageRepoUsername, taRepoUsername, checkManifestFlag
 * @return {Object} - containing successList and noticeList
 */function
checkBookPackage(_x, _x2, _x3, _x4, _x5) {return _checkBookPackage.apply(this, arguments);}function _checkBookPackage() {_checkBookPackage = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(username, languageCode, bookID, setResultValue, checkingOptions) {var abortFlag, startTime, checkedFileCount, checkedFilenames, checkedFilenameExtensions, totalCheckedSize, checkedRepoNames, checkBookPackageResult, dataSet, newCheckingOptions, getFile_, originalBranch, generalLocation,










































    addSuccessMessage,





    addNoticePartial,

































    ourCheckBPFileContents, _ourCheckBPFileContents,


























































    ourCheckManifestFile, _ourCheckManifestFile,






























































    ourCheckMarkdownFile, _ourCheckMarkdownFile, repoCodeList, bookNumberAndName, whichTestament, origLangRepoCode, checkedManifestDetails, numCheckedRepos, _iterator, _step, repoCode, adjustedRepoCode, adjustedBranch, repoName, repoLocation, filename, crResultObject, tqResultObject, _filename, repoFileContent, details, numCheckedCharacters, _filename2, _numCheckedCharacters, _filename3, _numCheckedCharacters2;return _regenerator.default.wrap(function _callee4$(_context4) {while (1) {switch (_context4.prev = _context4.next) {case 0:_ourCheckMarkdownFile = function _ourCheckMarkdownFile3() {_ourCheckMarkdownFile = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(repoCode, repoName, repoBranch, filename, markdownLocation, checkingOptions) {var markdownFileContent, details, cmtResultObject, _iterator6, _step6, cfcNoticeEntry, fullYearString;return _regenerator.default.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:_context3.prev = 0;_context3.next = 3;return (

















                          getFile_({ username: username, repository: repoName, path: filename, branch: repoBranch }));case 3:markdownFileContent = _context3.sent;_context3.next = 18;break;case 6:_context3.prev = 6;_context3.t0 = _context3["catch"](0);



                        console.error("checkBookPackage ourCheckMarkdownFile(".concat(username, ", ").concat(languageCode, ", ").concat(bookID, ", (fn), ").concat(JSON.stringify(checkingOptions), ") failed to load markdown"), username, repoName, filename, originalBranch, _context3.t0 + '');
                        details = "username=".concat(username);_context3.next = 12;return (
                          (0, _core.repositoryExistsOnDoor43)({ username: username, repository: repoName }));case 12:if (_context3.sent) {_context3.next = 16;break;}
                        checkBookPackageResult.noticeList.push({ priority: 997, message: "Repository doesn’t exist", details: details, username: username, repoCode: repoCode, repoName: repoName, location: markdownLocation, extra: repoCode });_context3.next = 18;break;case 16:

                        // eslint-disable-next-line eqeqeq
                        if (_context3.t0 != 'TypeError: repoFileContent is null') details += " error=".concat(_context3.t0);
                        addNoticePartial({ priority: 996, message: "Unable to load", details: "username=".concat(username, " error=").concat(_context3.t0), username: username, repoName: repoName, filename: filename, location: markdownLocation, extra: repoCode });case 18:if (!


                        markdownFileContent) {_context3.next = 26;break;}_context3.next = 21;return (
                          (0, _core.checkMarkdownText)(languageCode, repoCode, filename.substring(0, filename.length - 3), markdownFileContent, markdownLocation, checkingOptions));case 21:cmtResultObject = _context3.sent;
                        // debugLog(`ourCheckMarkdownFile checkMarkdownText(${repoName}) returned ${cmtResultObject.successList.length} success message(s) and ${cmtResultObject.noticeList.length} notice(s)`);
                        // debugLog(`ourCheckMarkdownFile checkMarkdownText(${repoName}) returned ${JSON.stringify(cmtResultObject)}`);
                        // NOTE: We ignore the returned success messages here
                        // for (const successEntry of cfResultObject.successList) userLog("  ourCheckBPFileContents:", successEntry);
                        // debugLog("cfcResultObject", JSON.stringify(cfcResultObject));

                        // Process noticeList line by line,  appending the repoCode as an extra field as we go
                        _iterator6 = _createForOfIteratorHelper(cmtResultObject.noticeList);try {for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {cfcNoticeEntry = _step6.value;
                            // NOTE: We don’t use addNoticePartial, because it adds a misleading BookID
                            // addNoticePartial({ ...cfcNoticeEntry, filename, extra: `${repoCode} markdown` });
                            checkBookPackageResult.noticeList.push(_objectSpread(_objectSpread({}, cfcNoticeEntry), {}, { username: username, repoCode: repoCode, repoName: repoName, filename: filename, extra: repoCode }));
                          }} catch (err) {_iterator6.e(err);} finally {_iterator6.f();}

                        if (filename === 'LICENSE.md') {
                          fullYearString = "".concat(new Date().getFullYear());
                          // debugLog(`Year ${fullYearString} is ${typeof fullYearString}`);
                          if (markdownFileContent.indexOf(fullYearString) === -1) // Can't find this year string in file
                            // NOTE: We don’t use addNoticePartial, because it adds a misleading BookID
                            checkBookPackageResult.noticeList.push({ priority: 256, message: "Possibly missing current copyright year", details: "possibly expecting '".concat(fullYearString, "'"), username: username, repoName: repoName, filename: filename, location: markdownLocation, extra: repoCode });
                        }return _context3.abrupt("return",

                        markdownFileContent.length);case 26:

                        // NOTE: We don’t use addNoticePartial, because it adds a misleading BookID
                        // addNoticePartial({ priority: 956, message: "Got empty markdown file", repoName, filename, location: markdownLocation, extra: `${repoCode} markdown` });
                        checkBookPackageResult.noticeList.push({ priority: 956, message: "Got empty markdown file", repoName: repoName, filename: filename, location: markdownLocation, extra: repoCode });return _context3.abrupt("return",
                        0);case 28:case "end":return _context3.stop();}}}, _callee3, null, [[0, 6]]);}));return _ourCheckMarkdownFile.apply(this, arguments);};ourCheckMarkdownFile = function _ourCheckMarkdownFile2(_x25, _x26, _x27, _x28, _x29, _x30) {return _ourCheckMarkdownFile.apply(this, arguments);};_ourCheckManifestFile = function _ourCheckManifestFile3() {_ourCheckManifestFile = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(repoCode, repoName, repoBranch, manifestLocation, checkingOptions) {var manifestFileContent, details, cmtResultObject, _iterator5, _step5, cfcNoticeEntry;return _regenerator.default.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:_context2.prev = 0;_context2.next = 3;return getFile_({ username: username, repository: repoName, path: STANDARD_MANIFEST_FILENAME, branch: repoBranch });case 3:manifestFileContent = _context2.sent;_context2.next = 18;break;case 6:_context2.prev = 6;_context2.t0 = _context2["catch"](0);console.error("checkBookPackage ourCheckManifestFile(".concat(username, ", ").concat(languageCode, ", ").concat(bookID, ", (fn), ").concat(JSON.stringify(checkingOptions), ") failed to load manifest"), username, repoName, repoBranch, _context2.t0 + '');details = "username=".concat(username);_context2.next = 12;return (0, _core.repositoryExistsOnDoor43)({ username: username, repository: repoName });case 12:if (_context2.sent) {_context2.next = 16;break;}checkBookPackageResult.noticeList.push({ priority: 997, message: "Repository doesn’t exist", details: details, username: username, repoCode: repoCode, repoName: repoName, location: manifestLocation, extra: repoCode });_context2.next = 18;break;case 16: // eslint-disable-next-line eqeqeq
                        if (_context2.t0 != 'TypeError: repoFileContent is null') details += " error=".concat(_context2.t0);addNoticePartial({ priority: 996, message: "Unable to load", details: "username=".concat(username, " error=").concat(_context2.t0), repoName: repoName, filename: STANDARD_MANIFEST_FILENAME, location: manifestLocation, extra: repoCode });case 18:if (!manifestFileContent) {_context2.next = 25;break;}_context2.next = 21;return (0, _core.checkManifestText)(languageCode, repoCode, username, repoName, repoBranch, manifestFileContent, manifestLocation, checkingOptions);case 21:cmtResultObject = _context2.sent; // debugLog(`ourCheckManifestFile checkManifestText(${repoName}) returned ${cmtResultObject.successList.length} success message(s) and ${cmtResultObject.noticeList.length} notice(s)`);
                        // debugLog(`ourCheckManifestFile checkManifestText(${repoName}) returned ${JSON.stringify(cmtResultObject)}`);
                        // NOTE: We ignore the returned success messages here
                        // for (const successEntry of cfResultObject.successList) userLog("  ourCheckBPFileContents:", successEntry);
                        // debugLog("cfcResultObject", JSON.stringify(cfcResultObject));
                        // Process noticeList line by line,  appending the repoCode as an extra field as we go
                        _iterator5 = _createForOfIteratorHelper(cmtResultObject.noticeList);try {for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {cfcNoticeEntry = _step5.value; // NOTE: We don’t use addNoticePartial, because it adds a misleading BookID
                            // addNoticePartial({ ...cfcNoticeEntry, filename: STANDARD_MANIFEST_FILENAME, extra: `${repoCode} MANIFEST` });
                            checkBookPackageResult.noticeList.push(_objectSpread(_objectSpread({}, cfcNoticeEntry), {}, { username: username, repoCode: repoCode, repoName: repoName, filename: STANDARD_MANIFEST_FILENAME, extra: "".concat(repoCode, " MANIFEST") }));}} catch (err) {_iterator5.e(err);} finally {_iterator5.f();}return _context2.abrupt("return", manifestFileContent.length);case 25: // NOTE: We don’t use addNoticePartial, because it adds a misleading BookID
                        // addNoticePartial({ priority: 956, message: "Got empty manifest file", repoName, filename: STANDARD_MANIFEST_FILENAME, location: manifestLocation, extra: `${repoCode} MANIFEST` });
                        checkBookPackageResult.noticeList.push({ priority: 956, message: "Got empty manifest file", repoName: repoName, filename: STANDARD_MANIFEST_FILENAME, location: manifestLocation, extra: "".concat(repoCode, " MANIFEST") });return _context2.abrupt("return", 0);case 27:case "end":return _context2.stop();}}}, _callee2, null, [[0, 6]]);}));return _ourCheckManifestFile.apply(this, arguments);};ourCheckManifestFile = function _ourCheckManifestFile2(_x20, _x21, _x22, _x23, _x24) {return _ourCheckManifestFile.apply(this, arguments);};_ourCheckBPFileContents = function _ourCheckBPFileConten2() {_ourCheckBPFileContents = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(repoCode, repoName, repoBranch, cfFilename, fileContent, fileLocation, checkingOptions) {var adjustedLanguageCode, cfcResultObject, _iterator2, _step2, cfcNoticeEntry, _iterator3, _step3, checkedRepoName, _iterator4, _step4, checkedFilenameExtension;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0: // functionLog(`checkBookPackage ourCheckBPFileContents(rC='${repoCode}', rN='${repoName}', rBr='${repoBranch}', fn='${cfFilename}', ${fileContent.length}, ${fileLocation}, ${JSON.stringify(checkingOptions)})…`);
                        // Updates the global list of notices
                        //parameterAssert(repoCode !== undefined, "cBP ourCheckBPFileContents: 'repoCode' parameter should be defined");
                        //parameterAssert(typeof repoCode === 'string', `cBP ourCheckBPFileContents: 'repoCode' parameter should be a string not a '${typeof repoCode}'`);
                        //parameterAssert(REPO_CODES_LIST.includes(repoCode), `cBP ourCheckBPFileContents: 'repoCode' parameter should not be '${repoCode}'`);
                        //parameterAssert(repoName !== undefined, "cBP ourCheckBPFileContents: 'repoName' parameter should be defined");
                        //parameterAssert(typeof repoName === 'string', `cBP ourCheckBPFileContents: 'repoName' parameter should be a string not a '${typeof repoName}': ${repoName}`);
                        //parameterAssert(repoBranch !== undefined, "cBP ourCheckBPFileContents: 'repoBranch' parameter should be defined");
                        //parameterAssert(typeof repoBranch === 'string', `cBP ourCheckBPFileContents: 'repoBranch' parameter should be a string not a '${typeof repoBranch}': ${repoBranch}`);
                        //parameterAssert(cfFilename !== undefined, "cBP ourCheckBPFileContents: 'cfFilename' parameter should be defined");
                        //parameterAssert(typeof cfFilename === 'string', `cBP ourCheckBPFileContents: 'cfFilename' parameter should be a string not a '${typeof cfFilename}'`);
                        //parameterAssert(fileContent !== undefined, "cBP ourCheckBPFileContents: 'fileContent' parameter should be defined");
                        //parameterAssert(typeof fileContent === 'string', `cBP ourCheckBPFileContents: 'fileContent' parameter should be a string not a '${typeof fileContent}'`);
                        //parameterAssert(fileLocation !== undefined, "cBP ourCheckBPFileContents: 'fileLocation' parameter should be defined");
                        //parameterAssert(typeof fileLocation === 'string', `cBP ourCheckBPFileContents: 'fileLocation' parameter should be a string not a '${typeof fileLocation}'`);
                        //parameterAssert(checkingOptions !== undefined, "cBP ourCheckBPFileContents: 'checkingOptions' parameter should be defined");
                        adjustedLanguageCode = languageCode; // if (repoCode === 'UHB') adjustedLanguageCode = 'hbo'; // NO -- we need the languageCode of the BP being checked (so we can resolve TW links with * for language) !!!
                        // else if (repoCode === 'UGNT') adjustedLanguageCode = 'el-x-koine';
                        _context.next = 3;return (0, _checkFileContents.checkFileContents)(username, adjustedLanguageCode, repoCode, repoBranch, cfFilename, fileContent, fileLocation, checkingOptions);case 3:cfcResultObject = _context.sent; // debugLog("checkFileContents() returned", cfResultObject.successList.length, "success message(s) and", cfResultObject.noticeList.length, "notice(s)");
                        // for (const successEntry of cfResultObject.successList) userLog("  ourCheckBPFileContents:", successEntry);
                        // debugLog("cfcResultObject", JSON.stringify(cfcResultObject));
                        // Process noticeList line by line,  appending the repoCode as an extra field as we go
                        _iterator2 = _createForOfIteratorHelper(cfcResultObject.noticeList);try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {cfcNoticeEntry = _step2.value; // noticeEntry is an object
                            if (cfcNoticeEntry.extra) // it must be an indirect check on a TA or TW article from a TN2 check
                              checkBookPackageResult.noticeList.push(cfcNoticeEntry); // Just copy the complete notice as is
                            else // For our direct checks, we add the repoCode as an extra value (unless it’s already there from a TA or TW check)
                              addNoticePartial(_objectSpread(_objectSpread({}, cfcNoticeEntry), {}, { repoCode: repoCode, repoName: repoName, branch: repoBranch, filename: cfFilename, extra: cfcNoticeEntry.extra ? cfcNoticeEntry.extra : repoCode }));} // The following is needed coz we might be checking the linked TA and/or TW articles from TN2 TSV files
                        } catch (err) {_iterator2.e(err);} finally {_iterator2.f();}if (cfcResultObject.checkedFileCount && cfcResultObject.checkedFileCount > 0) {checkedFileCount += cfcResultObject.checkedFileCount;addSuccessMessage("Checked ".concat(cfcResultObject.checkedFileCount, " linked TA/TW articles"));}if (cfcResultObject.checkedFilesizes && cfcResultObject.checkedFilesizes > 0) totalCheckedSize += cfcResultObject.checkedFilesizes;if (cfcResultObject.checkedRepoNames && cfcResultObject.checkedRepoNames.length > 0) {_iterator3 = _createForOfIteratorHelper(cfcResultObject.checkedRepoNames);try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {checkedRepoName = _step3.value; // try { if (checkedRepoNames.indexOf(checkedRepoName) < 0) checkedRepoNames.push(checkedRepoName); }
                              // catch { checkedRepoNames = [checkedRepoName]; }
                              checkedRepoNames.add(checkedRepoName);}} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}}if (cfcResultObject.checkedFilenameExtensions && cfcResultObject.checkedFilenameExtensions.length > 0) {_iterator4 = _createForOfIteratorHelper(cfcResultObject.checkedFilenameExtensions);try {for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {checkedFilenameExtension = _step4.value;checkedFilenameExtensions.add(checkedFilenameExtension);}} catch (err) {_iterator4.e(err);} finally {_iterator4.f();}}case 10:case "end":return _context.stop();}}}, _callee);}));return _ourCheckBPFileContents.apply(this, arguments);};ourCheckBPFileContents = function _ourCheckBPFileConten(_x13, _x14, _x15, _x16, _x17, _x18, _x19) {return _ourCheckBPFileContents.apply(this, arguments);};addNoticePartial = function _addNoticePartial(noticeObject) {// bookID is a three-character UPPERCASE USFM book identifier or 'OBS'.
              // functionLog(`checkBookPackage addNoticePartial: (priority=${noticeObject.priority}) ${noticeObject.bookID} ${noticeObject.C}:${noticeObject.V} ${noticeObject.message}${noticeObject.characterIndex > 0 ? ` (at character ${noticeObject.characterIndex})` : ""}${excerpt ? ` ${excerpt}` : ""}${location}`);
              //parameterAssert(noticeObject.priority !== undefined, "cBP addNoticePartial: 'priority' parameter should be defined");
              //parameterAssert(typeof noticeObject.priority === 'number', `cBP addNoticePartial: 'priority' parameter should be a number not a '${typeof noticeObject.priority}': ${noticeObject.priority}`);
              //parameterAssert(noticeObject.message !== undefined, "cBP addNoticePartial: 'message' parameter should be defined");
              //parameterAssert(typeof noticeObject.message === 'string', `cBP addNoticePartial: 'message' parameter should be a string not a '${typeof noticeObject.message}': ${noticeObject.message}`);
              // //parameterAssert(bookID !== undefined, "cBP addNoticePartial: 'bookID' parameter should be defined");
              if (noticeObject.bookID) {//parameterAssert(typeof noticeObject.bookID === 'string', `cBP addNoticePartial: 'bookID' parameter should be a string not a '${typeof noticeObject.bookID}': ${noticeObject.bookID}`);
                //parameterAssert(noticeObject.bookID.length === 3, `cBP addNoticePartial: 'bookID' parameter should be three characters long not ${noticeObject.bookID.length}`);
                //parameterAssert(bookID === 'OBS' || books.isValidBookID(noticeObject.bookID), `cBP addNoticePartial: '${noticeObject.bookID}' is not a valid USFM book identifier`);
              } // //parameterAssert(C !== undefined, "cBP addNoticePartial: 'C' parameter should be defined");
              if (noticeObject.C) {//parameterAssert(typeof noticeObject.C === 'string', `cBP addNoticePartial: 'C' parameter should be a string not a '${typeof noticeObject.C}': ${noticeObject.C}`);
              } // //parameterAssert(V !== undefined, "cBP addNoticePartial: 'V' parameter should be defined");
              if (noticeObject.V) {//parameterAssert(typeof noticeObject.V === 'string', `cBP addNoticePartial: 'V' parameter should be a string not a '${typeof noticeObject.V}': ${noticeObject.V}`);
              } // //parameterAssert(characterIndex !== undefined, "cBP addNoticePartial: 'characterIndex' parameter should be defined");
              if (noticeObject.characterIndex) {//parameterAssert(typeof noticeObject.characterIndex === 'number', `cBP addNoticePartial: 'characterIndex' parameter should be a number not a '${typeof noticeObject.characterIndex}': ${noticeObject.characterIndex}`);
              } // //parameterAssert(excerpt !== undefined, "cBP addNoticePartial: 'excerpt' parameter should be defined");
              if (noticeObject.excerpt) {//parameterAssert(typeof noticeObject.excerpt === 'string', `cBP addNoticePartial: 'excerpt' parameter should be a string not a '${typeof noticeObject.excerpt}': ${noticeObject.excerpt}`);
              } //parameterAssert(noticeObject.location !== undefined, "cBP addNoticePartial: 'location' parameter should be defined");
              //parameterAssert(typeof noticeObject.location === 'string', `cBP addNoticePartial: 'location' parameter should be a string not a '${typeof noticeObject.location}': ${noticeObject.location}`);
              //parameterAssert(noticeObject.extra !== undefined, "cBP addNoticePartial: 'extra' parameter should be defined");
              //parameterAssert(typeof noticeObject.extra === 'string', `cBP addNoticePartial: 'extra' parameter should be a string not a '${typeof noticeObject.extra}': ${noticeObject.extra}`);
              if (noticeObject.debugChain) noticeObject.debugChain = "checkBookPackage ".concat(noticeObject.debugChain);checkBookPackageResult.noticeList.push(_objectSpread(_objectSpread({}, noticeObject), {}, { bookID: bookID, username: username }));};addSuccessMessage = function _addSuccessMessage(successString) {// functionLog(`checkBookPackage success: ${successString}`);
              checkBookPackageResult.successList.push(successString);}; /*
            Note: You may want to run clearCaches() and/or preloadReposIfNecessary() before running this function???
             Note that bookID here can also be the 'OBS' pseudo bookID.
            */ // functionLog(`checkBookPackage(un='${username}', lC='${languageCode}', bk='${bookID}', (fn), ${JSON.stringify(checkingOptions)})…`)
            //parameterAssert(username !== undefined, "checkBookPackage: 'username' parameter should be defined");
            //parameterAssert(typeof username === 'string', `checkBookPackage: 'username' parameter should be a string not a '${typeof username}': ${username}`);
            //parameterAssert(languageCode !== undefined, "checkBookPackage: 'languageCode' parameter should be defined");
            //parameterAssert(typeof languageCode === 'string', `checkBookPackage: 'languageCode' parameter should be a string not a '${typeof languageCode}': ${languageCode}`);
            //parameterAssert(bookID !== undefined, "checkBookPackage: 'bookID' parameter should be defined");
            //parameterAssert(typeof bookID === 'string', `checkBookPackage: 'bookID' parameter should be a string not a '${typeof bookID}': ${bookID}`);
            //parameterAssert(bookID.length === 3, `checkBookPackage: 'bookID' parameter should be three characters long not ${bookID.length}`);
            //parameterAssert(bookID.toUpperCase() === bookID, `checkBookPackage: 'bookID' parameter should be UPPERCASE not '${bookID}'`);
            //parameterAssert(bookID === 'OBS' || books.isValidBookID(bookID), `checkBookPackage: '${bookID}' is not a valid USFM book identifier`);
            abortFlag = false;startTime = new Date();bookID = bookID.toUpperCase(); // normalise to USFM standard
            checkedFileCount = 0, checkedFilenames = [], checkedFilenameExtensions = new Set(), totalCheckedSize = 0, checkedRepoNames = new Set();checkBookPackageResult = { successList: [], noticeList: [] };dataSet = checkingOptions === null || checkingOptions === void 0 ? void 0 : checkingOptions.dataSet; // Can be 'DEFAULT', 'OLD' (Markdown, etc.), 'NEW' (TSV only), or 'BOTH'
            if (!dataSet) dataSet = 'DEFAULT';newCheckingOptions = checkingOptions ? _objectSpread({}, checkingOptions) : {}; // clone before modify
            getFile_ = newCheckingOptions.getFile ? newCheckingOptions.getFile : _core.cachedGetFile; // default to using caching of files
            newCheckingOptions.getFile = getFile_; // use same getFile_ when we call core functions
            if (!newCheckingOptions.originalLanguageRepoUsername) newCheckingOptions.originalLanguageRepoUsername = username;if (!newCheckingOptions.taRepoUsername) newCheckingOptions.taRepoUsername = username;if (!newCheckingOptions.twRepoUsername) newCheckingOptions.twRepoUsername = username; // No point in passing the branch through as a parameter
            //  coz if it’s not 'master', it’s unlikely to be common for all the repos
            originalBranch = 'master'; // If it's a big book, drop this location string to reduce memory use in case of thousands of errors
            generalLocation = bookID === 'OBS' ? " in ".concat(languageCode, " ").concat(bookID, " from ").concat(username, " ").concat(originalBranch, " branch") : books.chaptersInBook(bookID) > 10 ? '' : " in ".concat(languageCode, " ").concat(bookID, " book package from ").concat(username, " ").concat(originalBranch, " branch");if (!(bookID === 'OBS')) {_context4.next = 27;break;} // NOTE: No code below to handle OBS TN and TQ which are markdown repos
            if (dataSet === 'DEFAULT') repoCodeList = ['OBS', 'OBS-TWL', 'OBS-TN2', 'OBS-TQ2', 'OBS-SN2', 'OBS-SQ2'];else if (dataSet === 'OLD') repoCodeList = ['OBS', 'OBS-TN', 'OBS-TQ', 'OBS-SN', 'OBS-SQ'];else if (dataSet === 'NEW') repoCodeList = ['OBS', 'OBS-TWL', 'OBS-TN2', 'OBS-TQ2', 'OBS-SN2', 'OBS-SQ2'];else if (dataSet === 'BOTH') repoCodeList = ['OBS', 'OBS-TWL', 'OBS-TN', 'OBS-TN2', 'OBS-TQ', 'OBS-TQ2', 'OBS-SN', 'OBS-SN', 'OBS-SN2', 'OBS-SQ2'];_context4.next = 42;break;case 27:_context4.prev = 27;bookNumberAndName = books.usfmNumberName(bookID);whichTestament = books.testament(bookID); // returns 'old' or 'new'
            _context4.next = 40;break;case 32:_context4.prev = 32;_context4.t0 = _context4["catch"](27);if (!books.isValidBookID(bookID)) {_context4.next = 38;break;} // must be in FRT, BAK, etc.
            whichTestament = 'other';_context4.next = 40;break;case 38:addNoticePartial({ priority: 902, message: "Bad function call: should be given a valid book abbreviation", excerpt: bookID, location: " (not '".concat(bookID, "')").concat(generalLocation) });return _context4.abrupt("return", checkBookPackageResult);case 40: // debugLog(`checkBookPackage: bookNumberAndName='${bookNumberAndName}' (${whichTestament} testament)`);
            // So now we want to work through checking this one specified Bible book in various repos
            origLangRepoCode = whichTestament === 'old' ? 'UHB' : 'UGNT';if (dataSet === 'DEFAULT') repoCodeList = languageCode === 'en' ? [origLangRepoCode, 'TWL', 'LT', 'ST', 'TN', 'TQ', 'SN', 'SQ'] : [origLangRepoCode, 'LT', 'ST', 'TN', 'TQ'];else if (dataSet === 'OLD') repoCodeList = languageCode === 'en' ? [origLangRepoCode, 'TWL', 'LT', 'ST', 'TN', 'TQ'] : [origLangRepoCode, 'LT', 'ST', 'TN', 'TQ'];else if (dataSet === 'NEW') repoCodeList = languageCode === 'en' ? [origLangRepoCode, 'TWL', 'LT', 'ST', 'TN2', 'TQ2', 'SN', 'SQ'] : [origLangRepoCode, 'LT', 'ST', 'TN', 'TQ'];else if (dataSet === 'BOTH') repoCodeList = languageCode === 'en' ? [origLangRepoCode, 'TWL', 'LT', 'ST', 'TN2', 'TN', 'TQ2', 'TQ', 'SN', 'SQ'] : [origLangRepoCode, 'LT', 'ST', 'TN', 'TQ'];case 42: // Main loop for checkBookPackage()
            checkedManifestDetails = [];numCheckedRepos = 0;_iterator = _createForOfIteratorHelper(repoCodeList);_context4.prev = 45;_iterator.s();case 47:if ((_step = _iterator.n()).done) {_context4.next = 156;break;}repoCode = _step.value;if (!abortFlag) {_context4.next = 51;break;}return _context4.abrupt("break", 156);case 51:adjustedRepoCode = repoCode, adjustedBranch = originalBranch;if (adjustedRepoCode.endsWith('2')) {adjustedRepoCode = adjustedRepoCode.substring(0, adjustedRepoCode.length - 1); // Remove the '2' from the end
              adjustedBranch = 'newFormat';generalLocation = generalLocation.replace(originalBranch, adjustedBranch);} else // doesn't end with 2
              generalLocation = generalLocation.replace(adjustedBranch, originalBranch);repoName = (0, _core.formRepoName)(languageCode, adjustedRepoCode);repoLocation = " in ".concat(repoCode).concat(generalLocation);if (adjustedRepoCode.startsWith('OBS-')) adjustedRepoCode = adjustedRepoCode.substring(4); // Remove the 'OBS-' from the beginning
            // if (bookID === 'OBS' && dataSet === 'OLD' && repoCode !== 'OBS' && repoCode !== 'TWL' && repoName === `${languageCode}_${adjustedRepoCode.toLowerCase()}`)
            //   repoName = `${languageCode}_obs-${adjustedRepoCode.toLowerCase()}`;
            (0, _utilities.userLog)("checkBookPackage: check ".concat(languageCode, " ").concat(bookID, " in ").concat(repoCode, " (").concat(adjustedRepoCode, ") from ").concat(username, " ").concat(repoName, " ").concat(adjustedBranch, "\u2026")); // Update our "waiting" message
            setResultValue( /*#__PURE__*/_react.default.createElement("p", { style: { color: 'magenta' } }, "Checking ", /*#__PURE__*/_react.default.createElement("i", null, username), " ", languageCode, " ", /*#__PURE__*/_react.default.createElement("b", null, bookID), " book package in ", /*#__PURE__*/_react.default.createElement("b", null, repoCode), " (checked ", /*#__PURE__*/_react.default.createElement("b", null, numCheckedRepos), "/", repoCodeList.length, " repos)\u2026"));filename = void 0;if (!(repoCode === 'UHB' || repoCode === 'UGNT' || repoCode === 'LT' || repoCode === 'ST')) {_context4.next = 63;break;} // TODO: Might we need specific releases/tags for some of these (e.g., from the TN2 manifest)???
            // TODO: Do we need to hard-code where to find the UHB and UGNT???
            filename = "".concat(bookNumberAndName, ".usfm");_context4.next = 83;break;case 63:if (!(adjustedRepoCode === 'TWL' || repoCode.endsWith('TN2') || repoCode.endsWith('TQ2'))) {_context4.next = 67;break;}filename = "".concat(adjustedRepoCode.toLowerCase(), "_").concat(bookID, ".tsv");_context4.next = 83;break;case 67:if (!(adjustedRepoCode === 'SN' || adjustedRepoCode === 'SQ')) {_context4.next = 71;break;}filename = "".concat(adjustedRepoCode.toLowerCase(), "_").concat(bookID, ".tsv");_context4.next = 83;break;case 71:if (!(adjustedRepoCode === 'TN' && !repoCode.startsWith('OBS-'))) {_context4.next = 83;break;}_context4.prev = 72;_context4.next = 75;return (0, _core.cachedGetBookFilenameFromManifest)({ username: username, repository: repoName, branch: originalBranch, bookID: bookID.toLowerCase() });case 75:filename = _context4.sent;(0, _utilities.logicAssert)(filename.startsWith("".concat(languageCode, "_")), "Expected TN filename '".concat(filename, "' to start with the language code '").concat(languageCode, "_'"));_context4.next = 82;break;case 79:_context4.prev = 79;_context4.t1 = _context4["catch"](72); // console.error(`cachedGetBookFilenameFromManifest failed with: ${e}`);
            filename = "".concat(languageCode, "_tn_").concat(bookNumberAndName, ".tsv"); // Take a guess
          case 82:(0, _utilities.logicAssert)(filename.endsWith('.tsv'), "Expected TN filename '".concat(filename, "' to end with '.tsv'"));case 83:if (!(repoCode === 'OBS')) {_context4.next = 93;break;}_context4.next = 86;return (0, _checkRepo.checkRepo)(username, "".concat(languageCode, "_obs"), originalBranch, generalLocation, setResultValue, newCheckingOptions);case 86:crResultObject = _context4.sent; // Adds the notices to checkBookPackageResult
            // debugLog(`checkRepo('OBS') returned ${crResultObject.successList.length} success message(s) and ${crResultObject.noticeList.length} notice(s)`);
            // debugLog(`crResultObject keys: ${JSON.stringify(Object.keys(crResultObject))}`);
            // debugLog(`crResultObject checkedRepoNames: ${crResultObject.checkedRepoNames}`);
            checkBookPackageResult.successList = checkBookPackageResult.successList.concat(crResultObject.successList);checkBookPackageResult.noticeList = checkBookPackageResult.noticeList.concat(crResultObject.noticeList);if (crResultObject.checkedFileCount > 0) {checkedFilenames = checkedFilenames.concat(crResultObject.checkedFilenames);checkedFilenameExtensions = new Set([].concat((0, _toConsumableArray2.default)(checkedFilenameExtensions), (0, _toConsumableArray2.default)(crResultObject.checkedFilenameExtensions)));checkedFileCount += crResultObject.checkedFileCount;totalCheckedSize += crResultObject.totalCheckedSize;
              checkedRepoNames.add(repoName);
            }
            addSuccessMessage("Checked ".concat(languageCode, " OBS repo from ").concat(username));_context4.next = 133;break;case 93:if (!(
            repoCode === 'TQ' || repoCode === 'OBS-TN' || repoCode === 'OBS-TQ')) {_context4.next = 102;break;}_context4.next = 96;return (

              checkTQMarkdownBook(username, languageCode, repoCode, repoName, originalBranch, bookID, newCheckingOptions));case 96:tqResultObject = _context4.sent;
            checkBookPackageResult.successList = checkBookPackageResult.successList.concat(tqResultObject.successList);
            checkBookPackageResult.noticeList = checkBookPackageResult.noticeList.concat(tqResultObject.noticeList);
            if (tqResultObject.checkedFileCount > 0) {
              checkedFilenames = checkedFilenames.concat(tqResultObject.checkedFilenames);
              checkedFilenameExtensions = new Set([].concat((0, _toConsumableArray2.default)(checkedFilenameExtensions), (0, _toConsumableArray2.default)(tqResultObject.checkedFilenameExtensions)));
              checkedFileCount += tqResultObject.checkedFileCount;
              totalCheckedSize += tqResultObject.totalCheckedSize;
              checkedRepoNames.add(repoName);
            }_context4.next = 133;break;case 102:
            // For repos other than OBS and TQ, we only have one file to check
            (0, _utilities.logicAssert)((_filename = filename) === null || _filename === void 0 ? void 0 : _filename.length, "filename should be set by now for un=".concat(username, " rC=").concat(repoCode, " aRC=").concat(adjustedRepoCode, " rN=").concat(repoName, " aBr=").concat(adjustedBranch));
            repoFileContent = void 0;_context4.prev = 104;_context4.next = 107;return (


              getFile_({ username: username, repository: repoName, path: filename, branch: adjustedBranch }));case 107:repoFileContent = _context4.sent;
            // debugLog(`checkBookPackage fetched fileContent for ${username}, ${repoName}, ${adjustedBranch}, ${filename}, ${typeof repoFileContent}, ${repoFileContent.length}`);
            checkedFilenames.push(filename);
            totalCheckedSize += repoFileContent.length;
            checkedRepoNames.add(repoName);_context4.next = 127;break;case 113:_context4.prev = 113;_context4.t2 = _context4["catch"](104);

            // debugLog(`checkBookPackage(${username}, ${languageCode}, ${bookID}, (fn), ${JSON.stringify(checkingOptions)}) failed to load ${repoName}, ${filename}, ${adjustedBranch}, ${cBPgfError}`);
            // debugLog(`cBPgfError=${cBPgfError} or ${JSON.stringify(cBPgfError)} or2 ${cBPgfError === 'TypeError: repoFileContent is null'} or3 ${cBPgfError.message === 'TypeError: repoFileContent is null'} or4 ${cBPgfError.message === 'TypeError: repoFileContent is null'}`);
            details = "username=".concat(username);
            // Next line has special code to handle book-package-check.test.js tests [so we don't call repositoryExistsOnDoor43()]
            _context4.t3 = (_context4.t2 + '').startsWith('Tests could not find');if (_context4.t3) {_context4.next = 121;break;}_context4.next = 120;return (0, _core.repositoryExistsOnDoor43)({ username: username, repository: repoName });case 120:_context4.t3 = !_context4.sent;case 121:if (!_context4.t3) {_context4.next = 125;break;}
            checkBookPackageResult.noticeList.push({ priority: 997, message: "Repository doesn’t exist", details: details, username: username, repoCode: repoCode, repoName: repoName, location: repoLocation, extra: repoCode });_context4.next = 127;break;case 125:

            // eslint-disable-next-line eqeqeq
            if (_context4.t2 != 'TypeError: repoFileContent is null') details += " error=".concat(_context4.t2);
            addNoticePartial({ priority: repoCode === 'SN' || repoCode === 'SQ' ? 196 : 996, message: "Unable to load", details: details, repoCode: repoCode, repoName: repoName, filename: filename, location: repoLocation, extra: repoCode });case 127:if (!


            repoFileContent) {_context4.next = 133;break;}_context4.next = 130;return (


              ourCheckBPFileContents(repoCode, repoName, adjustedBranch, filename, repoFileContent, generalLocation, newCheckingOptions));case 130: // Adds the notices to checkBookPackageResult
            checkedFileCount += 1;
            checkedFilenameExtensions.add(filename.split('.').pop());
            addSuccessMessage("Checked ".concat(repoCode.toUpperCase(), " file: ").concat(filename));case 133:if (



            newCheckingOptions !== null && newCheckingOptions !== void 0 && newCheckingOptions.disableAllLinkFetchingFlag) {_context4.next = 153;break;}if (


            checkedManifestDetails.includes(repoName)) {_context4.next = 153;break;} // Don’t want to check more than once
            checkedManifestDetails.push(repoName); // Remember that we checked this one
            // debugLog(`Maybe checking MANIFEST etc. for ${repoName}`);
            if (!(
            newCheckingOptions !== null && newCheckingOptions !== void 0 && newCheckingOptions.checkManifestFlag)) {_context4.next = 141;break;}_context4.next = 139;return (

              ourCheckManifestFile(repoCode, repoName, adjustedBranch, generalLocation, newCheckingOptions));case 139:numCheckedCharacters = _context4.sent;
            if (numCheckedCharacters > 0) {
              checkedFileCount += 1;
              checkedFilenames.push('manifest.yaml');
              checkedFilenameExtensions.add('yaml');
              totalCheckedSize += numCheckedCharacters;
              addSuccessMessage("Checked ".concat(repoName, " manifest file"));
            }case 141:if (!(




            newCheckingOptions !== null && newCheckingOptions !== void 0 && newCheckingOptions.checkReadmeFlag)) {_context4.next = 147;break;}
            // debugLog(`checkBookPackage: checking README for ${repoName}`);
            _filename2 = 'README.md';_context4.next = 145;return (
              ourCheckMarkdownFile(repoCode, repoName, adjustedBranch, _filename2, generalLocation, newCheckingOptions));case 145:_numCheckedCharacters = _context4.sent;
            if (_numCheckedCharacters > 0) {
              checkedFileCount += 1;
              checkedFilenames.push(_filename2);
              checkedFilenameExtensions.add('md');
              totalCheckedSize += _numCheckedCharacters;
              addSuccessMessage("Checked ".concat(repoName, " README file"));
            }case 147:if (!(




            newCheckingOptions !== null && newCheckingOptions !== void 0 && newCheckingOptions.checkLicenseFlag)) {_context4.next = 153;break;}
            // debugLog(`Checking LICENSE for ${repoName}`);
            _filename3 = 'LICENSE.md';_context4.next = 151;return (
              ourCheckMarkdownFile(repoCode, repoName, adjustedBranch, _filename3, generalLocation, newCheckingOptions));case 151:_numCheckedCharacters2 = _context4.sent;
            if (_numCheckedCharacters2 > 0) {
              checkedFileCount += 1;
              checkedFilenames.push(_filename3);
              checkedFilenameExtensions.add('md');
              totalCheckedSize += _numCheckedCharacters2;
              addSuccessMessage("Checked ".concat(repoName, " LICENSE file"));
            }case 153:




            // end of linkFetching not disabled
            // else debugLog(`NOT fetching MANIFEST, etc. for ${repoName}`);

            numCheckedRepos += 1;
            // debugLog(`At end of loop having checked ${numCheckedRepos} repos`);
          case 154:_context4.next = 47;break;case 156:_context4.next = 161;break;case 158:_context4.prev = 158;_context4.t4 = _context4["catch"](45);_iterator.e(_context4.t4);case 161:_context4.prev = 161;_iterator.f();return _context4.finish(161);case 164: // end of repo loop


            // Add some extra fields to our checkFileResult object
            //  in case we need this information again later
            checkBookPackageResult.checkedFileCount = checkedFileCount;
            checkBookPackageResult.checkedFilenames = checkedFilenames;
            checkBookPackageResult.checkedFilenameExtensions = (0, _toConsumableArray2.default)(checkedFilenameExtensions); // convert Set to Array
            checkBookPackageResult.checkedFilesizes = totalCheckedSize;
            checkBookPackageResult.checkedRepoNames = (0, _toConsumableArray2.default)(checkedRepoNames); // convert Set to Array
            // checkBookPackageResult.checkedOptions = newCheckingOptions; // This is done at the caller level

            checkBookPackageResult.elapsedSeconds = (new Date() - startTime) / 1000; // seconds
            // debugLog("checkBookPackageResult:", JSON.stringify(checkBookPackageResult));
            // debugLog(`checkBookPackageResult(${bookID}): elapsedSeconds = ${checkBookPackageResult.elapsedSeconds}, notices count = ${checkBookPackageResult.noticeList.length}`);
            return _context4.abrupt("return", checkBookPackageResult);case 171:case "end":return _context4.stop();}}}, _callee4, null, [[27, 32], [45, 158, 161, 164], [72, 79], [104, 113]]);}));return _checkBookPackage.apply(this, arguments);}
;
// end of checkBookPackage()


/*
    checkTQMarkdownBook
*/
/**
 *
 * @param {string} username
 * @param {string} languageCode
 * @param {string} repoCode -- 'TQ' or 'OBS-TQ'
 * @param {string} repoName
 * @param {string} branch
 * @param {string} bookID -- 3-character USFM book ID or 'OBS'
 * @param {Object} checkingOptions
 * @return {Object} - containing successList and noticeList
 */function
checkTQMarkdownBook(_x6, _x7, _x8, _x9, _x10, _x11, _x12) {return _checkTQMarkdownBook.apply(this, arguments);}

































































































































































// end of checkTQMarkdownBook function
function _checkTQMarkdownBook() {_checkTQMarkdownBook = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6(username, languageCode, repoCode, repoName, branch, bookID, checkingOptions) {var generalLocation, ctqResult, addSuccessMessage, addNoticePartial, ourCheckTQFileContents, _ourCheckTQFileContents, getFileListFromZip_, checkedFileCount, checkedFilenames, checkedFilenameExtensions, totalCheckedSize, pathList, details, _iterator7, _step7, thisPath, pathParts, C, V, _getFile_, tqFileContent, _details;return _regenerator.default.wrap(function _callee6$(_context6) {while (1) {switch (_context6.prev = _context6.next) {case 0:_ourCheckTQFileContents = function _ourCheckTQFileConten2() {_ourCheckTQFileContents = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5(repoCode, bookID, C, V, cfFilename, fileContent, fileLocation, checkingOptions) {var cfResultObject, _iterator8, _step8, noticeEntry;return _regenerator.default.wrap(function _callee5$(_context5) {while (1) {switch (_context5.prev = _context5.next) {case 0:_context5.next = 2;return (0, _checkFileContents.checkFileContents)(username, languageCode, repoCode, branch, cfFilename, fileContent, fileLocation, checkingOptions);case 2:cfResultObject = _context5.sent; // debugLog("checkFileContents() returned", cfResultObject.successList.length, "success message(s) and", cfResultObject.noticeList.length, "notice(s)");
                        // for (const successEntry of cfResultObject.successList) userLog("  ourCheckTQFileContents:", successEntry);
                        // Process noticeList line by line,  appending the repoCode as an extra field as we go
                        _iterator8 = _createForOfIteratorHelper(cfResultObject.noticeList);try {for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {noticeEntry = _step8.value; // noticeEntry is an array of eight fields: 1=priority, 2=bookID, 3=C, 4=V, 5=msg, 6=characterIndex, 7=excerpt, 8=location
                            // //parameterAssert(Object.keys(noticeEntry).length === 5, `cTQ ourCheckTQFileContents notice length=${Object.keys(noticeEntry).length}`);
                            // We add the repoCode as an extra value
                            addNoticePartial(_objectSpread(_objectSpread({}, noticeEntry), {}, { bookID: bookID, C: C, V: V, extra: repoCode }));}} catch (err) {_iterator8.e(err);} finally {_iterator8.f();}case 5:case "end":return _context5.stop();}}}, _callee5);}));return _ourCheckTQFileContents.apply(this, arguments);};ourCheckTQFileContents = function _ourCheckTQFileConten(_x31, _x32, _x33, _x34, _x35, _x36, _x37, _x38) {return _ourCheckTQFileContents.apply(this, arguments);};addNoticePartial = function _addNoticePartial2(noticeObject) {// bookID is a three-character UPPERCASE USFM book identifier or 'OBS'.
              // functionLog(`checkTQMarkdownBook addNoticePartial: ${noticeObject.priority}:${noticeObject.message} ${noticeObject.bookID} ${noticeObject.C}:${noticeObject.V} ${noticeObject.filename}:${noticeObject.lineNumber} ${noticeObject.characterIndex > 0 ? ` (at character ${noticeObject.characterIndex})` : ""}${noticeObject.excerpt ? ` ${noticeObject.excerpt}` : ""}${noticeObject.location}`);
              //parameterAssert(noticeObject.priority !== undefined, "cTQ addNoticePartial: 'priority' parameter should be defined");
              //parameterAssert(typeof noticeObject.priority === 'number', `cTQ addNoticePartial: 'priority' parameter should be a number not a '${typeof noticeObject.priority}'`);
              //parameterAssert(noticeObject.message !== undefined, "cTQ addNoticePartial: 'message' parameter should be defined");
              //parameterAssert(typeof noticeObject.message === 'string', `cTQ addNoticePartial: 'message' parameter should be a string not a '${typeof noticeObject.message}'`);
              //parameterAssert(noticeObject.bookID !== undefined, "cTQ addNoticePartial: 'bookID' parameter should be defined");
              //parameterAssert(typeof noticeObject.bookID === 'string', `cTQ addNoticePartial: 'bookID' parameter should be a string not a '${typeof noticeObject.bookID}'`);
              //parameterAssert(noticeObject.bookID.length === 3, `cTQ addNoticePartial: 'bookID' parameter should be three characters long not ${noticeObject.bookID.length}`);
              //parameterAssert(noticeObject.bookID === 'OBS' || books.isValidBookID(noticeObject.bookID), `cTQ addNoticePartial: '${noticeObject.bookID}' is not a valid USFM book identifier`);
              // //parameterAssert(C !== undefined, "cTQ addNoticePartial: 'C' parameter should be defined");
              if (noticeObject.C) {//parameterAssert(typeof noticeObject.C === 'string', `cTQ addNoticePartial: 'C' parameter should be a string not a '${typeof noticeObject.C}'`);
              } // //parameterAssert(V !== undefined, "cTQ addNoticePartial: 'V' parameter should be defined");
              if (noticeObject.V) {//parameterAssert(typeof noticeObject.V === 'string', `cTQ addNoticePartial: 'V' parameter should be a string not a '${typeof noticeObject.V}'`);
              } // //parameterAssert(characterIndex !== undefined, "cTQ addNoticePartial: 'characterIndex' parameter should be defined");
              if (noticeObject.characterIndex) {//parameterAssert(typeof noticeObject.characterIndex === 'number', `cTQ addNoticePartial: 'characterIndex' parameter should be a number not a '${typeof noticeObject.characterIndex}'`);
              } // //parameterAssert(excerpt !== undefined, "cTQ addNoticePartial: 'excerpt' parameter should be defined");
              if (noticeObject.excerpt) {//parameterAssert(typeof noticeObject.excerpt === 'string', `cTQ addNoticePartial: 'excerpt' parameter should be a string not a '${typeof noticeObject.excerpt}'`);
              } //parameterAssert(noticeObject.location !== undefined, "cTQ addNoticePartial: 'location' parameter should be defined");
              //parameterAssert(typeof noticeObject.location === 'string', `cTQ addNoticePartial: 'location' parameter should be a string not a '${typeof noticeObject.location}'`);
              //parameterAssert(noticeObject.extra !== undefined, "cTQ addNoticePartial: 'extra' parameter should be defined");
              //parameterAssert(typeof noticeObject.extra === 'string', `cTQ addNoticePartial: 'extra' parameter should be a string not a '${typeof noticeObject.extra}'`);
              ctqResult.noticeList.push(_objectSpread(_objectSpread({}, noticeObject), {}, { username: username, repoCode: repoCode, repoName: repoName, bookID: bookID }));};addSuccessMessage = function _addSuccessMessage2(successString) {// functionLog(`checkBookPackage success: ${successString}`);
              ctqResult.successList.push(successString);}; // functionLog(`checkBookPackage checkTQMarkdownBook(${username}, ${languageCode}, ${repoCode} ${repoName}, ${branch}, ${bookID}, ${JSON.stringify(checkingOptions)})…`)
            //parameterAssert(username !== undefined, "checkTQMarkdownBook: 'username' parameter should be defined");
            //parameterAssert(typeof username === 'string', `checkTQMarkdownBook: 'username' parameter should be a string not a '${typeof username}': '${username}'`);
            //parameterAssert(languageCode !== undefined, "checkTQMarkdownBook: 'languageCode' parameter should be defined");
            //parameterAssert(typeof languageCode === 'string', `checkTQMarkdownBook: 'languageCode' parameter should be a string not a '${typeof languageCode}': '${languageCode}'`);
            //parameterAssert(repoCode !== undefined, "checkTQMarkdownBook: 'repoCode' parameter should be defined");
            //parameterAssert(typeof repoCode === 'string', `checkTQMarkdownBook: 'repoCode' parameter should be a string not a '${typeof repoCode}': '${repoCode}'`);
            //parameterAssert(repoCode === 'TQ' || repoCode === 'OBS-TQ', `checkTQMarkdownBook: 'repoCode' parameter should be 'TQ' or 'OBS-TQ' not '${repoCode}'`);
            //parameterAssert(repoName !== undefined, "checkTQMarkdownBook: 'repoName' parameter should be defined");
            //parameterAssert(typeof repoName === 'string', `checkTQMarkdownBook: 'repoName' parameter should be a string not a '${typeof repoName}': ${repoName}`);
            //parameterAssert(branch !== undefined, "checkTQMarkdownBook: 'branch' parameter should be defined");
            //parameterAssert(typeof branch === 'string', `checkTQMarkdownBook: 'branch' parameter should be a string not a '${typeof branch}': '${branch}'`);
            //parameterAssert(bookID !== undefined, "checkTQMarkdownBook: 'bookID' parameter should be defined");
            //parameterAssert(typeof bookID === 'string', `checkTQMarkdownBook: 'bookID' parameter should be a string not a '${typeof bookID}': ${bookID}`);
            //parameterAssert(bookID.length === 3, `checkTQMarkdownBook: 'bookID' parameter should be three characters long not ${bookID.length}`);
            //parameterAssert(bookID.toUpperCase() === bookID, `checkTQMarkdownBook: 'bookID' parameter should be UPPERCASE not '${bookID}'`);
            //parameterAssert(bookID === 'OBS' || books.isValidBookID(bookID), `checkTQMarkdownBook: '${bookID}' is not a valid USFM book identifier`);
            generalLocation = " in ".concat(username, " (").concat(branch, ")");ctqResult = { successList: [], noticeList: [] }; // end of ourCheckTQFileContents function
            // Main code for checkTQMarkdownBook
            // We need to find and check all the markdown folders/files for this book
            getFileListFromZip_ = checkingOptions && checkingOptions.getFileListFromZip ? checkingOptions.getFileListFromZip : _core.getFileListFromZip;checkedFileCount = 0, checkedFilenames = [], checkedFilenameExtensions = new Set(), totalCheckedSize = 0;_context6.next = 10;return getFileListFromZip_({ username: username, repository: repoName, branchOrRelease: branch, optionalPrefix: "".concat(bookID.toLowerCase(), "/") });case 10:pathList = _context6.sent;if (!(!Array.isArray(pathList) || !pathList.length)) {_context6.next = 22;break;} // console.error("checkTQrepo failed to load", username, repoName, branch);
            details = "username=".concat(username);_context6.next = 15;return (0, _core.repositoryExistsOnDoor43)({ username: username, repository: repoName });case 15:if (_context6.sent) {_context6.next = 19;break;}ctqResult.noticeList.push({ priority: 997, message: "Repository doesn’t exist", details: details, username: username, repoCode: repoCode, repoName: repoName, location: generalLocation, extra: repoCode });_context6.next = 20;break;case 19:addNoticePartial({ priority: 996, message: "Unable to load", details: details, bookID: bookID, location: generalLocation, extra: repoCode });case 20:_context6.next = 68;break;case 22: // debugLog(`  Got ${pathList.length} pathList entries`)
            _iterator7 = _createForOfIteratorHelper(pathList);_context6.prev = 23;_iterator7.s();case 25:if ((_step7 = _iterator7.n()).done) {_context6.next = 59;break;}thisPath = _step7.value; // debugLog("checkTQMarkdownBook: Try to load", username, repoName, thisPath, branch);
            //parameterAssert(thisPath.endsWith('.md'), `Expected ${thisPath} to end with .md`);
            // const filename = thisPath.split('/').pop();
            pathParts = thisPath.slice(0, -3).split('/');C = pathParts[pathParts.length - 2].replace(/^0+(?=\d)/, ''); // Remove leading zeroes
            V = pathParts[pathParts.length - 1].replace(/^0+(?=\d)/, ''); // Remove leading zeroes
            _getFile_ = checkingOptions && checkingOptions.getFile ? checkingOptions.getFile : _core.cachedGetFile;tqFileContent = void 0;_context6.prev = 32;_context6.next = 35;return _getFile_({ username: username, repository: repoName, path: thisPath, branch: branch });case 35:tqFileContent = _context6.sent; // debugLog("Fetched fileContent for", repoName, thisPath, typeof tqFileContent, tqFileContent.length);
            checkedFilenames.push(thisPath);totalCheckedSize += tqFileContent.length;_context6.next = 52;break;case 40:_context6.prev = 40;_context6.t0 = _context6["catch"](32);console.error("checkTQMarkdownBook failed to load", username, repoName, thisPath, branch, _context6.t0 + '');_details = "username=".concat(username);_context6.next = 46;return (0, _core.repositoryExistsOnDoor43)({ username: username, repository: repoName });case 46:if (_context6.sent) {_context6.next = 50;break;}ctqResult.noticeList.push({ priority: 997, message: "Repository doesn’t exist", details: _details, username: username, repoCode: repoCode, repoName: repoName, location: generalLocation, extra: repoCode });_context6.next = 52;break;case 50: // eslint-disable-next-line eqeqeq
            if (_context6.t0 != 'TypeError: repoFileContent is null') _details += " error=".concat(_context6.t0);addNoticePartial({ priority: 996, message: "Unable to load", details: _details, bookID: bookID, C: C, V: V, filename: thisPath, location: "".concat(generalLocation, " ").concat(thisPath), extra: repoCode });case 52:if (!tqFileContent) {_context6.next = 57;break;}_context6.next = 55;return ourCheckTQFileContents(repoCode, bookID, C, V, thisPath, tqFileContent, generalLocation, checkingOptions);case 55: // Adds the notices to checkBookPackageResult
            checkedFileCount += 1;checkedFilenameExtensions.add('md'); // addSuccessMessage(`Checked ${repoCode.toUpperCase()} file: ${thisPath}`);
          case 57:_context6.next = 25;break;case 59:_context6.next = 64;break;case 61:_context6.prev = 61;_context6.t1 = _context6["catch"](23);_iterator7.e(_context6.t1);case 64:_context6.prev = 64;_iterator7.f();return _context6.finish(64);case 67:addSuccessMessage("Checked ".concat(checkedFileCount.toLocaleString(), " ").concat(repoCode.toUpperCase(), " file").concat(checkedFileCount === 1 ? '' : 's'));case 68:ctqResult.checkedFileCount = checkedFileCount;ctqResult.checkedFilenames = checkedFilenames;ctqResult.checkedFilenameExtensions = (0, _toConsumableArray2.default)(checkedFilenameExtensions); // convert Set to Array
            ctqResult.checkedFilesizes = totalCheckedSize; // debugLog(`  checkTQMarkdownBook returning ${JSON.stringify(ctqResult)}`);
            return _context6.abrupt("return", ctqResult);case 73:case "end":return _context6.stop();}}}, _callee6, null, [[23, 61, 64, 67], [32, 40]]);}));return _checkTQMarkdownBook.apply(this, arguments);}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,