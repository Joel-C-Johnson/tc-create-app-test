"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _typeof = require("@babel/runtime/helpers/typeof");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));var _react = _interopRequireWildcard(require("react"));

var books = _interopRequireWildcard(require("../../core/books/books"));
var _core = require("../../core");
var _noticeProcessingFunctions = require("../notice-processing-functions");
var _RenderProcessedResults = require("../RenderProcessedResults");
var _checkBookPackage = require("./checkBookPackage");

var _utilities = require("../../core/utilities");function _getRequireWildcardCache(nodeInterop) {if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {return nodeInterop ? cacheNodeInterop : cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj, nodeInterop) {if (!nodeInterop && obj && obj.__esModule) {return obj;}if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}function _createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}


// const BP_VALIDATOR_VERSION_STRING = '0.5.5';


function BookPackageCheck( /*username, languageCode, bookID,*/props) {
  // Check a single Bible book across many repositories
  var _useState = (0, _react.useState)("Waiting-CheckBookPackage"),_useState2 = (0, _slicedToArray2.default)(_useState, 2),result = _useState2[0],setResultValue = _useState2[1];

  // debugLog(`I'm here in BookPackageCheck v${BP_VALIDATOR_VERSION_STRING}`);
  // consoleLogObject("props", props);
  // consoleLogObject("props.classes", props.classes);

  var username = props.username;
  // debugLog(`username='${username}'`);
  var languageCode = props.languageCode;
  // debugLog(`languageCode='${languageCode}'`);
  var bookID = props.bookID;
  // debugLog(`bookID='${bookID}'`);
  var dataSet = props.dataSet;
  // debugLog(`dataSet='${dataSet}'`);
  var branch = props.branch;
  // debugLog(`branch='${branch}'`);

  var checkingOptions = { // Uncomment any of these to test them
    dataSet: dataSet, // Can be 'OLD' (Markdown, etc.), 'NEW' (TSV only), or 'BOTH', or 'DEFAULT'
    // excerptLength: 25, // default is 20 characters
    checkManifestFlag: true,
    checkReadmeFlag: true,
    checkLicenseFlag: true,
    suppressNoticeDisablingFlag: true // Leave this one as true (otherwise demo checks are less efficient)
  };
  // Or this allows the parameters to be specified as a BookPackageCheck property
  if (props.excerptLength) checkingOptions.excerptLength = (0, _core.ourParseInt)(props.excerptLength);
  if (props.cutoffPriorityLevel) checkingOptions.cutoffPriorityLevel = (0, _core.ourParseInt)(props.cutoffPriorityLevel);
  if (props.disableAllLinkFetchingFlag) checkingOptions.disableAllLinkFetchingFlag = props.disableAllLinkFetchingFlag.toLowerCase() === 'true';
  if (props.disableLinkedTAArticlesCheckFlag) checkingOptions.disableLinkedTAArticlesCheckFlag = props.disableLinkedTAArticlesCheckFlag.toLowerCase() === 'true';
  if (props.disableLinkedTWArticlesCheckFlag) checkingOptions.disableLinkedTWArticlesCheckFlag = props.disableLinkedTWArticlesCheckFlag.toLowerCase() === 'true';
  // functionLog(`checkingOptions.disableLinkedTAArticlesCheckFlag ${checkingOptions.disableLinkedTAArticlesCheckFlag} from '${props.disableLinkedTAArticlesCheckFlag}'`);
  // functionLog(`checkingOptions.disableLinkedTWArticlesCheckFlag ${checkingOptions.disableLinkedTWArticlesCheckFlag} from '${props.disableLinkedTWArticlesCheckFlag}'`);

  (0, _react.useEffect)(function () {
    // const newProps = { bookID, branch, checkingOptions, languageCode, cutoffPriorityLevel: props.cutoffPriorityLevel, displayType: props.displayType, errorPriorityLevel: props.errorPriorityLevel, maximumSimilarMessages: props.maximumSimilarMessages, sortBy: props.sortBy, username};
    // debugLog("BookPackageCheck.useEffect() called with ", JSON.stringify(newProps));

    // Use an IIFE (Immediately Invoked Function Expression)
    //  e.g., see https://medium.com/javascript-in-plain-english/https-medium-com-javascript-in-plain-english-stop-feeling-iffy-about-using-an-iife-7b0292aba174
    (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {var repoPreloadList, whichTestament, origLangRepo, successFlag, rawCBPResults, processOptions, _iterator, _step, stringBit, intBit, displayType,






































































































      renderSummary, processedResults, _processedResults, _processedResults2;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:renderSummary = function _renderSummary(processedResults) {
                return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/
                _react.default.createElement("p", null, "Checked ", /*#__PURE__*/_react.default.createElement("b", null, username, " ", languageCode, " ", bookID), " (from ", /*#__PURE__*/_react.default.createElement("i", null, branch === undefined ? 'DEFAULT' : branch), " branches)"), /*#__PURE__*/
                _react.default.createElement(_RenderProcessedResults.RenderCheckedFilesList, { username: username, results: processedResults }), /*#__PURE__*/
                _react.default.createElement(_RenderProcessedResults.RenderTotals, { rawNoticeListLength: rawCBPResults.noticeList.length, results: processedResults }));


              };if (!(!props.wait || props.wait !== 'N')) {_context.next = 4;break;}setResultValue( /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement("span", { style: { color: 'blue' } }, "Waiting for user\u2026"), " (Adjust settings below as necessary and then set ", /*#__PURE__*/_react.default.createElement("b", null, "wait='N'"), " to start)"));return _context.abrupt("return");case 4:if (!(bookID !== 'OBS' && !books.isValidBookID(bookID))) {_context.next = 8;break;}(0, _utilities.userLog)("Invalid '".concat(bookID, "' bookID given!"));setResultValue( /*#__PURE__*/_react.default.createElement("p", { style: { color: 'red' } }, "Please enter a valid USFM book identifier or 'OBS'. ('", /*#__PURE__*/_react.default.createElement("b", null, bookID), "' is not valid.)"));return _context.abrupt("return");case 8:if (!(props.reloadAllFilesFirst && props.reloadAllFilesFirst.slice(0).toUpperCase() === 'Y')) {_context.next = 15;break;}(0, _utilities.userLog)("Clearing cache before running book package checkâ€¦");setResultValue( /*#__PURE__*/_react.default.createElement("p", { style: { color: 'orange' } }, "Clearing cache before running book package check\u2026"));_context.next = 13;return (0, _core.clearCaches)();case 13:_context.next = 17;break;case 15:_context.next = 17;return (0, _core.clearCheckedArticleCache)();case 17:if (bookID === 'OBS') {repoPreloadList = ['OBS', 'OBS-TWL', 'OBS-TN2', 'OBS-TQ2', 'OBS-SN2', 'OBS-SQ2']; // for DEFAULT
                if (dataSet === 'OLD') repoPreloadList = ['OBS', 'OBS-TWL', 'OBS-TN', 'OBS-TQ', 'OBS-SN', 'OBS-SQ'];else if (dataSet === 'NEW') repoPreloadList = ['OBS', 'OBS-TWL', 'OBS-TN2', 'OBS-TQ2', 'OBS-SN', 'OBS-SQ'];else if (dataSet === 'BOTH') repoPreloadList = ['OBS', 'OBS-TWL', 'OBS-TN', 'OBS-TN2', 'OBS-TQ', 'OBS-TQ2', 'OBS-SN', 'OBS-SN', 'OBS-SN2', 'OBS-SQ2'];} else {// not OBS
                repoPreloadList = ['TWL', 'LT', 'ST', 'TN', 'TQ', 'SN', 'SQ']; // for DEFAULT
                if (dataSet === 'OLD') repoPreloadList = ['TWL', 'LT', 'ST', 'TN', 'TQ'];else if (dataSet === 'NEW') repoPreloadList = ['TWL', 'LT', 'ST', 'TN2', 'TQ2', 'SN', 'SQ'];else if (dataSet === 'BOTH') repoPreloadList = ['TWL', 'LT', 'ST', 'TN', 'TN2', 'TQ', 'TQ2', 'SN', 'SQ'];whichTestament = books.testament(bookID); // returns 'old' or 'new'
                (0, _utilities.logicAssert)(whichTestament === 'old' || whichTestament === 'new', "BookPackageCheck() couldn't find testament for '".concat(bookID, "'"));origLangRepo = whichTestament === 'old' ? 'UHB' : 'UGNT';repoPreloadList.unshift(origLangRepo);}if (!checkingOptions.disableAllLinkFetchingFlag) {// Both Bible books and OBS refer to TW and TA
                repoPreloadList.push('TW');repoPreloadList.push('TA');} // debugLog(`BookPackageCheck got repoPreloadList=${repoPreloadList} for dataSet=${dataSet}`)
              // if (bookID !== 'OBS') { // Preload the reference repos
              setResultValue( /*#__PURE__*/_react.default.createElement("p", { style: { color: 'magenta' } }, "Preloading ", repoPreloadList.length, " repos for ", /*#__PURE__*/_react.default.createElement("i", null, username), " ", languageCode, " ready for ", /*#__PURE__*/_react.default.createElement("b", null, bookID), " book package check\u2026"));_context.next = 22;return (0, _core.preloadReposIfNecessary)(username, languageCode, [bookID], branch, repoPreloadList);case 22:successFlag = _context.sent;if (!successFlag) console.error("BookPackageCheck error: Failed to pre-load all repos"); // }
              // Display our "waiting" message
              setResultValue( /*#__PURE__*/_react.default.createElement("p", { style: { color: 'magenta' } }, "Checking ", /*#__PURE__*/_react.default.createElement("i", null, username), " ", languageCode, " ", /*#__PURE__*/_react.default.createElement("b", null, bookID), " book package\u2026"));_context.next = 27;return (0, _checkBookPackage.checkBookPackage)(username, languageCode, bookID, setResultValue, checkingOptions);case 27:rawCBPResults = _context.sent; // Add some extra fields to our rawCBPResults object in case we need this information again later
              rawCBPResults.checkType = 'BookPackage';rawCBPResults.username = username;rawCBPResults.languageCode = languageCode;rawCBPResults.bookID = bookID;rawCBPResults.checkedOptions = checkingOptions; // debugLog("Here with CBP rawCBPResults", typeof rawCBPResults);
              // Now do our final handling of the result -- we have some options available
              processOptions = {// Uncomment any of these to test them
                // 'maximumSimilarMessages': 4, // default is 3 -- 0 means donâ€™t suppress
                // 'errorPriorityLevel': 800, // default is 700
                // 'cutoffPriorityLevel': 100, // default is 0
                // 'sortBy': 'ByRepo', // default is 'ByPriority', also have 'AsFound'
                // 'ignorePriorityNumberList': [123, 202], // default is []
              }; // Or this allows the parameters to be specified as a BookPackageCheck property
              if (props.maximumSimilarMessages) processOptions.maximumSimilarMessages = (0, _core.ourParseInt)(props.maximumSimilarMessages);if (props.errorPriorityLevel) processOptions.errorPriorityLevel = (0, _core.ourParseInt)(props.errorPriorityLevel); // if (props.cutoffPriorityLevel) processOptions.cutoffPriorityLevel = ourParseInt(props.cutoffPriorityLevel);
              if (props.sortBy) processOptions.sortBy = props.sortBy;if (props.ignorePriorityNumberList) {// We need to convert from string to Array
                //parameterAssert(props.ignorePriorityNumberList[0] === '[' && props.ignorePriorityNumberList[props.ignorePriorityNumberList.length - 1] === ']', `Format of props.ignorePriorityNumberList '${props.ignorePriorityNumberList}' is wrong should be enclosed in []`)
                processOptions.ignorePriorityNumberList = [];_iterator = _createForOfIteratorHelper(props.ignorePriorityNumberList.substring(1, props.ignorePriorityNumberList.length - 1).split(','));try {for (_iterator.s(); !(_step = _iterator.n()).done;) {stringBit = _step.value;intBit = (0, _core.ourParseInt)(stringBit.trim()); // trim allows comma,space to also be used as separator
                    processOptions.ignorePriorityNumberList.push(intBit);} // debugLog(`Now have processOptions.ignorePriorityNumberList=${JSON.stringify(processOptions.ignorePriorityNumberList)}`);
                } catch (err) {_iterator.e(err);} finally {_iterator.f();}}if (props.showDisabledNoticesFlag) processOptions.showDisabledNoticesFlag = props.showDisabledNoticesFlag.toLowerCase() === 'true';displayType = 'ErrorsWarnings'; // default
              if (props.displayType) displayType = props.displayType;if (displayType === 'ErrorsWarnings') {processedResults = (0, _noticeProcessingFunctions.processNoticesToErrorsWarnings)(rawCBPResults, processOptions); //             userLog(`BookPackageCheck got back processedResults with ${processedResults.successList.length.toLocaleString()} success message(s), ${processedResults.errorList.length.toLocaleString()} error(s) and ${processedResults.warningList.length.toLocaleString()} warning(s)
                //   numIgnoredNotices=${processedResults.numIgnoredNotices.toLocaleString()} numHiddenErrors=${processedResults.numHiddenErrors.toLocaleString()} numHiddenWarnings=${processedResults.numHiddenWarnings.toLocaleString()}`);
                // debugLog("Here now in rendering bit!");
                if (processedResults.errorList.length || processedResults.warningList.length) setResultValue( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, renderSummary(processedResults), /*#__PURE__*/_react.default.createElement(_RenderProcessedResults.RenderSuccessesErrorsWarnings, { results: processedResults })));else // no errors or warnings
                  setResultValue( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, renderSummary(processedResults), /*#__PURE__*/_react.default.createElement(_RenderProcessedResults.RenderSuccessesErrorsWarnings, { results: processedResults })));} else if (displayType === 'SevereMediumLow') {_processedResults = (0, _noticeProcessingFunctions.processNoticesToSevereMediumLow)(rawCBPResults, processOptions); //             userLog(`BookPackageCheck got back processedResults with ${processedResults.successList.length.toLocaleString()} success message(s), ${processedResults.errorList.length.toLocaleString()} error(s) and ${processedResults.warningList.length.toLocaleString()} warning(s)
                //   numIgnoredNotices=${processedResults.numIgnoredNotices.toLocaleString()} numHiddenErrors=${processedResults.numHiddenErrors.toLocaleString()} numHiddenWarnings=${processedResults.numHiddenWarnings.toLocaleString()}`);
                if (_processedResults.severeList.length || _processedResults.mediumList.length || _processedResults.lowList.length) setResultValue( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, renderSummary(_processedResults), /*#__PURE__*/_react.default.createElement(_RenderProcessedResults.RenderSuccessesSevereMediumLow, { results: _processedResults })));else // no severe, medium, or low notices
                  setResultValue( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, renderSummary(_processedResults), /*#__PURE__*/_react.default.createElement(_RenderProcessedResults.RenderSuccessesSevereMediumLow, { results: _processedResults })));

              } else if (displayType === 'SingleList') {
                _processedResults2 = (0, _noticeProcessingFunctions.processNoticesToSingleList)(rawCBPResults, processOptions);
                // debugLog(`BookPackageCheck got back processedResults with ${processedResults.successList.length.toLocaleString()} success message(s) and ${processedResults.warningList.length.toLocaleString()} notice(s)
                //   numIgnoredNotices=${processedResults.numIgnoredNotices.toLocaleString()} numHiddenWarnings=${processedResults.numHiddenWarnings.toLocaleString()}`);

                if (_processedResults2.warningList.length)
                setResultValue( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null,
                renderSummary(_processedResults2), /*#__PURE__*/
                _react.default.createElement(_RenderProcessedResults.RenderSuccessesNoticesGradient, { results: _processedResults2 })));else

                  // no warnings
                  setResultValue( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null,
                  renderSummary(_processedResults2), /*#__PURE__*/
                  _react.default.createElement(_RenderProcessedResults.RenderSuccessesNoticesGradient, { results: _processedResults2 })));

              } else setResultValue( /*#__PURE__*/_react.default.createElement("b", { style: { color: 'red' } }, "Invalid displayType='", displayType, "'"));

              // debugLog("Finished rendering bit.");
            case 42:case "end":return _context.stop();}}}, _callee);}))(); // end of async part in unnamedFunction
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [bookID, branch, JSON.stringify(checkingOptions), languageCode, JSON.stringify(props), username]); // end of useEffect part

  // {/* <div className={classes.root}> */}
  return /*#__PURE__*/(
    _react.default.createElement("div", { className: "Fred" },
    result));


}

// BookPackageCheck.propTypes = {
//   /** @ignore */
//   username: PropTypes.object.isRequired,
//   /** @ignore */
//   languageCode: PropTypes.object.isRequired,
//   bookID: PropTypes.object.isRequired,
//   props: PropTypes.object,
// };

// const styles = theme => ({
//   root: {
//   },
// });
var _default =
BookPackageCheck;exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,