"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _typeof = require("@babel/runtime/helpers/typeof");Object.defineProperty(exports, "__esModule", { value: true });exports.checkBookPackages = checkBookPackages;var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var books = _interopRequireWildcard(require("../../core/books/books"));
var _checkBookPackage = require("../book-package-check/checkBookPackage");

var _utilities = require("../../core/utilities");function _getRequireWildcardCache(nodeInterop) {if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {return nodeInterop ? cacheNodeInterop : cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj, nodeInterop) {if (!nodeInterop && obj && obj.__esModule) {return obj;}if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}function _createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}

// const BPs_VALIDATOR_VERSION_STRING = '0.2.6';


/**
 *
 * @param {string} username -- Door43 username/orgname
 * @param {string} languageCode
 * @param {*} bookIDList
 * @param {Function} setResultValue
 * @param {Object} checkingOptions
 */function
checkBookPackages(_x, _x2, _x3, _x4, _x5) {return _checkBookPackages.apply(this, arguments);}function _checkBookPackages() {_checkBookPackages = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(username, languageCode, bookIDList, setResultValue, checkingOptions) {var abortFlag, startTime, checkBookPackagesResult,














    addNotice, checkedFileCount, checkedFilenames, checkedFilenameExtensions, totalCheckedSize, checkedRepoNames, checkedBibleBPManifestFlag, _iterator, _step, bookID, bookNumberAndName, checkManifestFlag, checkReadmeFlag, checkLicenseFlag, cbpResultObject, index;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:addNotice = function _addNotice(noticeObject) {
              // bookID is a three-character UPPERCASE USFM book identifier or 'OBS'.
              (0, _utilities.userLog)("cBPs addNotice: (priority=".concat(noticeObject.priority, ") ").concat(noticeObject.extra, " ").concat(noticeObject.message).concat(noticeObject.characterIndex > 0 ? " (at character ".concat(noticeObject.characterIndex, ")") : "").concat(noticeObject.excerpt ? " ".concat(noticeObject.excerpt) : "").concat(noticeObject.location));
              //parameterAssert(noticeObject.priority !== undefined, "cBPs addNotice: 'priority' parameter should be defined");
              //parameterAssert(typeof noticeObject.priority === 'number', `cBPs addNotice: 'priority' parameter should be a number not a '${typeof noticeObject.priority}'`);
              //parameterAssert(noticeObject.message !== undefined, "cBPs addNotice: 'message' parameter should be defined");
              //parameterAssert(typeof noticeObject.message === 'string', `cBPs addNotice: 'message' parameter should be a string not a '${typeof noticeObject.message}'`);
              // //parameterAssert(bookID !== undefined, "cBPs addNotice: 'bookID' parameter should be defined");
              if (noticeObject.bookID) {
                //parameterAssert(typeof noticeObject.bookID === 'string', `cBPs addNotice: 'bookID' parameter should be a string not a '${typeof noticeObject.bookID}'`);
                //parameterAssert(noticeObject.bookID.length === 3, `cBPs addNotice: 'bookID' parameter should be three characters long not ${noticeObject.bookID.length}`);
                //parameterAssert(books.isValidBookID(noticeObject.bookID), `cBPs addNotice: '${noticeObject.bookID}' is not a valid USFM book identifier`);
              }
              // //parameterAssert(C !== undefined, "cBPs addNotice: 'C' parameter should be defined");
              if (noticeObject.C) {//parameterAssert(typeof noticeObject.C === 'string', `cBPs addNotice: 'C' parameter should be a string not a '${typeof noticeObject.C}'`);
              }
              // //parameterAssert(V !== undefined, "cBPs addNotice: 'V' parameter should be defined");
              if (noticeObject.V) {//parameterAssert(typeof noticeObject.V === 'string', `cBPs addNotice: 'V' parameter should be a string not a '${typeof noticeObject.V}'`);
              }
              // //parameterAssert(characterIndex !== undefined, "cBPs addNotice: 'characterIndex' parameter should be defined");
              if (noticeObject.characterIndex) {//parameterAssert(typeof noticeObject.characterIndex === 'number', `cBPs addNotice: 'characterIndex' parameter should be a number not a '${typeof noticeObject.characterIndex}'`);
              }
              // //parameterAssert(excerpt !== undefined, "cBPs addNotice: 'excerpt' parameter should be defined");
              if (noticeObject.excerpt) {//parameterAssert(typeof noticeObject.excerpt === 'string', `cBPs addNotice: 'excerpt' parameter should be a string not a '${typeof noticeObject.excerpt}'`);
              }
              //parameterAssert(noticeObject.location !== undefined, "cBPs addNotice: 'location' parameter should be defined");
              //parameterAssert(typeof noticeObject.location === 'string', `cBPs addNotice: 'location' parameter should be a string not a '${typeof noticeObject.location}'`);
              //parameterAssert(noticeObject.extra !== undefined, "cBPs addNotice: 'extra' parameter should be defined");
              //parameterAssert(typeof noticeObject.extra === 'string', `cBPs addNotice: 'extra' parameter should be a string not a '${typeof extra}'`);
              checkBookPackagesResult.noticeList.push(noticeObject);
            }; // NOTE: dataSet is simply passed through here to checkBookPackage in checkingOptions
            //
            // userLog(`I'm here in checkBookPackages v${VALIDATOR_VERSION_STRING}
            //   with ${username}, ${languageCode}, ${bookIDList}, ${JSON.stringify(checkingOptions)}`);
            abortFlag = false;startTime = new Date();checkBookPackagesResult = { successList: [], noticeList: [] }; // function addSuccessMessage(successString) {
            //     // functionLog(`checkBookPackages success: ${successString}`);
            //     checkBookPackagesResult.successList.push(successString);
            // }
            // Main code for checkBookPackages()
            checkedFileCount = 0, checkedFilenames = [], checkedFilenameExtensions = new Set(), totalCheckedSize = 0, checkedRepoNames = new Set();checkedBibleBPManifestFlag = false;_iterator = _createForOfIteratorHelper(bookIDList);_context.prev = 7;_iterator.s();case 9:if ((_step = _iterator.n()).done) {_context.next = 40;break;}bookID = _step.value;if (!abortFlag) {_context.next = 13;break;}return _context.abrupt("break", 40);case 13:if (!(

            bookID !== 'OBS')) {_context.next = 23;break;}
            // eslint-disable-next-line no-unused-vars
            bookNumberAndName = void 0;_context.prev = 15;

            bookNumberAndName = books.usfmNumberName(bookID);_context.next = 23;break;case 19:_context.prev = 19;_context.t0 = _context["catch"](15);

            addNotice({ priority: 900, message: "Bad parameter: should be given a valid book abbreviation", excerpt: bookIDList, location: " (not '".concat(bookIDList, "')") });return _context.abrupt("return",
            checkBookPackagesResult);case 23:




            // We only want to check the manifest files for ONE Bible BP AND for OBS
            checkManifestFlag = false, checkReadmeFlag = false, checkLicenseFlag = false;
            if (bookID === 'OBS') {checkManifestFlag = true;checkReadmeFlag = true;checkLicenseFlag = true;} else
              // it’s a Bible book
              if (!checkedBibleBPManifestFlag) {
                checkManifestFlag = true;checkReadmeFlag = true;checkLicenseFlag = true;
                checkedBibleBPManifestFlag = true; // so we only do it once for Bible books
              }
            checkingOptions.checkManifestFlag = checkManifestFlag;
            checkingOptions.checkReadmeFlag = checkReadmeFlag;
            checkingOptions.checkLicenseFlag = checkLicenseFlag;

            // We use the generalLocation here (does not include repo name)
            //  so that we can adjust the returned strings ourselves
            _context.next = 30;return (0, _checkBookPackage.checkBookPackage)(username, languageCode, bookID, setResultValue, checkingOptions);case 30:cbpResultObject = _context.sent;
            // functionLog(`checkBookPackage() returned ${cbpResultObject.successList.length} success message(s) and ${cbpResultObject.noticeList.length} notice(s)`);

            // Concat is faster if we don’t need to process each success message individually
            checkBookPackagesResult.successList = checkBookPackagesResult.successList.concat(cbpResultObject.successList);
            // Process noticeList line by line,  appending the repoCode/bookID as an extra field as we go
            // for (const successEntry of cbpResultObject.successList) {
            //     // debugLog("  ourCheckBookPackage:", successEntry);
            //     addSuccessMessage(successEntry);
            // }

            // Concat is faster if we don’t need to process each notice individually
            checkBookPackagesResult.noticeList = checkBookPackagesResult.noticeList.concat(cbpResultObject.noticeList);
            // for (const noticeEntry of cbpResultObject.noticeList)
            //     // noticeEntry is an array of eight fields: 1=priority, 2=bookID, 3=C, 4=V, 5=msg, 6=characterIndex, 7=excerpt, 8=location
            //     // The extra value from checkBookPackage is the repo name
            //     addNotice({noticeEntry.priority, noticeEntry[1], noticeEntry[2], noticeEntry[3], noticeEntry[4], noticeEntry[5], noticeEntry[6], noticeEntry[7], noticeEntry[5]);

            checkedFileCount += cbpResultObject.checkedFileCount;
            checkedFilenames = [].concat((0, _toConsumableArray2.default)(checkedFilenames), (0, _toConsumableArray2.default)(cbpResultObject.checkedFilenames));
            checkedFilenameExtensions = new Set([].concat((0, _toConsumableArray2.default)(checkedFilenameExtensions), (0, _toConsumableArray2.default)(cbpResultObject.checkedFilenameExtensions)));
            totalCheckedSize += cbpResultObject.checkedFilesizes;
            checkedRepoNames = new Set([].concat((0, _toConsumableArray2.default)(checkedRepoNames), (0, _toConsumableArray2.default)(cbpResultObject.checkedRepoNames)));

            // addSuccessMessage(`${checkedFileCount.toLocaleString()}/ Checked ${bookID} book package`);
          case 38:_context.next = 9;break;case 40:_context.next = 45;break;case 42:_context.prev = 42;_context.t1 = _context["catch"](7);_iterator.e(_context.t1);case 45:_context.prev = 45;_iterator.f();return _context.finish(45);case 48:

            // Add some extra fields to our checkFileResult object
            //  in case we need this information again later
            checkBookPackagesResult.checkedFileCount = checkedFileCount;
            checkBookPackagesResult.checkedFilenames = checkedFilenames;
            checkBookPackagesResult.checkedFilenameExtensions = (0, _toConsumableArray2.default)(checkedFilenameExtensions); // convert Set to Array
            checkBookPackagesResult.checkedFilesizes = totalCheckedSize;
            checkedRepoNames = (0, _toConsumableArray2.default)(checkedRepoNames); // Convert set to Array
            index = checkedRepoNames.indexOf("".concat(username, "/").concat(languageCode, "_obs"));
            if (index !== -1) checkedRepoNames[index] = 'OBS'; // Looks tidier here
            checkBookPackagesResult.checkedRepoNames = checkedRepoNames;
            // checkBookPackagesResult.checkedOptions = checkingOptions; // This is done at the caller level

            // debugLog("checkBookPackages() is returning", checkBookPackagesResult.successList.length.toLocaleString(), "success message(s) and", checkBookPackagesResult.noticeList.length.toLocaleString(), "notice(s)");
            checkBookPackagesResult.elapsedSeconds = (new Date() - startTime) / 1000; // seconds
            return _context.abrupt("return", checkBookPackagesResult);case 58:case "end":return _context.stop();}}}, _callee, null, [[7, 42, 45, 48], [15, 19]]);}));return _checkBookPackages.apply(this, arguments);}
;
// end of checkBookPackages()
//# sourceMappingURL=data:application/json;charset=utf-8;base64,