"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _typeof = require("@babel/runtime/helpers/typeof");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));var _react = _interopRequireWildcard(require("react"));

var books = _interopRequireWildcard(require("../../core/books/books"));
var _core = require("../../core");
var _checkBookPackages = require("../book-packages-check/checkBookPackages");
var _noticeProcessingFunctions = require("../notice-processing-functions");
var _RenderProcessedResults = require("../RenderProcessedResults");

var _utilities = require("../../core/utilities");function _getRequireWildcardCache(nodeInterop) {if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {return nodeInterop ? cacheNodeInterop : cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj, nodeInterop) {if (!nodeInterop && obj && obj.__esModule) {return obj;}if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}function _createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}


// const ALL_BPS_VALIDATOR_VERSION_STRING = '0.3.8';

var OLD_TESTAMENT_BOOK_CODES = 'GEN,EXO,LEV,NUM,DEU,JOS,JDG,RUT,1SA,2SA,1KI,2KI,1CH,2CH,EZR,NEH,EST,JOB,PSA,PRO,ECC,SNG,ISA,JER,LAM,EZK,DAN,HOS,JOL,AMO,OBA,JON,MIC,NAM,HAB,ZEP,HAG,ZEC,MAL';
var NEW_TESTAMENT_BOOK_CODES = 'MAT,MRK,LUK,JHN,ACT,ROM,1CO,2CO,GAL,EPH,PHP,COL,1TH,2TH,1TI,2TI,TIT,PHM,HEB,JAS,1PE,2PE,1JN,2JN,3JN,JUD,REV';


function AllBookPackagesCheck( /*username, languageCode, bookIDs,*/props) {
  // Check a single Bible book across many repositories
  var _useState = (0, _react.useState)("Waiting-CheckAllBookPackages"),_useState2 = (0, _slicedToArray2.default)(_useState, 2),result = _useState2[0],setResultValue = _useState2[1];

  // debugLog(`I'm here in AllBookPackagesCheckBookPackagesCheck v${ALL_BPS_VALIDATOR_VERSION_STRING}`);
  // consoleLogObject("props", props);
  // consoleLogObject("props.classes", props.classes);

  var username = props.username;
  // debugLog(`username='${username}'`);
  var languageCode = props.languageCode;
  // debugLog(`languageCode='${languageCode}'`);
  var testament = props.testament;
  // debugLog(`testament='${testament}'`);
  var includeOBS = props.includeOBS;
  // debugLog(`includeOBS='${includeOBS}'`);
  var dataSet = props.dataSet;
  // debugLog(`dataSet='${dataSet}'`);
  var branch = props.branch;
  // debugLog(`branch='${branch}'`);

  // Enter a string containing UPPERCASE USFM book identifiers separated only by commas
  //  and can also include OBS (for Open Bible Stories)
  var bookIDsString = '';
  var haveOT = false,haveNT = false;
  if (testament.toUpperCase() === 'OT' || testament.toUpperCase() === 'OLD') {
    bookIDsString = OLD_TESTAMENT_BOOK_CODES;
    haveOT = true;
  } else if (testament.toUpperCase() === 'NT' || testament.toUpperCase() === 'NEW') {
    bookIDsString = NEW_TESTAMENT_BOOK_CODES;
    haveNT = true;
  } else if (testament.toUpperCase() === 'ALL' || testament.toUpperCase() === 'BOTH') {
    bookIDsString = "".concat(OLD_TESTAMENT_BOOK_CODES, ",").concat(NEW_TESTAMENT_BOOK_CODES);
    haveOT = true;haveNT = true;
  } else
  setResultValue( /*#__PURE__*/_react.default.createElement("p", { style: { color: 'red' } }, "No testament selected"));
  if (includeOBS.toUpperCase() === 'Y' || includeOBS.toUpperCase() === 'YES')
  bookIDsString += ',OBS';

  var bookIDList = [];
  var bookIDInvalid;var _iterator = _createForOfIteratorHelper(
  bookIDsString.split(',')),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var bookID = _step.value;
      bookID = bookID.trim();
      if (!books.isValidBookID(bookID) && bookID !== 'OBS') {
        bookIDInvalid = bookID;
      }
      bookIDList.push(bookID);
    }
    // TODO: I don't understand why this command gets executed multiple times!!!
  } catch (err) {_iterator.e(err);} finally {_iterator.f();}(0, _utilities.userLog)("AllBookPackagesCheck bookIDList (".concat(bookIDList.length, ") = ").concat(bookIDList.join(', ')));

  var checkingOptions = { // Uncomment any of these to test them
    // excerptLength: 25,
    suppressNoticeDisablingFlag: true // Leave this one as true (otherwise demo checks are less efficient)
  };
  // Or this allows the parameters to be specified as a BookPackagesCheck property
  if (props.excerptLength) checkingOptions.excerptLength = (0, _core.ourParseInt)(props.excerptLength);
  if (props.cutoffPriorityLevel) checkingOptions.cutoffPriorityLevel = (0, _core.ourParseInt)(props.cutoffPriorityLevel);

  (0, _react.useEffect)(function () {
    // debugLog("BookPackagesCheck.useEffect() called with ", JSON.stringify(props));

    // Use an IIFE (Immediately Invoked Function Expression)
    //  e.g., see https://medium.com/javascript-in-plain-english/https-medium-com-javascript-in-plain-english-stop-feeling-iffy-about-using-an-iife-7b0292aba174
    (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {var repoPreloadList, obsRepoPreloadList, successFlag, rawABPsResults, processOptions, displayType,



















































































      renderSummary, processedResults, _processedResults, _processedResults2;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:renderSummary = function _renderSummary(processedResults) {
                return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/
                _react.default.createElement("p", null, "Checked ", /*#__PURE__*/_react.default.createElement("b", null, username, " ", languageCode, " ", bookIDList.join(', ')), " (from ", /*#__PURE__*/_react.default.createElement("i", null, branch === undefined ? 'DEFAULT' : branch), " branches)"), /*#__PURE__*/
                _react.default.createElement(_RenderProcessedResults.RenderCheckedFilesList, { username: username, results: processedResults }), /*#__PURE__*/
                _react.default.createElement(_RenderProcessedResults.RenderTotals, { rawNoticeListLength: rawABPsResults.noticeList.length, results: processedResults }));


              };if (!(!props.wait || props.wait !== 'N')) {_context.next = 4;break;}setResultValue( /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement("span", { style: { color: 'blue' } }, "Waiting for user\u2026"), " (Adjust settings below as necessary and then set ", /*#__PURE__*/_react.default.createElement("b", null, "wait='N'"), " to start)"));return _context.abrupt("return");case 4:if (!(props.reloadAllFilesFirst && props.reloadAllFilesFirst.slice(0).toUpperCase() === 'Y')) {_context.next = 11;break;}(0, _utilities.userLog)("Clearing cache before running all book packages checkâ€¦");setResultValue( /*#__PURE__*/_react.default.createElement("p", { style: { color: 'orange' } }, "Clearing cache before running all book packages check\u2026"));_context.next = 9;return (0, _core.clearCaches)();case 9:_context.next = 13;break;case 11:_context.next = 13;return (0, _core.clearCheckedArticleCache)();case 13: // otherwise we wouldn't see any of the warnings again from checking these
              // Load whole repos, especially if we are going to check files in manifests
              repoPreloadList = ['TWL', 'LT', 'ST', 'TN', 'TA', 'TW', 'TQ']; // for DEFAULT
              if (dataSet === 'OLD') repoPreloadList = ['TWL', 'LT', 'ST', 'TN', 'TA', 'TW', 'TQ'];else if (dataSet === 'NEW') repoPreloadList = ['TWL', 'LT', 'ST', 'TN2', 'TA', 'TW', 'TQ2'];else if (dataSet === 'BOTH') repoPreloadList = ['TWL', 'LT', 'ST', 'TN', 'TN2', 'TA', 'TW', 'TQ', 'TQ2'];if (haveNT) repoPreloadList.unshift('UGNT');if (haveOT) repoPreloadList.unshift('UHB');if (!checkingOptions.disableAllLinkFetchingFlag) {repoPreloadList.push('TW');repoPreloadList.push('TA');}if (bookIDList.includes('OBS')) {obsRepoPreloadList = ['OBS', 'OBS-TWL', 'OBS-TN2', 'OBS-TQ2', 'OBS-SN2', 'OBS-SQ2']; // for DEFAULT
                if (dataSet === 'OLD') obsRepoPreloadList = ['OBS', 'OBS-TWL', 'OBS-TN', 'OBS-TQ', 'OBS-SN', 'OBS-SQ'];else if (dataSet === 'NEW') obsRepoPreloadList = ['OBS', 'OBS-TWL', 'OBS-TN2', 'OBS-TQ2', 'OBS-SN', 'OBS-SQ'];else if (dataSet === 'BOTH') obsRepoPreloadList = ['OBS', 'OBS-TWL', 'OBS-TN', 'OBS-TN2', 'OBS-TQ', 'OBS-TQ2', 'OBS-SN', 'OBS-SN', 'OBS-SN2', 'OBS-SQ2'];repoPreloadList.push.apply(repoPreloadList, obsRepoPreloadList);}setResultValue( /*#__PURE__*/_react.default.createElement("p", { style: { color: 'magenta' } }, "Preloading ", repoPreloadList.length, " repos for ", /*#__PURE__*/_react.default.createElement("i", null, username), " ", languageCode, " ready for all book packages check\u2026"));_context.next = 22;return (0, _core.preloadReposIfNecessary)(username, languageCode, bookIDList, branch, repoPreloadList);case 22:successFlag = _context.sent;if (!successFlag) (0, _utilities.userLog)("AllBookPackagesCheck error: Failed to pre-load all repos"); // Display our "waiting" message
              setResultValue( /*#__PURE__*/_react.default.createElement("p", { style: { color: 'magenta' } }, "Checking ", /*#__PURE__*/_react.default.createElement("i", null, username), " ", languageCode, " ", /*#__PURE__*/_react.default.createElement("b", null, bookIDList.join(', ')), " book packages\u2026"));rawABPsResults = {};if (!bookIDList.length) {_context.next = 30;break;}_context.next = 29;return (0, _checkBookPackages.checkBookPackages)(username, languageCode, bookIDList, setResultValue, checkingOptions);case 29:rawABPsResults = _context.sent;case 30: // Add some extra fields to our rawCBPsResults object in case we need this information again later
              rawABPsResults.checkType = 'AllBookPackages';rawABPsResults.username = username;rawABPsResults.languageCode = languageCode;rawABPsResults.bookIDs = bookIDsString;rawABPsResults.bookIDList = bookIDList;rawABPsResults.checkedOptions = checkingOptions; // debugLog("Here with CBPs rawCBPsResults", typeof rawCBPsResults);
              // Now do our final handling of the result -- we have some options available
              processOptions = {// Uncomment any of these to test them
                // 'maximumSimilarMessages': 4, // default is 3 -- 0 means donâ€™t suppress
                // 'errorPriorityLevel': 800, // default is 700
                // 'cutoffPriorityLevel': 100, // default is 0
                // 'sortBy': 'ByRepo', // default is 'ByPriority', also have 'AsFound'
                // 'ignorePriorityNumberList': [123, 202], // default is []
              }; // Or this allows the parameters to be specified as a BookPackagesCheck property
              if (props.maximumSimilarMessages) processOptions.maximumSimilarMessages = (0, _core.ourParseInt)(props.maximumSimilarMessages);if (props.errorPriorityLevel) processOptions.errorPriorityLevel = (0, _core.ourParseInt)(props.errorPriorityLevel); // if (props.cutoffPriorityLevel) processOptions.cutoffPriorityLevel = ourParseInt(props.cutoffPriorityLevel);
              if (props.sortBy) processOptions.sortBy = props.sortBy; // if (props.ignorePriorityNumberList) processOptions.ignorePriorityNumberList = props.ignorePriorityNumberList;
              displayType = 'ErrorsWarnings'; // default
              if (props.displayType) displayType = props.displayType;if (displayType === 'ErrorsWarnings') {processedResults = (0, _noticeProcessingFunctions.processNoticesToErrorsWarnings)(rawABPsResults, processOptions); //       userLog(`AllBookPackagesCheck got back processedResults with ${processedResults.successList.length.toLocaleString()} success message(s), ${processedResults.errorList.length.toLocaleString()} error(s) and ${processedResults.warningList.length.toLocaleString()} warning(s)
                // numIgnoredNotices=${processedResults.numIgnoredNotices.toLocaleString()} numHiddenErrors=${processedResults.numHiddenErrors.toLocaleString()} numHiddenWarnings=${processedResults.numHiddenWarnings.toLocaleString()}`);
                // debugLog("Here now in rendering bit!");
                if (processedResults.errorList.length || processedResults.warningList.length) setResultValue( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, renderSummary(processedResults), /*#__PURE__*/_react.default.createElement(_RenderProcessedResults.RenderSuccessesErrorsWarnings, { results: processedResults })));else // no errors or warnings
                  setResultValue( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, renderSummary(processedResults), /*#__PURE__*/_react.default.createElement(_RenderProcessedResults.RenderSuccessesErrorsWarnings, { results: processedResults })));} else if (displayType === 'SevereMediumLow') {_processedResults = (0, _noticeProcessingFunctions.processNoticesToSevereMediumLow)(rawABPsResults, processOptions); //                 userLog(`AllBookPackagesCheck got processed results with ${processedResults.successList.length.toLocaleString()} success message(s), ${processedResults.errorList.length.toLocaleString()} error(s) and ${processedResults.warningList.length.toLocaleString()} warning(s)
                //   numIgnoredNotices=${processedResults.numIgnoredNotices.toLocaleString()} numHiddenErrors=${processedResults.numHiddenErrors.toLocaleString()} numHiddenWarnings=${processedResults.numHiddenWarnings.toLocaleString()}`);
                if (_processedResults.severeList.length || _processedResults.mediumList.length || _processedResults.lowList.length)
                setResultValue( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null,
                renderSummary(_processedResults), /*#__PURE__*/
                _react.default.createElement(_RenderProcessedResults.RenderSuccessesSevereMediumLow, { results: _processedResults })));else

                  // no severe, medium, or low notices
                  setResultValue( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null,
                  renderSummary(_processedResults), /*#__PURE__*/
                  _react.default.createElement(_RenderProcessedResults.RenderSuccessesSevereMediumLow, { results: _processedResults })));

              } else if (displayType === 'SingleList') {
                _processedResults2 = (0, _noticeProcessingFunctions.processNoticesToSingleList)(rawABPsResults, processOptions);
                //       userLog(`AllBookPackagesCheck got processed results with ${processedResults.successList.length.toLocaleString()} success message(s) and ${processedResults.warningList.length.toLocaleString()} notice(s)
                // numIgnoredNotices=${processedResults.numIgnoredNotices.toLocaleString()} numHiddenWarnings=${processedResults.numHiddenWarnings.toLocaleString()}`);

                if (_processedResults2.warningList.length)
                setResultValue( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null,
                renderSummary(_processedResults2), /*#__PURE__*/
                _react.default.createElement(_RenderProcessedResults.RenderSuccessesNoticesGradient, { results: _processedResults2 })));else

                  // no warnings
                  setResultValue( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null,
                  renderSummary(_processedResults2), /*#__PURE__*/
                  _react.default.createElement(_RenderProcessedResults.RenderSuccessesNoticesGradient, { results: _processedResults2 })));

              } else setResultValue( /*#__PURE__*/_react.default.createElement("b", { style: { color: 'red' } }, "Invalid displayType='", displayType, "'"));

              // debugLog("Finished rendering bit.");
            case 43:case "end":return _context.stop();}}}, _callee);}))(); // end of async part in unnamedFunction
    // Doesnâ€™t work if we add this to next line: bookIDList,bookIDs,username,branch,checkingOptions,languageCode,props
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [JSON.stringify(bookIDList), bookIDsString, branch, JSON.stringify(checkingOptions), languageCode, JSON.stringify(props), username]); // end of useEffect part

  if (bookIDInvalid) {
    return /*#__PURE__*/_react.default.createElement("p", null, "Please enter only valid USFM book identifiers separated by commas. ('", bookIDInvalid, "' is not valid.)");
  }

  // {/* <div className={classes.root}> */}
  return /*#__PURE__*/(
    _react.default.createElement("div", { className: "whatGoesHere" },
    result));


}

// BookPackagesCheck.propTypes = {
//   /** @ignore */
//   username: PropTypes.object.isRequired,
//   /** @ignore */
//   languageCode: PropTypes.object.isRequired,
//   bookIDs: PropTypes.object.isRequired,
//   props: PropTypes.object,
// };

// const styles = theme => ({
//   root: {
//   },
// });
var _default =
AllBookPackagesCheck;exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,