"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _typeof = require("@babel/runtime/helpers/typeof");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));var _react = _interopRequireWildcard(require("react"));
var _styles = require("@material-ui/core/styles");
var _noticeProcessingFunctions = require("../notice-processing-functions");
var _RenderProcessedResults = require("../RenderProcessedResults");
var _core = require("../../core");
var _checkRepo = require("./checkRepo");

var _utilities = require("../../core/utilities");function _getRequireWildcardCache(nodeInterop) {if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {return nodeInterop ? cacheNodeInterop : cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj, nodeInterop) {if (!nodeInterop && obj && obj.__esModule) {return obj;}if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;} // eslint-disable-next-line no-unused-vars


// const REPO_VALIDATOR_VERSION_STRING = '0.2.5';


function RepoCheck( /*username, languageCode,*/props) {
  /*
  Check an entire repository
   Loads the zip file and the repo tree
      and then checks all the individual files
  */


  // debugLog(`I'm here in RepoCheck v${REPO_VALIDATOR_VERSION_STRING}`);
  // consoleLogObject("props", props);
  // consoleLogObject("props.classes", props.classes);

  var username = props.username;
  // debugLog(`username='${username}'`);
  var repoName = props.repoName;
  // debugLog(`repoName='${repoName}'`);
  var branchOrRelease = props.branchOrRelease;
  // debugLog(`branch='${branch}'`);
  if (branchOrRelease === undefined) branchOrRelease = 'master';

  var checkingOptions = { // Uncomment any of these to test them
    // excerptLength: 25,
    suppressNoticeDisablingFlag: true // Leave this one as true (otherwise demo checks are less efficient)
  };
  // NOTE: I removed this again as it didn’t really seem to make sense to enable it here
  //          Also, I don’t think the results were getting returned correctly yet
  // if (repoName && repoName.endsWith('_tn')) {
  //     // TODO: Should the user be able to turn this off and on ????
  //     checkingOptions.disableLinkedTAArticlesCheckFlag = false;
  //     checkingOptions.disableLinkedTWArticlesCheckFlag = false;
  // }
  // Or this allows the parameters to be specified as a RepoCheck property
  if (props.excerptLength) checkingOptions.excerptLength = (0, _core.ourParseInt)(props.excerptLength);
  if (props.cutoffPriorityLevel) checkingOptions.cutoffPriorityLevel = (0, _core.ourParseInt)(props.cutoffPriorityLevel);


  var _useState = (0, _react.useState)("Waiting-checkRepo"),_useState2 = (0, _slicedToArray2.default)(_useState, 2),result = _useState2[0],setResultValue = _useState2[1];
  (0, _react.useEffect)(function () {
    // debugLog("RepoCheck.useEffect() called with ", JSON.stringify(props));

    // Use an IIFE (Immediately Invoked Function Expression)
    //  e.g., see https://medium.com/javascript-in-plain-english/https-medium-com-javascript-in-plain-english-stop-feeling-iffy-about-using-an-iife-7b0292aba174
    (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {var _repoName$split, _repoName$split2, languageCode, repoCode, repoPreloadList, successFlag, renderSummary, rawCRResults, processOptions, displayType, processedResults, _processedResults, _processedResults2;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:if (!(




              !props.wait || props.wait !== 'N')) {_context.next = 3;break;}
              setResultValue( /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement("span", { style: { color: 'blue' } }, "Waiting for user\u2026"), " (Adjust settings below as necessary and then set ", /*#__PURE__*/_react.default.createElement("b", null, "wait='N'"), " to start)"));return _context.abrupt("return");case 3:if (



              username) {_context.next = 6;break;}
              setResultValue( /*#__PURE__*/_react.default.createElement("p", { style: { color: 'red' } }, "No ", /*#__PURE__*/_react.default.createElement("b", null, "username"), " set!"));return _context.abrupt("return");case 6:if (


              repoName) {_context.next = 9;break;}
              setResultValue( /*#__PURE__*/_react.default.createElement("p", { style: { color: 'red' } }, "No ", /*#__PURE__*/_react.default.createElement("b", null, "repoName"), " set!"));return _context.abrupt("return");case 9:if (!(



              props.reloadAllFilesFirst && props.reloadAllFilesFirst.slice(0).toUpperCase() === 'Y')) {_context.next = 16;break;}
              (0, _utilities.userLog)("Clearing cache before running respository check…");
              setResultValue( /*#__PURE__*/_react.default.createElement("p", { style: { color: 'orange' } }, "Clearing cache before running repository check\u2026"));_context.next = 14;return (
                (0, _core.clearCaches)());case 14:_context.next = 18;break;case 16:_context.next = 18;return (

                (0, _core.clearCheckedArticleCache)());case 18: // otherwise we wouldn't see any of the warnings again from checking these
              _repoName$split =
              repoName.split('_'), _repoName$split2 = (0, _slicedToArray2.default)(_repoName$split, 2), languageCode = _repoName$split2[0], repoCode = _repoName$split2[1];
              repoCode = repoCode.toUpperCase();
              if (repoCode === 'TN2') repoCode = 'TN';else
              if (repoCode === 'TQ2') repoCode = 'TQ';
              // debugLog(`RepoCheck languageCode='${languageCode}' repoCode='${repoCode}'`);

              // Load whole repos, especially if we are going to check files in manifests
              // NOTE: We make TWO calls to preloadReposIfNecessary()
              //          because the branchOrRelease only applies to the repo being checked
              //          for all other repos, we just use `master`
              repoPreloadList = repoCode === 'TW' ? [] : ['TW'];
              if (repoCode !== 'UHB' && repoCode !== 'UGNT' && repoCode !== 'TA')
              repoPreloadList.push('TA'); // Original languages only have TW links
              // if (repoCode !== 'TA' && repoCode !== 'TW') repoPreloadList.push(repoCode);
              if (repoCode.startsWith('OBS-') || repoCode === 'TWL') {repoPreloadList.unshift('UGNT');repoPreloadList.unshift('UHB');repoPreloadList.push('OBS');}
              setResultValue( /*#__PURE__*/_react.default.createElement("p", { style: { color: 'magenta' } }, "Preloading ", repoCode, " and ", repoPreloadList.length, " repos for ", /*#__PURE__*/_react.default.createElement("i", null, username), " ", languageCode, " ready for ", repoName, " repo check\u2026"));
              (0, _utilities.logicAssert)(repoPreloadList.indexOf(repoCode) === -1);_context.next = 28;return (
                (0, _core.preloadReposIfNecessary)(username, languageCode, [], branchOrRelease, [repoCode]));case 28:_context.t0 = _context.sent;if (!_context.t0) {_context.next = 31;break;}_context.t0 =
              (0, _core.preloadReposIfNecessary)(username, languageCode, [], 'master', repoPreloadList);case 31:successFlag = _context.t0;
              if (!successFlag)
              console.error("RepoCheck error: Failed to pre-load all repos");

              // Display our "waiting" message
              setResultValue( /*#__PURE__*/_react.default.createElement("p", { style: { color: 'magenta' } }, "Checking ", /*#__PURE__*/_react.default.createElement("b", null, repoName), " repo\u2026"));

              // Put all this in a try/catch block coz otherwise it’s difficult to debug/view errors
              _context.prev = 34;








































              renderSummary = function renderSummary(processedResults) {
                var repoLink = branchOrRelease === undefined ? "https://git.door43.org/".concat(username, "/").concat(repoName, "/") : "https://git.door43.org/".concat(username, "/").concat(repoName, "/src/branch/").concat(branchOrRelease, "/");
                return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/
                _react.default.createElement("p", null, "Checked ", /*#__PURE__*/_react.default.createElement("b", null, username, " ", repoName), " (from ", /*#__PURE__*/_react.default.createElement("i", null, branchOrRelease === undefined ? 'DEFAULT' : branchOrRelease), " ", /*#__PURE__*/_react.default.createElement("a", { rel: "noopener noreferrer", target: "_blank", href: repoLink }, "branch"), ")"), /*#__PURE__*/
                _react.default.createElement(_RenderProcessedResults.RenderCheckedFilesList, { username: username, results: processedResults }), /*#__PURE__*/
                _react.default.createElement(_RenderProcessedResults.RenderTotals, { rawNoticeListLength: rawCRResults.noticeList.length, results: processedResults }));


              };rawCRResults = {};_context.prev = 37;_context.next = 40;return (0, _checkRepo.checkRepo)(username, repoName, branchOrRelease, "", setResultValue, checkingOptions);case 40:rawCRResults = _context.sent;_context.next = 47;break;case 43:_context.prev = 43;_context.t1 = _context["catch"](37);rawCRResults = { successList: [], noticeList: [] };rawCRResults.noticeList.push({ priority: 999, message: "checkRepo function FAILED", repoName: repoName, excerpt: _context.t1, location: repoName }); // debugLog("RepoCheck trace is", checkRepoError.trace);
            case 47: // debugLog("checkRepo() returned", typeof rawCRResults); //, JSON.stringify(rawCRResults));
              // Add some extra fields to our rawCRResults object in case we need this information again later
              rawCRResults.checkType = 'Repo';rawCRResults.username = username;rawCRResults.languageCode = languageCode;rawCRResults.checkedOptions = checkingOptions; // debugLog("Here with RC rawCRResults", typeof rawCRResults);
              // Now do our final handling of the result -- we have some options available
              processOptions = {// Uncomment any of these to test them
                // 'maximumSimilarMessages': 4, // default is 3 -- 0 means don’t suppress
                // 'errorPriorityLevel': 800, // default is 700
                // 'cutoffPriorityLevel': 100, // default is 0
                // 'sortBy': 'ByRepo', // default is 'ByPriority', also have 'AsFound'
                // 'ignorePriorityNumberList': [123, 202], // default is []
              }; // Or this allows the parameters to be specified as a RepoCheck property
              if (props.maximumSimilarMessages) processOptions.maximumSimilarMessages = (0, _core.ourParseInt)(props.maximumSimilarMessages);if (props.errorPriorityLevel) processOptions.errorPriorityLevel = (0, _core.ourParseInt)(props.errorPriorityLevel); // if (props.cutoffPriorityLevel) processOptions.cutoffPriorityLevel = ourParseInt(props.cutoffPriorityLevel);
              if (props.sortBy) processOptions.sortBy = props.sortBy; // if (props.ignorePriorityNumberList) processOptions.ignorePriorityNumberList = props.ignorePriorityNumberList;
              if (props.showDisabledNoticesFlag) processOptions.showDisabledNoticesFlag = props.showDisabledNoticesFlag.toLowerCase() === 'true';displayType = 'ErrorsWarnings'; // default
              if (props.displayType) displayType = props.displayType;if (displayType === 'ErrorsWarnings') {processedResults = (0, _noticeProcessingFunctions.processNoticesToErrorsWarnings)(rawCRResults, processOptions); // displayPropertyNames("RC processedResults", processedResults);
                //             userLog(`RepoCheck got back processedResults with ${processedResults.successList.length.toLocaleString()} success message(s), ${processedResults.errorList.length.toLocaleString()} error(s) and ${processedResults.warningList.length.toLocaleString()} warning(s)
                //   numIgnoredNotices=${processedResults.numIgnoredNotices.toLocaleString()}`, "numHiddenErrors=" + processedResults.numHiddenErrors.toLocaleString(), "numHiddenWarnings=" + processedResults.numHiddenWarnings.toLocaleString());
                // debugLog("Here now in rendering bit!");
                if (processedResults.errorList.length || processedResults.warningList.length) setResultValue( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, renderSummary(processedResults), /*#__PURE__*/_react.default.createElement(_RenderProcessedResults.RenderSuccessesErrorsWarnings, { results: processedResults })));else // no errors or warnings
                  setResultValue( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, renderSummary(processedResults), /*#__PURE__*/_react.default.createElement(_RenderProcessedResults.RenderSuccessesErrorsWarnings, { results: processedResults })));} else if (displayType === 'SevereMediumLow') {
                _processedResults = (0, _noticeProcessingFunctions.processNoticesToSevereMediumLow)(rawCRResults, processOptions);
                //             userLog(`RepoCheck got back processedResults with ${processedResults.successList.length.toLocaleString()} success message(s), ${processedResults.errorList.length.toLocaleString()} error(s) and ${processedResults.warningList.length.toLocaleString()} warning(s)
                //   numIgnoredNotices=${processedResults.numIgnoredNotices.toLocaleString()}`, "numHiddenErrors=" + processedResults.numHiddenErrors.toLocaleString(), "numHiddenWarnings=" + processedResults.numHiddenWarnings.toLocaleString());

                if (_processedResults.severeList.length || _processedResults.mediumList.length || _processedResults.lowList.length)
                setResultValue( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null,
                renderSummary(_processedResults), /*#__PURE__*/
                _react.default.createElement(_RenderProcessedResults.RenderSuccessesSevereMediumLow, { results: _processedResults })));else

                  // no severe, medium, or low notices
                  setResultValue( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null,
                  renderSummary(_processedResults), /*#__PURE__*/
                  _react.default.createElement(_RenderProcessedResults.RenderSuccessesSevereMediumLow, { results: _processedResults })));

              } else if (displayType === 'SingleList') {
                _processedResults2 = (0, _noticeProcessingFunctions.processNoticesToSingleList)(rawCRResults, processOptions);
                // debugLog(`RepoCheck got back processedResults with ${processedResults.successList.length.toLocaleString()} success message(s) and ${processedResults.warningList.length.toLocaleString()} notice(s)
                //   numIgnoredNotices=${processedResults.numIgnoredNotices.toLocaleString()} numHiddenWarnings=${processedResults.numHiddenWarnings.toLocaleString()}`);

                if (_processedResults2.warningList.length)
                setResultValue( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null,
                renderSummary(_processedResults2), /*#__PURE__*/
                _react.default.createElement(_RenderProcessedResults.RenderSuccessesNoticesGradient, { results: _processedResults2 })));else

                  // no warnings
                  setResultValue( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null,
                  renderSummary(_processedResults2), /*#__PURE__*/
                  _react.default.createElement(_RenderProcessedResults.RenderSuccessesNoticesGradient, { results: _processedResults2 })));

              } else setResultValue( /*#__PURE__*/_react.default.createElement("b", { style: { color: 'red' } }, "Invalid displayType='", displayType, "'"));

              // debugLog("Finished rendering bit.");
              _context.next = 65;break;case 61:_context.prev = 61;_context.t2 = _context["catch"](34);
              console.error("RepoCheck main code block got error: ".concat(_context.t2.message));
              setResultValue( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/
              _react.default.createElement("p", { style: { color: 'red' } }, "RepoCheck main code block got error: ", /*#__PURE__*/_react.default.createElement("b", null, _context.t2.message))));case 65:case "end":return _context.stop();}}}, _callee, null, [[34, 61], [37, 43]]);}))();


    // end of async part in unnamedFunction
    // Doesn’t work if we add this to next line: languageCode,username,repoName,branch,checkingOptions,props
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // end of useEffect part

  // {/* <div className={classes.root}> */}
  return /*#__PURE__*/(
    _react.default.createElement("div", { className: "Fred" },
    result));


}

// RepoCheck.propTypes = {
//   /** @ignore */
//   username: PropTypes.object.isRequired,
//   /** @ignore */
//   languageCode: PropTypes.object.isRequired,
//   props: PropTypes.object,
// };

var styles = function styles(theme) {return {
    root: {} };};var _default =



(0, _styles.withStyles)(styles)(RepoCheck);exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,