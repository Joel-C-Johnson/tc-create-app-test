"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _typeof = require("@babel/runtime/helpers/typeof");Object.defineProperty(exports, "__esModule", { value: true });exports.checkRepo = checkRepo;var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _react = _interopRequireDefault(require("react"));
var _defaults = require("../../core/defaults");

var books = _interopRequireWildcard(require("../../core/books/books"));
var _checkFileContents = require("../file-check/checkFileContents");
var _getApi = require("../../core/getApi");

var _utilities = require("../../core/utilities");function _getRequireWildcardCache(nodeInterop) {if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {return nodeInterop ? cacheNodeInterop : cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj, nodeInterop) {if (!nodeInterop && obj && obj.__esModule) {return obj;}if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}function _createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {(0, _defineProperty2.default)(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}


// const REPO_VALIDATOR_VERSION_STRING = '0.4.11';


/**
 *
 * @param {string} username
 * @param {string} repoName
 * @param {string} repoBranch
 * @param {string} givenLocation
 * @param {Function} setResultValue
 * @param {Object} checkingOptions
 */function
checkRepo(_x, _x2, _x3, _x4, _x5, _x6) {return _checkRepo.apply(this, arguments);}function _checkRepo() {_checkRepo = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(username, repoName, repoBranch, givenLocation, setResultValue, checkingOptions) {var abortFlag, startTime, _repoName$split, _repoName$split2, languageCode, repoCode, checkRepoResult,














































    addSuccessMessage,




    addNoticePartial,













































    ourCheckRepoFileContents, _ourCheckRepoFileContents, ourLocation, fetchRepositoryZipFile_, zipFetchSucceeded, getFileListFromZip_, pathList, countString, checkedFileCount, checkedFilenames, checkedFilenameExtensions, totalCheckedSize, _iterator, _step, thisFilepath, thisFilename, thisFilenameExtension, bookOrFileCode, ourBookID, bookID, _bookID, getFile_, repoFileContent, details;return _regenerator.default.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:_ourCheckRepoFileContents = function _ourCheckRepoFileCont2() {_ourCheckRepoFileContents = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(bookOrFileCode, cfBookID, filename, fileContent, fileLocation, checkingOptions) {var adjustedLanguageCode, cfcResultObject, _iterator2, _step2, cfcNoticeEntry, newNoticeObject;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:
                        // We assume that checking for compulsory fields is done elsewhere
                        // functionLog(`checkRepo ourCheckRepoFileContents(bk/fC='${bookOrFileCode}', bk='${cfBookID}', fn='${filename}', ${fileContent.length}, ${fileLocation}, ${JSON.stringify(checkingOptions)})â€¦`);

                        // Updates the global list of notices
                        //parameterAssert(bookOrFileCode !== undefined, "ourCheckRepoFileContents: 'bookOrFileCode' parameter should be defined");
                        //parameterAssert(typeof bookOrFileCode === 'string', `ourCheckRepoFileContents: 'bookOrFileCode' parameter should be a string not a '${typeof bookOrFileCode}'`);
                        //parameterAssert(cfBookID !== undefined, "ourCheckRepoFileContents: 'cfBookID' parameter should be defined");
                        //parameterAssert(typeof cfBookID === 'string', `ourCheckRepoFileContents: 'cfBookID' parameter should be a string not a '${typeof cfBookID}'`);
                        if (cfBookID) {
                          //parameterAssert(cfBookID.length === 3, `ourCheckRepoFileContents: 'cfBookID' parameter should be three characters long not ${cfBookID.length}`);
                          //parameterAssert(cfBookID.toUpperCase() === cfBookID, `ourCheckRepoFileContents: 'cfBookID' parameter should be UPPERCASE not '${cfBookID}'`);
                          //parameterAssert(cfBookID === 'OBS' || books.isValidBookID(cfBookID), `ourCheckRepoFileContents: '${cfBookID}' is not a valid USFM book identifier`);
                        }
                        //parameterAssert(filename !== undefined, "ourCheckRepoFileContents: 'filename' parameter should be defined");
                        //parameterAssert(typeof filename === 'string', `ourCheckRepoFileContents: 'filename' parameter should be a string not a '${typeof filename}'`);
                        //parameterAssert(fileContent !== undefined, "ourCheckRepoFileContents: 'fileContent' parameter should be defined");
                        //parameterAssert(typeof fileContent === 'string', `ourCheckRepoFileContents: 'fileContent' parameter should be a string not a '${typeof fileContent}'`);
                        //parameterAssert(fileLocation !== undefined, "ourCheckRepoFileContents: 'fileLocation' parameter should be defined");
                        //parameterAssert(typeof fileLocation === 'string', `ourCheckRepoFileContents: 'fileLocation' parameter should be a string not a '${typeof fileLocation}'`);
                        //parameterAssert(checkingOptions !== undefined, "ourCheckRepoFileContents: 'checkingOptions' parameter should be defined");

                        adjustedLanguageCode = languageCode;
                        if (filename === 'manifest.yaml' || filename === 'LICENSE.md' ||
                        (languageCode === 'el-x-koine' || languageCode === 'hbo') && filename === 'README.md')
                        adjustedLanguageCode = 'en'; // Correct the language for these auxilliary files
                        _context.next = 5;return (0, _checkFileContents.checkFileContents)(username, adjustedLanguageCode, repoCode, repoBranch, filename, fileContent, fileLocation, checkingOptions);case 5:cfcResultObject = _context.sent;
                        // debugLog("checkFileContents() returned", resultObject.successList.length, "success message(s) and", resultObject.noticeList.length, "notice(s)");
                        // for (const successEntry of resultObject.successList)
                        //     userLog("  ", successEntry);

                        // Process noticeList line by line,  appending the bookOrFileCode as an extra field as we go
                        _iterator2 = _createForOfIteratorHelper(cfcResultObject.noticeList);try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {cfcNoticeEntry = _step2.value;
                            // We add the bookOrFileCode as an extra value (unless itâ€™s already there from a TA or TW check)
                            if (cfcNoticeEntry.extra)
                            checkRepoResult.noticeList.push(cfcNoticeEntry); // Add this notice directly
                            else {
                                // addNoticePartial({ ...cfcNoticeEntry, bookID: cfBookID, extra: bookOrFileCode.toUpperCase() });
                                newNoticeObject = _objectSpread(_objectSpread({}, cfcNoticeEntry), {}, { bookID: cfBookID });
                                if (bookOrFileCode !== '01' // UGL (from content/G04230/01.md)
                                && (bookOrFileCode[0] !== 'H' || bookOrFileCode.length !== 5)) // UHAL, e.g., H0612 from content/H0612.md
                                  newNoticeObject.extra = bookOrFileCode.toUpperCase();
                                addNoticePartial(newNoticeObject);
                              }}
                          /* Removing the following code as itâ€™s unneeded
                          //  as we donâ€™t enable TA or TW checking per repo anyway
                          // Anyway, not sure that the following code was working yet
                          if (repoName.endsWith('_tn')) {
                            // The following is needed coz we might be checking the linked TA and/or TW articles from TN2 TSV files
                            userLog(`cfcResultObject JSON.stringify({ ...cfcResultObject, noticeList: "deleted" })`);
                            if (cfcResultObject.checkedFileCount && cfcResultObject.checkedFileCount > 0) {
                              checkRepoResult.checkedFileCount += cfcResultObject.checkedFileCount;
                              addSuccessMessage(`Checked ${cfcResultObject.checkedFileCount} linked TA/TW articles`);
                            }
                            if (cfcResultObject.checkedFilesizes && cfcResultObject.checkedFilesizes > 0) checkRepoResult.totalCheckedSize += cfcResultObject.checkedFilesizes;
                            if (cfcResultObject.checkedRepoNames && cfcResultObject.checkedRepoNames.length > 0)
                              for (const checkedRepoName of cfcResultObject.checkedRepoNames)
                                try { if (checkRepoResult.checkedRepoNames.indexOf(checkedRepoName) < 0) checkRepoResult.checkedRepoNames.push(checkedRepoName); }
                                catch { checkRepoResult.checkedRepoNames = [checkedRepoName]; }
                            if (cfcResultObject.checkedFilenameExtensions && cfcResultObject.checkedFilenameExtensions.length > 0)
                              for (const checkedFilenameExtension of cfcResultObject.checkedFilenameExtensions)
                                checkRepoResult.checkedFilenameExtensions.add(checkedFilenameExtension);
                          }
                          */} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}case 8:case "end":return _context.stop();}}}, _callee);}));return _ourCheckRepoFileContents.apply(this, arguments);};ourCheckRepoFileContents = function _ourCheckRepoFileCont(_x7, _x8, _x9, _x10, _x11, _x12) {return _ourCheckRepoFileContents.apply(this, arguments);};addNoticePartial = function _addNoticePartial(noticeObject) {// Adds the notices to the result that we will later return
              // bookID is a three-character UPPERCASE USFM book identifier or 'OBS'.
              // Note that bookID,C,V might all be empty strings (as some repos donâ€™t have BCV)
              // functionLog(`checkRepo addNoticePartial: ${noticeObject.priority}:${noticeObject.message} bookID=${noticeObject.bookID} ${noticeObject.C}:${noticeObject.V} ${noticeObject.filename}:${noticeObject.lineNumber} ${noticeObject.characterIndex > 0 ? ` (at character ${noticeObject.characterIndex})` : ""}${noticeObject.excerpt ? ` ${noticeObject.excerpt}` : ""}${noticeObject.location}`);
              //parameterAssert(noticeObject.priority !== undefined, "cR addNoticePartial: 'priority' parameter should be defined");
              //parameterAssert(typeof noticeObject.priority === 'number', `cR addNoticePartial: 'priority' parameter should be a number not a '${typeof noticeObject.priority}'`);
              //parameterAssert(noticeObject.message !== undefined, "cR addNoticePartial: 'message' parameter should be defined");
              //parameterAssert(typeof noticeObject.message === 'string', `cR addNoticePartial: 'message' parameter should be a string not a '${typeof noticeObject.message}'`);
              // //parameterAssert(bookID !== undefined, "cR addNoticePartial: 'bookID' parameter should be defined");
              if (noticeObject.bookID) {//parameterAssert(typeof noticeObject.bookID === 'string', `cR addNoticePartial: 'bookID' parameter should be a string not a '${typeof noticeObject.bookID}'`);
                //parameterAssert(noticeObject.bookID.length === 3, `cR addNoticePartial: 'bookID' parameter should be three characters long not ${noticeObject.bookID.length}`);
                //parameterAssert(noticeObject.bookID === 'OBS' || books.isOptionalValidBookID(noticeObject.bookID), `cR addNoticePartial: '${noticeObject.bookID}' is not a valid USFM book identifier`);
              } // //parameterAssert(C !== undefined, "cR addNoticePartial: 'C' parameter should be defined");
              if (noticeObject.C) {//parameterAssert(typeof noticeObject.C === 'string', `cR addNoticePartial: 'C' parameter should be a string not a '${typeof noticeObject.C}'`);
              } // //parameterAssert(V !== undefined, "cR addNoticePartial: 'V' parameter should be defined");
              if (noticeObject.V) {//parameterAssert(typeof noticeObject.V === 'string', `cR addNoticePartial: 'V' parameter should be a string not a '${typeof noticeObject.V}'`);
              } // //parameterAssert(characterIndex !== undefined, "cR addNoticePartial: 'characterIndex' parameter should be defined");
              if (noticeObject.characterIndex) {//parameterAssert(typeof noticeObject.characterIndex === 'number', `cR addNoticePartial: 'characterIndex' parameter should be a number not a '${typeof noticeObject.characterIndex}'`);
              } // //parameterAssert(excerpt !== undefined, "cR addNoticePartial: 'excerpt' parameter should be defined");
              if (noticeObject.excerpt) {//parameterAssert(typeof noticeObject.excerpt === 'string', `cR addNoticePartial: 'excerpt' parameter should be a string not a '${typeof noticeObject.excerpt}'`);
              } //parameterAssert(noticeObject.location !== undefined, "cR addNoticePartial: 'location' parameter should be defined");
              //parameterAssert(typeof noticeObject.location === 'string', `cR addNoticePartial: 'location' parameter should be a string not a '${typeof noticeObject.location}'`);
              // //parameterAssert(noticeObject.extra !== undefined, "cR addNoticePartial: 'extra' parameter should be defined");
              //parameterAssert(typeof noticeObject.extra === 'string', `cR addNoticePartial: 'extra' parameter should be a string not a '${typeof noticeObject.extra}'`);
              if (noticeObject.debugChain) noticeObject.debugChain = "checkRepo ".concat(noticeObject.debugChain); // Add in the repoName from the outer scope
              checkRepoResult.noticeList.push(_objectSpread(_objectSpread({}, noticeObject), {}, { username: username, repoCode: repoCode, repoName: repoName }));};addSuccessMessage = function _addSuccessMessage(successString) {// Adds the message to the result that we will later return
              // functionLog(`checkRepo success: ${successString}`);
              checkRepoResult.successList.push(successString);}; /*
            It returns an object containing:
                successList: an array of strings to tell the use exactly what has been checked
                noticeList: an array of 9 (i.e., with extra bookOrFileCode parameter at end) notice components
            */ // functionLog(`checkRepo(un='${username}', rN='${repoName}', rBr='${repoBranch}', ${givenLocation}, (fn), ${JSON.stringify(checkingOptions)})â€¦`);
            //parameterAssert(username !== undefined, "checkRepo: 'username' parameter should be defined");
            //parameterAssert(typeof username === 'string', `checkRepo: 'username' parameter should be a string not a '${typeof username}'`);
            //parameterAssert(repoName !== undefined, "checkRepo: 'repoName' parameter should be defined");
            //parameterAssert(typeof repoName === 'string', `checkRepo: 'repoName' parameter should be a string not a '${typeof repoName}'`);
            //parameterAssert(repoBranch !== undefined, "checkRepo: 'repoBranch' parameter should be defined");
            //parameterAssert(typeof repoBranch === 'string', `checkRepo: 'repoBranch' parameter should be a string not a '${typeof repoBranch}'`);
            //parameterAssert(givenLocation !== undefined, "checkRepo: 'givenRowLocation' parameter should be defined");
            //parameterAssert(typeof givenLocation === 'string', `checkRepo: 'givenRowLocation' parameter should be a string not a '${typeof givenLocation}'`);
            abortFlag = false;startTime = new Date();_repoName$split = repoName.split('_'), _repoName$split2 = (0, _slicedToArray2.default)(_repoName$split, 2), languageCode = _repoName$split2[0], repoCode = _repoName$split2[1];repoCode = repoCode.toUpperCase(); // debugLog(`checkRepo got languageCode='${languageCode}' repoCode='${repoCode}' repoBranch='${repoBranch}'`);
            if (repoCode === 'TN2') {repoCode = 'TN';if (repoBranch === undefined) repoBranch = 'newFormat';} else if (repoCode === 'TQ2') {repoCode = 'TQ';if (repoBranch === undefined) repoBranch = 'newFormat';} else if (repoCode === 'SN2') {repoCode = 'SN';if (repoBranch === undefined) repoBranch = 'newFormat';} else if (repoCode === 'SQ2') {repoCode = 'SQ';if (repoBranch === undefined) repoBranch = 'newFormat';} else if (repoCode.endsWith('LT')) repoCode = 'LT';else if (repoCode.endsWith('ST')) repoCode = 'ST'; // debugLog(`checkRepo now has languageCode='${languageCode}' repoCode='${repoCode}' repoBranch='${repoBranch}'`);
            (0, _utilities.logicAssert)(_defaults.REPO_CODES_LIST.includes(repoCode), "checkRepo: 'repoCode' parameter should not be '".concat(repoCode, "'"));if (repoBranch === undefined) repoBranch = 'master'; // Ideally we should ask what the default branch is
            checkRepoResult = { successList: [], noticeList: [], checkedFileCount: 0, checkedFileSizes: 0, checkedFilenames: [], checkedFilenameExtensions: [], checkedRepoNames: [] };_context2.next = 14;return (0, _getApi.repositoryExistsOnDoor43)({ username: username, repository: repoName });case 14:if (_context2.sent) {_context2.next = 20;break;}setResultValue( /*#__PURE__*/_react.default.createElement("p", { style: { color: 'red' } }, "No such ", /*#__PURE__*/_react.default.createElement("b", null, username, "/", repoName), " repository!"));console.error("checkRepo ".concat(username, "/").concat(repoName, " doesn\u2019t seem to exist"));addNoticePartial({ priority: 986, message: "Repository doesnâ€™t seem to exist", details: "username=".concat(username), location: givenLocation, extra: repoName });_context2.next = 106;break;case 20:_context2.prev = 20;ourLocation = givenLocation;if (ourLocation && ourLocation[0] !== ' ') ourLocation = " ".concat(ourLocation); // if (ourLocation.indexOf(username) < 0)
            // ourLocation = ` in ${username} ${repoName} ${givenLocation}`
            // Update our "waiting" message
            setResultValue( /*#__PURE__*/_react.default.createElement("p", { style: { color: 'magenta' } }, "Fetching zipped files from ", /*#__PURE__*/_react.default.createElement("b", null, username, "/", repoName), " repository\u2026")); // Letâ€™s fetch the zipped repo since it should be much more efficient than individual fetches
            // functionLog(`checkRepo: fetch zip file for ${repoName}â€¦`);
            fetchRepositoryZipFile_ = checkingOptions && checkingOptions.fetchRepositoryZipFile ? checkingOptions.fetchRepositoryZipFile : _getApi.cachedGetRepositoryZipFile;_context2.next = 27;return fetchRepositoryZipFile_({ username: username, repository: repoName, branch: repoBranch, branchOrRelease: repoBranch });case 27:zipFetchSucceeded = _context2.sent;if (zipFetchSucceeded) {_context2.next = 33;break;}console.error("checkRepo: misfetched zip file for repo with ".concat(zipFetchSucceeded));setResultValue( /*#__PURE__*/_react.default.createElement("p", { style: { color: 'red' } }, "Failed to fetching zipped files from ", /*#__PURE__*/_react.default.createElement("b", null, username, "/", repoName), " repository"));addNoticePartial({ priority: 989, message: "Unable to find/load repository", location: ourLocation });return _context2.abrupt("return", checkRepoResult);case 33: // Now we need to fetch the list of files from the repo
            setResultValue( /*#__PURE__*/_react.default.createElement("p", { style: { color: 'magenta' } }, "Preprocessing file list from ", /*#__PURE__*/_react.default.createElement("b", null, username, "/", repoName), " repository\u2026")); // const pathList = await getFileListFromFetchedTreemaps(username, repoName, branch);
            getFileListFromZip_ = checkingOptions && checkingOptions.getFileListFromZip ? checkingOptions.getFileListFromZip : _getApi.getFileListFromZip;_context2.next = 37;return getFileListFromZip_({ username: username, repository: repoName, branchOrRelease: repoBranch });case 37:pathList = _context2.sent; // debugLog(`Got pathlist (${pathList.length}) = ${pathList}`);
            // So now we want to work through checking all the files in this repo
            // Main loop for checkRepo()
            countString = "".concat(pathList.length.toLocaleString(), " file").concat(pathList.length === 1 ? '' : 's');checkedFileCount = 0, checkedFilenames = [], checkedFilenameExtensions = new Set(), totalCheckedSize = 0;_iterator = _createForOfIteratorHelper(pathList);_context2.prev = 41;_iterator.s();case 43:if ((_step = _iterator.n()).done) {_context2.next = 84;break;}thisFilepath = _step.value;if (!abortFlag) {_context2.next = 47;break;}return _context2.abrupt("break", 84);case 47: // Update our "waiting" message
            setResultValue( /*#__PURE__*/_react.default.createElement("p", { style: { color: 'magenta' } }, "Checking ", /*#__PURE__*/_react.default.createElement("b", null, username, "/", repoName), " repo: checked ", checkedFileCount.toLocaleString(), "/", countString, "\u2026"));

            thisFilename = thisFilepath.split('/').pop();
            // debugLog(`thisFilename=${thisFilename}`);
            thisFilenameExtension = thisFilename.split('.').pop();
            // debugLog(`thisFilenameExtension=${thisFilenameExtension}`);

            // Default to the main filename without the extension
            bookOrFileCode = thisFilename.substring(0, thisFilename.length - thisFilenameExtension.length - 1);
            ourBookID = '';
            if (thisFilenameExtension === 'usfm') {
              // const filenameMain = thisFilename.substring(0, thisFilename.length - 5); // drop .usfm
              // debugLog(`Have USFM filenameMain=${bookOrFileCode}`);
              bookID = bookOrFileCode.substring(bookOrFileCode.length - 3).toUpperCase();
              // debugLog(`Have USFM bookcode=${bookID}`);
              //parameterAssert(books.isValidBookID(bookID), `checkRepo: '${bookID}' is not a valid USFM book identifier (for USFM)`);
              bookOrFileCode = bookID;
              ourBookID = bookID;
            } else
            if (thisFilenameExtension === 'tsv') {
              // debugLog(`Have TSV thisFilename(${thisFilename.length})='${thisFilename}'`);
              // debugLog(`Have TSV bookOrFileCode(${bookOrFileCode.length})='${bookOrFileCode}'`);
              _bookID = void 0;
              // bookOrFileCode could be something like 'en_tn_09-1SA.tsv ' or 'tn_2CO' or 'twl_1CH'
              // bookID = (bookOrFileCode.length === 6 || bookOrFileCode.length === 7) ? bookOrFileCode.substring(0, 3) : bookOrFileCode.slice(-3).toUpperCase();
              _bookID = bookOrFileCode.slice(-3).toUpperCase();
              (0, _utilities.logicAssert)(_bookID !== 'twl' && _bookID !== 'TWL', "Should get a valid bookID here, not '".concat(_bookID, "'"));
              // debugLog(`Have TSV bookcode(${bookID.length})='${bookID}'`);
              if (repoCode === 'TWL' || repoCode === 'SN' || repoCode === 'SQ' || repoCode === 'TN2' || repoCode === 'TQ2') {// new repos allow `OBS`
                //parameterAssert(bookID === 'OBS' || books.isValidBookID(bookID), `checkRepo: '${bookID}' is not a valid USFM book identifier (for TSV)`);
              } else {
                  //parameterAssert(bookID !== 'OBS' && books.isValidBookID(bookID), `checkRepo: '${bookID}' is not a valid USFM book identifier (for TSV)`);
                }
              bookOrFileCode = _bookID;
              ourBookID = _bookID;
            } else
            if (repoName.endsWith('_ta') && thisFilepath.indexOf('/') > 0)
            bookOrFileCode = thisFilepath.split('/')[1];else
            if (repoName.endsWith('_tq') && thisFilepath.indexOf('/') > 0)
            bookOrFileCode = thisFilepath.split('/')[0];

            // debugLog("checkRepo: Try to load", username, repoName, thisFilepath, branch);
            getFile_ = checkingOptions && checkingOptions.getFile ? checkingOptions.getFile : _getApi.cachedGetFile;
            repoFileContent = void 0;_context2.prev = 55;_context2.next = 58;return (

              getFile_({ username: username, repository: repoName, path: thisFilepath, branch: repoBranch }));case 58:repoFileContent = _context2.sent;_context2.next = 74;break;case 61:_context2.prev = 61;_context2.t0 = _context2["catch"](55);


            console.error("checkRepo(".concat(username, ", ").concat(repoName, ", ").concat(repoBranch, ", ").concat(givenLocation, ", (fn), ").concat(JSON.stringify(checkingOptions), ")) failed to load"), thisFilepath, repoBranch, "".concat(_context2.t0));
            details = "username=".concat(username);_context2.next = 67;return (
              (0, _getApi.repositoryExistsOnDoor43)({ username: username, repository: repoName }));case 67:if (_context2.sent) {_context2.next = 71;break;}
            checkRepoResult.noticeList.push({ priority: 997, message: "Repository doesnâ€™t exist", details: details, username: username, repoCode: repoCode, repoName: repoName, location: givenLocation, extra: repoCode });_context2.next = 73;break;case 71:

            // eslint-disable-next-line eqeqeq
            if (_context2.t0 != 'TypeError: repoFileContent is null') details += " error=".concat(_context2.t0);
            addNoticePartial({ priority: 996, message: "Unable to load", details: "username=".concat(username, " error=").concat(_context2.t0), bookID: ourBookID, filename: thisFilename, location: "".concat(givenLocation, " ").concat(thisFilepath), extra: repoName });case 73:return _context2.abrupt("return");case 74:if (!



            repoFileContent) {_context2.next = 82;break;}_context2.next = 77;return (

              ourCheckRepoFileContents(bookOrFileCode, ourBookID,
              // OBS has many files with the same name, so we have to give some of the path as well
              // repoName.endsWith('_obs') ? thisFilepath.replace('content/', '') : thisFilename,
              thisFilenameExtension === 'md' ? thisFilepath.replace('content/', '').replace('bible/', '') : thisFilename,
              repoFileContent, ourLocation, checkingOptions));case 77:
            checkedFileCount += 1;
            checkedFilenames.push(thisFilename);
            checkedFilenameExtensions.add(thisFilenameExtension);
            totalCheckedSize += repoFileContent.length;
            // functionLog(`checkRepo checked ${thisFilename}`);
            if (thisFilenameExtension !== 'md') // There's often far, far too many of these
              addSuccessMessage("Checked ".concat(repoName, " ").concat(bookOrFileCode.toUpperCase(), " file: ").concat(thisFilename));case 82:_context2.next = 43;break;case 84:_context2.next = 89;break;case 86:_context2.prev = 86;_context2.t1 = _context2["catch"](41);_iterator.e(_context2.t1);case 89:_context2.prev = 89;_iterator.f();return _context2.finish(89);case 92:



            // Check that we processed a license and a manifest
            if (checkedFilenames.indexOf('LICENSE.md') < 0)
            addNoticePartial({ priority: 946, message: "Missing LICENSE.md", location: ourLocation, extra: "".concat(repoName, " LICENSE") });
            if (checkedFilenames.indexOf('manifest.yaml') < 0)
            addNoticePartial({ priority: 947, message: "Missing manifest.yaml", location: ourLocation, extra: "".concat(repoName, " MANIFEST") });

            // Add some extra fields to our checkRepoResult object
            //  in case we need this information again later
            checkRepoResult.checkedFileCount += checkedFileCount;
            checkRepoResult.checkedFilenames = checkedFilenames;
            checkRepoResult.checkedFilenameExtensions = [].concat((0, _toConsumableArray2.default)(checkRepoResult.checkedFilenameExtensions), (0, _toConsumableArray2.default)(checkedFilenameExtensions)); // convert Set to Array
            checkRepoResult.checkedFilesizes += totalCheckedSize;
            checkRepoResult.checkedRepoNames.unshift("".concat(username, "/").concat(repoName));
            // checkRepoResult.checkedOptions = checkingOptions; // This is done at the caller level

            addSuccessMessage("Checked ".concat(username, " repo: ").concat(repoName));
            // functionLog(`checkRepo() is returning ${checkRepoResult.successList.length.toLocaleString()} success message(s) and ${checkRepoResult.noticeList.length.toLocaleString()} notice(s)`);
            _context2.next = 106;break;case 102:_context2.prev = 102;_context2.t2 = _context2["catch"](20);
            console.error("checkRepo main code block got error: ".concat(_context2.t2.message));
            setResultValue( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/
            _react.default.createElement("p", { style: { color: 'red' } }, "checkRepo main code block got error: ", /*#__PURE__*/_react.default.createElement("b", null, _context2.t2.message), " with ", _context2.t2.trace)));case 106:




            checkRepoResult.elapsedSeconds = (new Date() - startTime) / 1000; // seconds
            // debugLog(`checkRepo() returning ${JSON.stringify(checkRepoResult)}`);
            return _context2.abrupt("return", checkRepoResult);case 108:case "end":return _context2.stop();}}}, _callee2, null, [[20, 102], [41, 86, 89, 92], [55, 61]]);}));return _checkRepo.apply(this, arguments);}
;
// end of checkRepo()
//# sourceMappingURL=data:application/json;charset=utf-8;base64,