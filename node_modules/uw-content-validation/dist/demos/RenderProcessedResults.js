"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _typeof3 = require("@babel/runtime/helpers/typeof");Object.defineProperty(exports, "__esModule", { value: true });exports.RenderCheckedFilesList = RenderCheckedFilesList;exports.RenderElapsedTime = RenderElapsedTime;exports.RenderTotals = RenderTotals;exports.RenderNumberedLines = RenderNumberedLines;exports.RenderObject = RenderObject;exports.RenderRawResults = RenderRawResults;exports.RenderSuccessesErrorsWarnings = RenderSuccessesErrorsWarnings;exports.RenderSuccessesSevereMediumLow = RenderSuccessesSevereMediumLow;exports.RenderSuccessesNoticesGradient = RenderSuccessesNoticesGradient;var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));var _react = _interopRequireWildcard(require("react"));


var _utilities = require("../core/utilities");


var _materialTable = _interopRequireDefault(require("material-table"));
var _AddBox = _interopRequireDefault(require("@material-ui/icons/AddBox"));
var _ArrowDownward = _interopRequireDefault(require("@material-ui/icons/ArrowDownward"));
var _Check = _interopRequireDefault(require("@material-ui/icons/Check"));
var _ChevronLeft = _interopRequireDefault(require("@material-ui/icons/ChevronLeft"));
var _ChevronRight = _interopRequireDefault(require("@material-ui/icons/ChevronRight"));
var _Clear = _interopRequireDefault(require("@material-ui/icons/Clear"));
var _DeleteOutline = _interopRequireDefault(require("@material-ui/icons/DeleteOutline"));
var _Edit = _interopRequireDefault(require("@material-ui/icons/Edit"));
var _FilterList = _interopRequireDefault(require("@material-ui/icons/FilterList"));
var _FirstPage = _interopRequireDefault(require("@material-ui/icons/FirstPage"));
var _LastPage = _interopRequireDefault(require("@material-ui/icons/LastPage"));
var _Remove = _interopRequireDefault(require("@material-ui/icons/Remove"));
var _SaveAlt = _interopRequireDefault(require("@material-ui/icons/SaveAlt"));
var _Search = _interopRequireDefault(require("@material-ui/icons/Search"));
var _ViewColumn = _interopRequireDefault(require("@material-ui/icons/ViewColumn"));function _getRequireWildcardCache(nodeInterop) {if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {return nodeInterop ? cacheNodeInterop : cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj, nodeInterop) {if (!nodeInterop && obj && obj.__esModule) {return obj;}if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}function _createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}

var tableIcons = {
  Add: /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {return /*#__PURE__*/_react.default.createElement(_AddBox.default, (0, _extends2.default)({}, props, { ref: ref }));}),
  Check: /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {return /*#__PURE__*/_react.default.createElement(_Check.default, (0, _extends2.default)({}, props, { ref: ref }));}),
  Clear: /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {return /*#__PURE__*/_react.default.createElement(_Clear.default, (0, _extends2.default)({}, props, { ref: ref }));}),
  Delete: /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {return /*#__PURE__*/_react.default.createElement(_DeleteOutline.default, (0, _extends2.default)({}, props, { ref: ref }));}),
  DetailPanel: /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {return /*#__PURE__*/_react.default.createElement(_ChevronRight.default, (0, _extends2.default)({}, props, { ref: ref }));}),
  Edit: /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {return /*#__PURE__*/_react.default.createElement(_Edit.default, (0, _extends2.default)({}, props, { ref: ref }));}),
  Export: /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {return /*#__PURE__*/_react.default.createElement(_SaveAlt.default, (0, _extends2.default)({}, props, { ref: ref }));}),
  Filter: /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {return /*#__PURE__*/_react.default.createElement(_FilterList.default, (0, _extends2.default)({}, props, { ref: ref }));}),
  FirstPage: /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {return /*#__PURE__*/_react.default.createElement(_FirstPage.default, (0, _extends2.default)({}, props, { ref: ref }));}),
  LastPage: /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {return /*#__PURE__*/_react.default.createElement(_LastPage.default, (0, _extends2.default)({}, props, { ref: ref }));}),
  NextPage: /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {return /*#__PURE__*/_react.default.createElement(_ChevronRight.default, (0, _extends2.default)({}, props, { ref: ref }));}),
  PreviousPage: /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {return /*#__PURE__*/_react.default.createElement(_ChevronLeft.default, (0, _extends2.default)({}, props, { ref: ref }));}),
  ResetSearch: /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {return /*#__PURE__*/_react.default.createElement(_Clear.default, (0, _extends2.default)({}, props, { ref: ref }));}),
  Search: /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {return /*#__PURE__*/_react.default.createElement(_Search.default, (0, _extends2.default)({}, props, { ref: ref }));}),
  SortArrow: /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {return /*#__PURE__*/_react.default.createElement(_ArrowDownward.default, (0, _extends2.default)({}, props, { ref: ref }));}),
  ThirdStateCheck: /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {return /*#__PURE__*/_react.default.createElement(_Remove.default, (0, _extends2.default)({}, props, { ref: ref }));}),
  ViewColumn: /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {return /*#__PURE__*/_react.default.createElement(_ViewColumn.default, (0, _extends2.default)({}, props, { ref: ref }));}) };



// const RENDER_PROCESSED_RESULTS_VERSION = '0.7.0';


/**
 *
 * @param {Object} param0 with username string and results object
 * @returns a rendered list of files that have been checked
 */
function RenderCheckedFilesList(_ref) {var username = _ref.username,results = _ref.results;
  // Also used in some of the lower-level demo results
  if ((results === null || results === void 0 ? void 0 : results.checkedFileCount) > 0)
  return /*#__PURE__*/_react.default.createElement("p", null, "\xA0\xA0\xA0\xA0Successfully checked ", results.checkedFileCount.toLocaleString(), " file", results.checkedFileCount === 1 ? '' : 's', " from ", results.checkedRepoNames.length.toLocaleString(), " ", /*#__PURE__*/_react.default.createElement("i", null, username), " repo", results.checkedRepoNames.length === 1 ? '' : 's', ": ", results.checkedRepoNames.join(', '), /*#__PURE__*/
  _react.default.createElement("br", null), "\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0including ", results.checkedFilenameExtensions.length, " file type", results.checkedFilenameExtensions.length === 1 ? '' : 's', ": ", results.checkedFilenameExtensions.join(', '), ".");else

  return /*#__PURE__*/_react.default.createElement("p", null, "\xA0\xA0\xA0\xA0No files checked!");
}

/**
 *
 * @param {Object} param0 with elapsedSeconds
 * @returns the elapsed time rendered appropriately for the human reader
 */
function RenderElapsedTime(_ref2) {var elapsedSeconds = _ref2.elapsedSeconds;
  var seconds = Math.round(elapsedSeconds % 60);
  var remainingTime = Math.floor(elapsedSeconds / 60);
  var minutes = Math.round(remainingTime % 60);
  remainingTime = Math.floor(remainingTime / 60);
  var hours = Math.round(remainingTime % 24);
  remainingTime = Math.floor(remainingTime / 24);
  //parameterAssert(remainingTime === 0, `Elapsed time also contains ${remainingTime} days`);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, hours ? "".concat(hours, " hour") : '', hours && hours !== 1 ? 's' : '', hours ? ', ' : '', minutes ? "".concat(minutes, " minute") : '', minutes && minutes !== 1 ? 's' : '', minutes ? ', ' : '', seconds, " second", seconds === 1 ? '' : 's');
}
/**
 *
 * @param {Object} param0 with rawNoticeListLength and results object
 * @returns
 */
function RenderTotals(_ref3) {var rawNoticeListLength = _ref3.rawNoticeListLength,results = _ref3.results;
  if (results !== null && results !== void 0 && results.numIgnoredNotices || results !== null && results !== void 0 && results.numDisabledNotices) {
    var netNumNotices = rawNoticeListLength - results.numIgnoredNotices - results.numDisabledNotices;
    return /*#__PURE__*/_react.default.createElement("p", null, "\xA0\xA0\xA0\xA0Finished in ", /*#__PURE__*/_react.default.createElement(RenderElapsedTime, { elapsedSeconds: results.elapsedSeconds }), " with ", netNumNotices === 0 ? 'no' : netNumNotices.toLocaleString(), " notice", netNumNotices === 1 ? ' ' : 's ', "(",
    rawNoticeListLength === 0 ? 'no' : rawNoticeListLength.toLocaleString(), " raw notice", rawNoticeListLength === 1 ? '' : 's', " but",
    results.numIgnoredNotices ? " ".concat(results.numIgnoredNotices.toLocaleString(), " ignored notice").concat(results.numIgnoredNotices === 1 ? '' : 's') : "",
    results.numIgnoredNotices && results.numDisabledNotices ? ' and' : '',
    results.numDisabledNotices ? " ".concat(results.numDisabledNotices.toLocaleString(), " expected/disabled notice").concat(results.numDisabledNotices === 1 ? '' : 's') : "", ").",

    results.checkedOptions.cutoffPriorityLevel ? " Priority level ".concat(results.checkedOptions.cutoffPriorityLevel, " or lower were not included.") : '');

  } else // it’s much simpler
    return /*#__PURE__*/_react.default.createElement("p", null, "\xA0\xA0\xA0\xA0Finished in ", /*#__PURE__*/_react.default.createElement(RenderElapsedTime, { elapsedSeconds: results.elapsedSeconds }), " with ", rawNoticeListLength === 0 ? 'no' : rawNoticeListLength.toLocaleString(), " notice", rawNoticeListLength === 1 ? '' : 's', ".",
    results.checkedOptions.cutoffPriorityLevel ? " Priority level ".concat(results.checkedOptions.cutoffPriorityLevel, " or lower were not included.") : '');
}

function RenderSuppressedCount(_ref4) {var suppressedCount = _ref4.suppressedCount;
  if (suppressedCount === 0)
  return null;
  // else
  // debugLog(`Have ${suppressedCount.toLocaleString()} suppressed notices`);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/
  _react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement("small", { style: { color: 'Gray' } }, suppressedCount ? suppressedCount.toLocaleString() + " excess notice" + (suppressedCount === 1 ? '' : 's') + " suppressed." : '')));

}

/**
 * @description - Displays a given piece of text (which can include newline characters)
 * @param {Object} param0 with text - text to render as numbered lines
 * @return {String} - rendered HTML for the numbered list of lines
 */
function RenderNumberedLines(_ref5) {var text = _ref5.text;
  // This function is only used in some of the demos
  return /*#__PURE__*/_react.default.createElement("ol", null,
  text.split('\n').map(function (line, index) {
    return /*#__PURE__*/_react.default.createElement("li", { key: 'RNL' + index }, line);
  }));

}


var MAX_ARRAY_ITEMS_TO_DISPLAY = 8; // Or do we want this as a parameter?
/**
* @description - Displays whatever is in the object
* @param {Object} thisObject - object to render
* @param {Array} excludeList - optional list of object property names to be ignored
* @return {String} - rendered HTML for list of thisObject properties
*/
function RenderObject(_ref6) {var thisObject = _ref6.thisObject,excludeList = _ref6.excludeList;
  // debugLog("In RenderObject");
  // consoleLogObject('RenderObject settings', settings);
  return /*#__PURE__*/_react.default.createElement("ul", null,

  Object.keys(thisObject).map(function (key, keyIndex) {
    if (!excludeList || !excludeList.includes(key)) {
      var displayObject = thisObject[key];
      if (Array.isArray(displayObject) && displayObject.length > MAX_ARRAY_ITEMS_TO_DISPLAY)
      displayObject = "(only first ".concat(MAX_ARRAY_ITEMS_TO_DISPLAY, " displayed here) ").concat(JSON.stringify(displayObject.slice(0, MAX_ARRAY_ITEMS_TO_DISPLAY)), ", etc\u2026");
      return /*#__PURE__*/(
        _react.default.createElement("li", { key: 'RO' + keyIndex }, "\xA0\xA0\xA0\xA0", /*#__PURE__*/
        _react.default.createElement("span", null, /*#__PURE__*/_react.default.createElement("b", null, key), Array.isArray(thisObject[key]) ? " (".concat(thisObject[key].length.toLocaleString(), ") ") : '', ": ", (0, _typeof2.default)(displayObject) === 'object' ? JSON.stringify(displayObject) : displayObject)));


    }
    return null;
  }, []));

}


/**
* @description - Displays the raw noticeList in a table
* @param {Object} results - object containing noticeList
* @return {String} - rendered HTML for table of notices
*/
function RenderRawResults(_ref7) {var results = _ref7.results;
  // This function is flexible enough to handle notice objects:
  //      including bookID,C,V or not
  //      including repoName, filename, lineNumber or not
  //      including extra or not

  // debugLog("In RenderRawResults");
  // consoleLogObject('RenderRawResults results', results);
  // displayPropertyNames('RenderRawResults results', results);

  // Create a list of other property names
  // let propertyList = [], newObject = {};
  // for (const propertyName in results)
  //     if (propertyName !== 'noticeList') {
  //         newObject[propertyName] = results[propertyName];
  //         propertyList.push(<p>{propertyName} = {results[propertyName]}</p>);
  //     }
  // consoleLogObject('propertyList', propertyList);

  if (!results.noticeList || !results.noticeList.length)
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/
  _react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement("b", null, "Raw Results"), " (no notices were produced):"), /*#__PURE__*/
  _react.default.createElement(RenderObject, { thisObject: results, excludeList: ['noticeList'] }));

  // If we get here, we have notices.
  // debugLog(`Got ${results.noticeList.length} notices`);

  // Discover what fields we have in our notice objects (in order to set our table headers below)
  var allPropertiesSet = new Set();
  var haveOBS = false,haveBible = false;
  // debugLog( "allPropertiesSet-A", JSON.stringify([...allPropertiesSet]));
  var _iterator = _createForOfIteratorHelper(results.noticeList),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var noticeEntry = _step.value;
      // debugLog("noticeEntry", JSON.stringify(noticeEntry));
      // debugLog(`Found (${Object.keys(noticeEntry).length}) ${Object.keys(noticeEntry)}`);
      for (var _i = 0, _Object$entries = Object.entries(noticeEntry); _i < _Object$entries.length; _i++) {var _Object$entries$_i = (0, _slicedToArray2.default)(_Object$entries[_i], 2),noticePropertyName = _Object$entries$_i[0],noticePropertyValue = _Object$entries$_i[1];
        // debugLog("  Found", noticePropertyName, "=", noticeEntry[noticePropertyName]);
        if (noticePropertyValue !== undefined) {
          allPropertiesSet.add(noticePropertyName);
          if (noticePropertyName === 'bookID' && noticePropertyValue) {
            if (noticePropertyValue === 'OBS') haveOBS = true;else
            haveBible = true;
          }
        }}}
    // debugLog( "allPropertiesSet-Z", JSON.stringify([...allPropertiesSet]));

    // Adjust the headers according to the column sets that we actually have in the noticeList
  } catch (err) {_iterator.e(err);} finally {_iterator.f();}var headerData = [
  { title: 'Priority', field: 'priority', type: 'numeric' },
  { title: 'Message', field: 'message' }];

  if (allPropertiesSet.has('details')) headerData = headerData.concat([{ title: 'Details', field: 'details' }]);
  if (allPropertiesSet.has('bookID')) headerData = headerData.concat([{ title: 'Book', field: 'bookID' }]);
  if (allPropertiesSet.has('C') || allPropertiesSet.has('V')) {
    var CName = '???',VName = '???';
    if (haveBible && !haveOBS) {CName = 'Chapter';VName = 'Verse';} else
    if (haveOBS && !haveBible) {CName = 'Story';VName = 'Frame';} else
    if (haveBible && haveOBS) {CName = 'Chapter/Story';VName = 'Verse/Frame';}
    headerData = headerData.concat([
    { title: CName, field: 'C' },
    { title: VName, field: 'V' }]);

  }
  if (allPropertiesSet.has('rowID')) headerData = headerData.concat([{ title: 'row ID', field: 'rowID' }]);
  if (allPropertiesSet.has('repoCode')) headerData = headerData.concat([{ title: 'RepoCode', field: 'repoCode' }]);
  if (allPropertiesSet.has('username')) headerData = headerData.concat([{ title: 'Username', field: 'username' }]);
  if (allPropertiesSet.has('repoName')) headerData = headerData.concat([{ title: 'RepoName', field: 'repoName' }]);
  if (allPropertiesSet.has('filename')) headerData = headerData.concat([{ title: 'Filename', field: 'filename' }]);
  if (allPropertiesSet.has('fieldName')) headerData = headerData.concat([{ title: 'Field', field: 'fieldName' }]);
  if (allPropertiesSet.has('lineNumber')) headerData = headerData.concat([{ title: 'Line', field: 'lineNumber' }]);
  if (allPropertiesSet.has('characterIndex')) headerData = headerData.concat([{ title: 'CharIndex', field: 'characterIndex' }]);
  if (allPropertiesSet.has('excerpt')) headerData = headerData.concat([{ title: 'Excerpt', field: 'excerpt' }]);
  if (allPropertiesSet.has('location')) headerData = headerData.concat([{ title: 'Location', field: 'location' }]);
  if (allPropertiesSet.has('extra')) headerData = headerData.concat([{ title: 'Extra', field: 'extra' }]);
  // debugLog("headerData", headerData.length, JSON.stringify(headerData));

  // Make the actual table and return it
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/
  _react.default.createElement("b", null, "Raw Results"), ":", /*#__PURE__*/
  _react.default.createElement(RenderObject, { thisObject: results }), /*#__PURE__*/
  _react.default.createElement(_materialTable.default, {
    icons: tableIcons,
    title: "All ".concat(results.noticeList.length.toLocaleString(), " Raw Notices"),
    columns: headerData,
    data: results.noticeList,
    options: { sorting: true, exportButton: true, exportAllData: true, columnsButton: true, filtering: true } }));


}


function RenderSuccessesColored(_ref8) {var results = _ref8.results;
  // Display our array of success message strings in a nicer format
  //
  // Expects results to contain:
  //      1/ successList
  // debugLog("In RenderSuccessesColored with ", successList);
  // consoleLogObject('RenderSuccessesColored results', results);

  var haveWarnings;
  try {haveWarnings = results.errorList.length || results.warningList.length;}
  catch (e1) {
    try {haveWarnings = results.severeList.length || results.mediumList.length || results.lowList.length;}
    catch (e2) {haveWarnings = results.warningList.length;}
  }

  return /*#__PURE__*/_react.default.createElement("ul", null,
  results.successList.map(function (listEntry, index) {
    return /*#__PURE__*/_react.default.createElement("li", { key: 'RSC' + index }, /*#__PURE__*/
    _react.default.createElement("b", { style: { color: haveWarnings ? 'limegreen' : 'green' } }, listEntry));

  }));

}


/**
* @description - Displays the message plus details if specified
* @param {string} color - color field for the message style
* @param {string} message - notice text
* @param {string} details - (optional) extra notice text
* @return {String} - rendered HTML for the given reference
*/
function RenderMessage(_ref9) {var color = _ref9.color,message = _ref9.message,details = _ref9.details;
  var detailsString = '';
  if (details)
  if (details.startsWith('verse text ◗'))
  detailsString = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, " with verse text \u25D7", /*#__PURE__*/_react.default.createElement("span", { style: { backgroundColor: 'LemonChiffon' } }, details.slice(12, -1)), "\u25D6");else
  if (details.length)
  detailsString = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, " with '", details, "'");
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("b", { style: { color: color } }, message), detailsString);
}
/**
* @description - Displays the bookcode and chapter/verse details if specified
* @param {string} bookID - (optional) 3-character UPPERCASE USFM bookcode or 'OBS'.
* @param {string} C - (optional) chapter info
* @param {string} V - (optional) verse info
* @return {String} - rendered HTML for the given reference
*/
function RenderBCV(_ref10) {var bookID = _ref10.bookID,C = _ref10.C,V = _ref10.V;
  // These are all optional parameters - they may be undefined or blank if irrelevant
  // debugLog(`RenderBCV(${bookID}, ${C}, ${V})`);
  if (!bookID && !C && !V) return null; // They're all undefined or blank!
  // debugLog(`RenderBCV2 ${bookID}, ${C}, ${V}`);
  var result;
  if (bookID && bookID.length) result = bookID;
  if (C && C.length) result = "".concat(result).concat(result.length ? ' ' : '').concat(C);
  if (V && V.length) result = "".concat(result).concat(result.length ? ':' : '').concat(V);
  if (result.length)
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, " ", V && V.length ? 'at' : 'in', " ", /*#__PURE__*/_react.default.createElement("b", null, result));
  return null;
}
/**
* @description - Displays the repoName and filename/lineNumber details if specified
* @param {string} username - (optional) username/orgName string
* @param {string} repoName - (optional) repo name string
* @param {string} filename - (optional) filename string
* @param {Number} lineNumber - (optional) line number integer (1-based)
* @param {string} rowID - (optional) 4-character ID field
* @param {string} fieldName - (optional) name of field
* @return {String} - rendered HTML for the given reference
*/
function RenderFileDetails(_ref11) {var _givenEntry$repoName, _adjustedRepoName;var givenEntry = _ref11.givenEntry;
  // These are all optional parameters - they may be undefined or blank if irrelevant
  // debugLog(`RenderFileDetails(${JSON.stringify(givenEntry)})`);
  // debugLog(`RenderFileDetails(${username}, ${repoName}, ${branch}, ${filename}, ${lineNumber}, ${rowID}, ${fieldName})`);
  if (!givenEntry.repoName && !givenEntry.filename && !givenEntry.lineNumber && !givenEntry.rowID && !givenEntry.fieldName)
  return null; // They're all undefined or blank!

  if (!givenEntry.branch) givenEntry.branch = (_givenEntry$repoName = givenEntry.repoName) !== null && _givenEntry$repoName !== void 0 && _givenEntry$repoName.endsWith('2') ? 'newFormat' : 'master'; // default but with TEMP code for newFormat
  // debugLog(`RenderFileDetails2 ${repoName}, ${filename}, ${lineNumber}`);

  // Not sure if this happens with BP check, but filecheck for TN was giving bad links for TA warnings
  var adjustedRepoName = givenEntry.repoName;
  var firstMsgWord = givenEntry.message.split(' ')[0]; // This might be the former 'extra' field
  if (['TA', 'TW'].indexOf(firstMsgWord) >= 0) {
    var adjustedLanguageCode = givenEntry.repoName.split('_')[0];
    if (adjustedLanguageCode === 'hbo' || adjustedLanguageCode === 'el-x-koine') adjustedLanguageCode = 'en'; // This is a guess (and won't be needed for TWs when we switch to TWLs)
    adjustedRepoName = "".concat(adjustedLanguageCode, "_").concat(firstMsgWord.toLowerCase());
    if (adjustedRepoName !== givenEntry.repoName) (0, _utilities.debugLog)("RenderFileDetails: trying adjusting repoName from '".concat(givenEntry.repoName, "' to '").concat(adjustedRepoName, "' for ").concat(JSON.stringify(givenEntry)));
  }

  var resultStart = '',lineResult = '',resultEnd = '',fileLineLink = '',fileLink = '';
  if ((_adjustedRepoName = adjustedRepoName) !== null && _adjustedRepoName !== void 0 && _adjustedRepoName.length) resultStart += " in ".concat(adjustedRepoName, " repository");
  if (givenEntry.username && adjustedRepoName && givenEntry.filename) {
    if (givenEntry.filename && givenEntry.filename.length) resultStart += " in file ".concat(givenEntry.filename);
    try {// use blame so we can see the actual line!
      if (givenEntry.filename.endsWith('.tsv') || givenEntry.filename.endsWith('.md')) {
        var folder = '';
        if (givenEntry.filename !== 'README.md' && givenEntry.filename !== 'LICENSE.md') {
          if (adjustedRepoName.endsWith('_obs')) folder = 'content/';else
          if (adjustedRepoName.endsWith('_tw') && !givenEntry.filename.startsWith('bible/')) {
            folder = 'bible/';
            (0, _utilities.dataAssert)(givenEntry.filename.indexOf('/') === 1); // filename actually contains the subfolder
          }
        }
        fileLink = "https://git.door43.org/".concat(givenEntry.username, "/").concat(adjustedRepoName, "/blame/branch/").concat(givenEntry.branch, "/").concat(folder).concat(givenEntry.filename);
      } else // not TSV or MD
        fileLink = "https://git.door43.org/".concat(givenEntry.username, "/").concat(adjustedRepoName, "/src/branch/").concat(givenEntry.branch, "/").concat(givenEntry.filename);
    } catch (someErr) {(0, _utilities.debugLog)("What was someErr here: ".concat(someErr));}
    if (givenEntry.lineNumber) {
      resultStart += ' on ';
      if (fileLink && givenEntry.lineNumber)
      fileLineLink = "".concat(fileLink, "#L").concat(givenEntry.lineNumber);
      lineResult = "line ".concat(givenEntry.lineNumber.toLocaleString());
    }
    // else resultEnd += " no lineNumber";
  }
  // else if (!username) resultEnd += " no username";
  // else if (!repoName) resultEnd += " no repoName";
  // else if (!filename) resultEnd += " no filename";
  if (givenEntry.rowID && givenEntry.rowID.length)
  resultEnd = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, resultEnd, " with row ID ", /*#__PURE__*/_react.default.createElement("b", null, /*#__PURE__*/_react.default.createElement("span", { style: { fontFamily: 'Courier New, courier, monospace' } }, givenEntry.rowID)));
  if (givenEntry.fieldName && givenEntry.fieldName.length)
  resultEnd = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, resultEnd, " in ", givenEntry.fieldName, " field");

  if (fileLineLink)
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, resultStart, /*#__PURE__*/_react.default.createElement("a", { rel: "noopener noreferrer", target: "_blank", href: fileLineLink }, lineResult), resultEnd);else
  if (fileLink)
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, resultStart, " in file ", /*#__PURE__*/_react.default.createElement("a", { rel: "noopener noreferrer", target: "_blank", href: fileLink }, givenEntry.filename), resultEnd);else

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, resultStart, /*#__PURE__*/_react.default.createElement("b", null, lineResult), resultEnd);
}
// end of RenderFileDetails

function RenderExcerpt(_ref12) {var excerpt = _ref12.excerpt,message = _ref12.message;
  // debugLog(`RenderExcerpt(${excerpt}, ${message})`);
  // NOTE: These message strings must match notes-links-check.js (priority 82, and priority 32,)
  // Note that messages might start with a repo code, e.g., "TN Actual message start"
  if (message.endsWith("Untested general/outside link") ||
  message.endsWith("Error loading general link") ||
  message.endsWith("Should http link be https")) {
    // debugLog(`Here1 RenderExcerpt(${excerpt}, ${message})`);
    if (excerpt && excerpt[0] === '[' && excerpt.slice(-1) === ')') {// then the excerpt is a link so let's liven it
      // debugLog(`Here2 RenderExcerpt(${excerpt}, ${message})`);
      var ix = excerpt.indexOf('](');
      var displayPart = excerpt.substring(1, ix); // Start after the [ until before the ](
      var linkPart = excerpt.substring(ix + 2, excerpt.length - 1); // Step past the ]( but don't include the final )
      var adjLinkPart = message === "Should http link be https" ? linkPart.replace('http:', 'https:') : linkPart;
      // debugLog(`RenderExcerpt from '${excerpt}' got ix=${ix}, displayPart='${displayPart}', linkPart='${linkPart}', adjLinkPart='${adjLinkPart}'`);
      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("span", { style: { color: 'DimGray' } }, "` around \u25D7[", displayPart, "](", /*#__PURE__*/_react.default.createElement("a", { rel: "noopener noreferrer", target: "_blank", href: adjLinkPart }, linkPart), ")\u25D6`"));
    }
  }
  if (excerpt && excerpt.length)
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, " around \u25D7", /*#__PURE__*/_react.default.createElement("span", { style: { color: 'DarkOrange' } }, /*#__PURE__*/_react.default.createElement("b", null, excerpt)), "\u25D6");
  // else
  return null;
}
// end of RenderExcerpt

/**
 *
 * @param {Object} props.entry -- the given notice entry object
 */
function RenderPriority(_ref13) {var entry = _ref13.entry;
  // Also displays the debugChain (after the priority) if the debugChain string exists
  if (entry.debugChain)
  return /*#__PURE__*/_react.default.createElement("small", null, /*#__PURE__*/_react.default.createElement("span", { style: { color: 'Gray' } }, " (", "Priority " + entry.priority, ")"), " ", /*#__PURE__*/_react.default.createElement("span", { style: { color: 'Purple' } }, "[", entry.debugChain, "]"));else

  return /*#__PURE__*/_react.default.createElement("small", { style: { color: 'Gray' } }, " (", "Priority " + entry.priority, ")");
}

/**
 *
 * @param {Object} param0
 * @returns JSX rendered entry
 */
function RenderOneEntry(_ref14) {var color = _ref14.color,entry = _ref14.entry;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/
  _react.default.createElement(RenderMessage, { color: color, message: entry.message, details: entry.details }), /*#__PURE__*/
  _react.default.createElement(RenderBCV, { bookID: entry.bookID, C: entry.C, V: entry.V }), /*#__PURE__*/
  _react.default.createElement(RenderFileDetails, { givenEntry: entry }),
  entry.characterIndex > 0 ? " (at character " + (entry.characterIndex + 1) + ")" : "", /*#__PURE__*/
  _react.default.createElement(RenderExcerpt, { excerpt: entry.excerpt, message: entry.message }),
  entry.location, /*#__PURE__*/
  _react.default.createElement(RenderPriority, { entry: entry }));
}


function RenderHiddenNotices(_ref15) {var color = _ref15.color,suppressedNoticeList = _ref15.suppressedNoticeList;
  return /*#__PURE__*/_react.default.createElement("ul", null,
  suppressedNoticeList.map(function (suppressedEntry, index) {
    // debugLog(`RenderHiddenNotices ${index} ${JSON.stringify(suppressedEntry)}`);
    return /*#__PURE__*/_react.default.createElement("li", { key: 'RHN' + index }, /*#__PURE__*/
    _react.default.createElement(RenderOneEntry, { color: color, entry: suppressedEntry }));

  }));

}


/**
 *
 * @param {Object} param0 with arrayType of 'w','e','s' and an array of results
 * @returns JSX rendered table
 */
function RenderProcessedArray(_ref16) {var arrayType = _ref16.arrayType,results = _ref16.results;
  // Display our array of objects in a nicer format
  //  priority (integer), message (string)
  //  plus optional fields:
  //      bookID, C, V, repoName, filename, lineNumber
  //      characterIindex (integer), excerpt (string), location (string)
  //
  // debugLog("In RenderProcessedArray with ", arrayType);
  // consoleLogObject('RenderProcessedArray results', results);

  if (arrayType === 's')
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/
  _react.default.createElement(RenderSuccessesColored, { results: results }));else

  {// not 's' (successList)
    var myList = arrayType === 'e' ? results.errorList : results.warningList;
    var thisColor = arrayType === 'e' ? 'red' : 'orange';
    return /*#__PURE__*/_react.default.createElement("ul", null,
    myList.map(function (listEntry, index) {
      if (listEntry.location.indexOf(' HIDDEN') >= 0 && listEntry.hiddenNotices)
        // This is a "MORE SIMILAR ERRORS/WARNINGS/NOTICES SUPRESSED" message with other notices embedded
        //  so we allow it to be expanded using HTML5 "details" feature.
        return /*#__PURE__*/_react.default.createElement("li", { key: 'RPA' + index }, /*#__PURE__*/_react.default.createElement("details", null, /*#__PURE__*/
        _react.default.createElement("summary", null, /*#__PURE__*/_react.default.createElement(RenderOneEntry, { color: thisColor, entry: listEntry })), /*#__PURE__*/
        _react.default.createElement(RenderHiddenNotices, { color: thisColor, suppressedNoticeList: listEntry.hiddenNotices })));
      // else (a regular message)
      return /*#__PURE__*/_react.default.createElement("li", { key: 'RPA' + index }, /*#__PURE__*/
      _react.default.createElement(RenderOneEntry, { color: thisColor, entry: listEntry }));

    }));

  }
}
function RenderErrors(_ref17) {var results = _ref17.results;
  // debugLog("In RenderErrors");
  // consoleLogObject('RenderErrors results', results);
  (0, _utilities.userLog)("Displaying ".concat(results.errorList.length.toLocaleString(), " error(s) with ").concat(results.numHiddenErrors.toLocaleString(), " hidden"));
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/
  _react.default.createElement("b", { style: { color: results.errorList.length ? 'red' : 'green' } }, results.errorList.length.toLocaleString(), " error", results.errorList.length === 1 ? '' : 's'), results.errorList.length ? ':' : '', /*#__PURE__*/
  _react.default.createElement("small", { style: { color: 'Gray' } }, results.numHiddenErrors ? " (" + results.numHiddenErrors.toLocaleString() + " similar one" + (results.numHiddenErrors === 1 ? '' : 's') + " hidden)" : ''), /*#__PURE__*/
  _react.default.createElement(RenderProcessedArray, { results: results, arrayType: "e" }));

}
function RenderWarnings(_ref18) {var results = _ref18.results;
  // debugLog("In RenderWarnings");
  // consoleLogObject('RenderWarnings results', results);
  (0, _utilities.userLog)("Displaying ".concat(results.warningList.length.toLocaleString(), " warnings(s) with ").concat(results.numHiddenWarnings.toLocaleString(), " hidden"));
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/
  _react.default.createElement("b", { style: { color: results.warningList.length ? 'orange' : 'green' } }, results.warningList.length.toLocaleString(), " warning", results.warningList.length === 1 ? '' : 's'), results.warningList.length ? ':' : '', /*#__PURE__*/
  _react.default.createElement("small", { style: { color: 'Gray' } }, results.numHiddenWarnings ? " (" + results.numHiddenWarnings.toLocaleString() + " similar one" + (results.numHiddenWarnings === 1 ? '' : 's') + " hidden)" : ''), /*#__PURE__*/
  _react.default.createElement(RenderProcessedArray, { results: results, arrayType: "w" }));

}
function RenderErrorsAndWarnings(_ref19) {var results = _ref19.results;
  // debugLog("In RenderErrorsAndWarnings");
  // consoleLogObject('RenderErrorsAndWarnings results', results);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/
  _react.default.createElement("small", { style: { color: 'Gray' } }, results.numSuppressedNotices ? " (" + results.numSuppressedNotices.toLocaleString() + " similar one" + (results.numSuppressedNotices === 1 ? '' : 's') + " suppressed)" : ''), /*#__PURE__*/
  _react.default.createElement(RenderErrors, { results: results }), /*#__PURE__*/
  _react.default.createElement(RenderWarnings, { results: results }));

}
function RenderSuccessesErrorsWarnings(_ref20) {var results = _ref20.results;
  // Not used internally here -- called from Demo check functions

  // debugLog("In RenderSuccessesErrorsWarnings");

  // consoleLogObject('RenderSuccessesErrorsWarnings results', results);

  var haveErrorsOrWarnings = results.errorList.length || results.warningList.length;

  var successCount;
  if (results.successList.length === 1) successCount = 'One';else
  if (results.successList.length === 2) successCount = 'Two';else
  if (results.successList.length === 3) successCount = 'Three';else
  if (results.successList.length === 4) successCount = 'Four';else
  if (results.successList.length === 5) successCount = 'Five';else
  successCount = results.successList.length.toLocaleString();

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/
  _react.default.createElement("b", { style: { color: haveErrorsOrWarnings ? 'limegreen' : 'green' } }, successCount.toLocaleString(), " check", results.successList.length === 1 ? '' : 's', " completed"), results.successList.length ? ':' : '', /*#__PURE__*/
  _react.default.createElement(RenderSuccessesColored, { results: results }),
  haveErrorsOrWarnings ? /*#__PURE__*/_react.default.createElement(RenderErrorsAndWarnings, { results: results }) : "");

}


function RenderGivenArray(_ref21) {var color = _ref21.color,array = _ref21.array;
  // Display our array of objects in a nicer format
  //  priority (integer), message (string),
  //  plus possible optional fields:
  //      bookID, C, V,
  //      repoName, filename, lineNumber,
  //      characterIndex (integer), excerpt (string), location (descriptive string)
  //
  // Called from RenderSevere, RenderMedium, RenderLow
  //
  // debugLog("In RenderGivenArray with ", arrayType);
  // consoleLogObject('RenderGivenArray results', results);

  return /*#__PURE__*/_react.default.createElement("ul", null,
  array.map(function (listEntry, index) {
    (0, _utilities.debugLog)("RenderGivenArray ".concat(index, " ").concat(JSON.stringify(listEntry)));
    if (listEntry.location.indexOf(' HIDDEN') >= 0 && listEntry.hiddenNotices)
      // This is a "MORE SIMILAR ERRORS/WARNINGS/NOTICES SUPRESSED" message with other notices embedded
      //  so we allow it to be expanded using HTML5 "details" feature.
      return /*#__PURE__*/_react.default.createElement("li", { key: 'RGA' + index }, /*#__PURE__*/_react.default.createElement("details", null, /*#__PURE__*/
      _react.default.createElement("summary", null, /*#__PURE__*/_react.default.createElement(RenderOneEntry, { color: color, entry: listEntry })), /*#__PURE__*/
      _react.default.createElement(RenderHiddenNotices, { color: color, suppressedNoticeList: listEntry.hiddenNotices })));
    // else (a regular message)
    return /*#__PURE__*/_react.default.createElement("li", { key: 'RGA' + index }, /*#__PURE__*/
    _react.default.createElement(RenderOneEntry, { color: color, entry: listEntry }));

  }));

}
function RenderSevere(_ref22) {var results = _ref22.results;
  // debugLog("In RenderSevere");
  // consoleLogObject('RenderSevere results', results);
  (0, _utilities.userLog)("Displaying ".concat(results.severeList.length.toLocaleString(), " severe notice(s) with ").concat(results.numHiddenSevere.toLocaleString(), " hidden"));
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/
  _react.default.createElement("b", { style: { color: results.severeList.length ? 'red' : 'green' } }, results.severeList.length.toLocaleString(), " severe error", results.severeList.length === 1 ? '' : 's'), results.severeList.length ? ':' : '', /*#__PURE__*/
  _react.default.createElement("small", { style: { color: 'Gray' } }, results.numHiddenSevere ? " (" + results.numHiddenSevere.toLocaleString() + " similar one" + (results.numHiddenSevere === 1 ? '' : 's') + " hidden)" : ''), /*#__PURE__*/
  _react.default.createElement(RenderGivenArray, { color: "red", array: results.severeList }));

}
function RenderMedium(_ref23) {var results = _ref23.results;
  // debugLog("In RenderSevere");
  // consoleLogObject('RenderSevere results', results);
  (0, _utilities.userLog)("Displaying ".concat(results.mediumList.length.toLocaleString(), " medium notice(s) with ").concat(results.numHiddenMedium.toLocaleString(), " hidden"));
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/
  _react.default.createElement("b", { style: { color: results.mediumList.length ? 'maroon' : 'green' } }, results.mediumList.length.toLocaleString(), " medium error", results.mediumList.length === 1 ? '' : 's'), results.mediumList.length ? ':' : '', /*#__PURE__*/
  _react.default.createElement("small", { style: { color: 'Gray' } }, results.numHiddenMedium ? " (" + results.numHiddenMedium.toLocaleString() + " similar one" + (results.numHiddenMedium === 1 ? '' : 's') + " hidden)" : ''), /*#__PURE__*/
  _react.default.createElement(RenderGivenArray, { color: "maroon", array: results.mediumList }));

}
function RenderLow(_ref24) {var results = _ref24.results;
  // debugLog("In RenderLow");
  // consoleLogObject('RenderLow results', results);
  (0, _utilities.userLog)("Displaying ".concat(results.lowList.length.toLocaleString(), " low notice(s) with ").concat(results.numHiddenLow.toLocaleString(), " hidden"));
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/
  _react.default.createElement("b", { style: { color: results.lowList.length ? 'orange' : 'green' } }, results.lowList.length.toLocaleString(), " other warning", results.lowList.length === 1 ? '' : 's'), results.lowList.length ? ':' : '', /*#__PURE__*/
  _react.default.createElement("small", { style: { color: 'Gray' } }, results.numHiddenLow ? " (" + results.numHiddenLow.toLocaleString() + " similar one" + (results.numHiddenLow === 1 ? '' : 's') + " hidden)" : ''), /*#__PURE__*/
  _react.default.createElement(RenderGivenArray, { color: "orange", array: results.lowList }));

}
function RenderSevereMediumLow(_ref25) {var results = _ref25.results;
  // debugLog("In RenderSevereMediumLow");
  // consoleLogObject('RenderSevereMediumLow results', results);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/
  _react.default.createElement("small", { style: { color: 'Gray' } }, results.numSuppressedNotices ? " (" + results.numSuppressedNotices.toLocaleString() + " similar one" + (results.numSuppressedNotices === 1 ? '' : 's') + " suppressed)" : ''), /*#__PURE__*/
  _react.default.createElement(RenderSevere, { results: results }), /*#__PURE__*/
  _react.default.createElement(RenderMedium, { results: results }), /*#__PURE__*/
  _react.default.createElement(RenderLow, { results: results }));

}
function RenderSuccessesSevereMediumLow(_ref26) {var results = _ref26.results;
  // Not used internally here -- called from Demo check functions

  // debugLog("In RenderSuccessesSevereMediumLow");

  // consoleLogObject('RenderSuccessesSevereMediumLow results', results);

  var haveErrorsOrWarnings = results.severeList.length || results.mediumList.length || results.lowList.length;

  var successCount;
  if (results.successList.length === 1) successCount = 'One';else
  if (results.successList.length === 2) successCount = 'Two';else
  if (results.successList.length === 3) successCount = 'Three';else
  if (results.successList.length === 4) successCount = 'Four';else
  if (results.successList.length === 5) successCount = 'Five';else
  successCount = results.successList.length.toLocaleString();

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/
  _react.default.createElement("b", { style: { color: haveErrorsOrWarnings ? 'limegreen' : 'green' } }, successCount.toLocaleString(), " check", results.successList.length === 1 ? '' : 's', " completed"), results.successList.length ? ':' : '', /*#__PURE__*/
  _react.default.createElement(RenderSuccessesColored, { results: results }),
  haveErrorsOrWarnings ? /*#__PURE__*/_react.default.createElement(RenderSevereMediumLow, { results: results }) : "");

}


function getGradientcolor(priorityValue) {
  // priorityValue is in range 1..999
  //
  // Returns a color value from red (highest priority) to orange (lower)
  var red = "0".concat(Math.floor(priorityValue * 255 / 999).toString(16)).slice(-2);
  // const green = `0${Math.floor((1000-priorityValue) * 55 / 999).toString(16)}`.slice(-2);
  // debugLog(`getGradientcolor(${priorityValue}) -> red='${red}' green='${green}'`)
  return "#".concat(red, "0000"); // or `#${red}${green}00`
}
function RenderNoticesGradient(_ref27) {var results = _ref27.results;
  // Display our array of 8-part lists in a nicer format
  //  1/ priority number, 2/ bookID, 3/ C, 4/ V, 5/ message,
  //      6/ index (integer), 7/ excerpt (optional), 8/ location
  //
  // Expects results to contain:
  //      1/ warningList
  //
  // Called from RenderSuccessesNoticesGradient below
  //
  // debugLog("In RenderNoticesGradient with ", results.warningList);
  // consoleLogObject('RenderNoticesGradient results', results);

  return /*#__PURE__*/_react.default.createElement("ul", null,
  results.warningList.map(function (listEntry, index) {
    // debugLog(`RenderNoticesGradient ${index} ${JSON.stringify(listEntry)}`);
    var thisColor = getGradientcolor(listEntry.priority);
    if (listEntry.location.indexOf(' HIDDEN') >= 0 && listEntry.hiddenNotices)
      // This is a "MORE SIMILAR ERRORS/WARNINGS/NOTICES SUPRESSED" message with other notices embedded
      //  so we allow it to be expanded using HTML5 "details" feature.
      return /*#__PURE__*/_react.default.createElement("li", { key: 'RWG' + index }, /*#__PURE__*/_react.default.createElement("details", null, /*#__PURE__*/
      _react.default.createElement("summary", null, /*#__PURE__*/_react.default.createElement(RenderOneEntry, { color: thisColor, entry: listEntry })), /*#__PURE__*/
      _react.default.createElement(RenderHiddenNotices, { color: thisColor, suppressedNoticeList: listEntry.hiddenNotices })));
    // else (a regular message)
    return /*#__PURE__*/_react.default.createElement("li", { key: 'RWG' + index }, /*#__PURE__*/
    _react.default.createElement(RenderOneEntry, { color: thisColor, entry: listEntry }));

  }));

}
function RenderSuccessesNoticesGradient(_ref28) {var results = _ref28.results;
  // Not used internally here -- called from Demo check functions

  // debugLog("In RenderSuccessesNoticesGradient");

  // consoleLogObject('RenderSuccessesNoticesGradient results', results);

  var successCount;
  if (results.successList.length === 1) successCount = 'One';else
  if (results.successList.length === 2) successCount = 'Two';else
  if (results.successList.length === 3) successCount = 'Three';else
  if (results.successList.length === 4) successCount = 'Four';else
  if (results.successList.length === 5) successCount = 'Five';else
  successCount = results.successList.length.toLocaleString();

  (0, _utilities.userLog)("Displaying ".concat(results.warningList.length.toLocaleString(), " gradient notice(s) with ").concat(results.numHiddenNotices.toLocaleString(), " hidden"));
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/
  _react.default.createElement("b", { style: { color: results.warningList.length ? 'limegreen' : 'green' } }, successCount.toLocaleString(), " check", results.successList.length === 1 ? '' : 's', " completed"), results.successList.length ? ':' : '', /*#__PURE__*/
  _react.default.createElement(RenderSuccessesColored, { results: results }), /*#__PURE__*/
  _react.default.createElement(RenderSuppressedCount, { suppressedCount: results.numSuppressedNotices }), /*#__PURE__*/
  _react.default.createElement("b", { style: { color: results.warningList.length ? 'orange' : 'green' } }, results.warningList.length.toLocaleString(), " warning notice", results.warningList.length === 1 ? '' : 's'), results.warningList.length ? ':' : '', /*#__PURE__*/
  _react.default.createElement("small", { style: { color: 'Gray' } }, results.numHiddenNotices ? " (" + results.numHiddenNotices.toLocaleString() + " similar one" + (results.numHiddenNotices === 1 ? '' : 's') + " hidden)" : ''),
  results.warningList.length ? /*#__PURE__*/_react.default.createElement(RenderNoticesGradient, { results: results }) : "");

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,