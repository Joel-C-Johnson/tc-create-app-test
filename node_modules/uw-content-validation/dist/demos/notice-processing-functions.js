"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.processNoticesToErrorsWarnings = processNoticesToErrorsWarnings;exports.processNoticesToSevereMediumLow = processNoticesToSevereMediumLow;exports.processNoticesToSingleList = processNoticesToSingleList;var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _utilities = require("../core/utilities");
var _disabledNotices = require("../core/disabled-notices");function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {(0, _defineProperty2.default)(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}


// const NOTICE_PROCESSOR_VERSION_STRING = '0.10.2';
// TODO: Hidden message code probably doesn't work for the other sort orders

var DEFAULT_MAXIMUM_HIDDEN_NOTICES = 60; // Don't want to hide HUNDREDS/THOUSANDS of notices for each notice type
var DEFAULT_MAXIMUM_HIDDEN_NOTICES_MESSAGE = "Further hidden notices (beyond ".concat(DEFAULT_MAXIMUM_HIDDEN_NOTICES, ") were suppressed!");
var maximumHiddenNotices = DEFAULT_MAXIMUM_HIDDEN_NOTICES,maximumHiddenNoticesMessage = DEFAULT_MAXIMUM_HIDDEN_NOTICES_MESSAGE;

// All of the following can be overriden with optionalProcessingOptions
var DEFAULT_MAXIMUM_SIMILAR_MESSAGES = 3; // Zero means no suppression of similar messages
var maximumSimilarMessages = DEFAULT_MAXIMUM_SIMILAR_MESSAGES;
var DEFAULT_CUTOFF_PRIORITY_LEVEL = 0; // This level or lower gets excluded from the lists
var DEFAULT_IGNORE_PRIORITY_NUMBER_LIST = [];

// For processNoticesToErrorsWarnings
var DEFAULT_ERROR_PRIORITY_LEVEL = 700; // This level or higher becomes an error (cf. warnings)

// For processNoticesToSevereMediumLow
var DEFAULT_SEVERE_PRIORITY_LEVEL = 800; // This level or higher becomes a severe error
var DEFAULT_MEDIUM_PRIORITY_LEVEL = 600; // This level or higher becomes a medium error

// For processNoticesToSingleList
// (no constants required)


/**
* @description - Preprocesses the successList and noticeList
* @param {Object} givenNoticeObject - must contain a noticeList array
* @param {Object} optionalProcessingOptions - may contain parameters
* @return {Array} containing three items: remainingNoticeList, allTotals, resultObject
*/
function processNoticesCommon(givenNoticeObject, optionalProcessingOptions) {
  /*
      Expects to get an object with:
          successList: a list of strings describing what has been checked
          noticeList: a list of components to notices, being:
              priority: A notice priority number in the range 1-1,000.
                  Each different type of warning/error has a unique number
                    (but not each instance of those warnings/errors).
                  By default, notice priority numbers 700 and over are
                    considered `errors` and 0-699 are considered `warnings`,
                    but in truth, thatâ€™s rather arbitrary.
              message: The actual general description text of the notice
              details: Additional clarifying notice information (if relevant)
              The next three fields may be ommitted if irrelevant
               (since BCV is not relevant to all types of files/repos)
                  bookID: book identifier 3-character UPPERCASE string
                  C: Chapter number string
                  V: Verse number string (can also be a bridge, e.g., '22-23')
              repoName: repository name (if relevant)
              filename: string (if relevant)
              rowID: 4-character string (if relevant)
              lineNumber: A one-based integer indicating the line number in the file
              fieldName: string (if relevant)
              characterIndex: A zero-based integer index which indicates the position
                  of the error on the line or in the text field as appropriate.
              excerpt: An excerpt of the checked text which indicates the area
                    containing the problem.
                  Where helpful, some character substitutions have already been made,
                    for example, if the notice is about spaces,
                    it is generally helpful to display spaces as a visible
                    character in an attempt to best highlight the issue to the user.
               location: A string indicating the context of the notice,
                      e.g., `in 'someBook.usfm'.
              There is also an optional notice component (where multiple files/repos are checked)
              extra: A string indicating an extra location component, e.g., repoCode or bookID
                  This will probably need to be added to the message string but is left
                      until now in order to allow the most display flexibility
      Available options are:
          cutoffPriorityLevel (integer; default is DEFAULT_CUTOFF_PRIORITY_LEVEL above)
          maximumSimilarMessages (integer; default is DEFAULT_MAXIMUM_SIMILAR_MESSAGES above)
          sortBy ('AsFound' or 'ByPriority' or 'ByRepo', default is 'ByPriority')
          ignorePriorityNumberList (list of integers, default is empty list, list of notice priority numbers to be ignored)
      Also, any other parameters are just passed through,
          although filenameList might be abbreviated, e.g. for 100s of .md files.
       Returns an array of three fields:
          remainingNoticeList
              A list of notice entries, each one containing exactly eight or nine fields (see above)
                  i.e., notice entries originally containing five or six fields have had blank BCV fields inserted.
          allTotals
              A table with a count of notices for that priority/message.
                  (May be used in further processing for possible removal of lots of similar messages)
          resultObject
              A prototype object which will be added to and then returned as the final result of the NEXT notice processing step.
              Contains the following:
                  successList -- a list of strings noting what has been checked
                  numIgnored Notices (int)
                  numSuppressedNotices (int)
                  processingOptions (a copy of the optionalProcessingOptions passed to these functions)
                  Any other fields that were part of the givenNoticeObject passed to these functions. These might include:
                      checkedFilenames -- list of strings
                      checkedRepos -- list of strings
                  depending on the type of check that was made.
  */

  // debugLog(`processNoticesCommon v${NOTICE_PROCESSOR_VERSION_STRING}
  //     with ${JSON.stringify(givenNoticeObject)}
  //     with options=${JSON.stringify(optionalProcessingOptions)}
  //   Given ${givenNoticeObject.successList.length.toLocaleString()} success string(s) plus ${givenNoticeObject.noticeList.length.toLocaleString()} notice(s)`);


  var standardisedNoticeList = givenNoticeObject.noticeList; // TODO: Why did we need this???

  maximumHiddenNotices = DEFAULT_MAXIMUM_HIDDEN_NOTICES;maximumHiddenNoticesMessage = DEFAULT_MAXIMUM_HIDDEN_NOTICES_MESSAGE;
  maximumSimilarMessages = DEFAULT_MAXIMUM_SIMILAR_MESSAGES;
  try {
    maximumSimilarMessages = optionalProcessingOptions.maximumSimilarMessages;
  } catch (npfMSMerror) {}
  if (typeof maximumSimilarMessages !== 'number' || isNaN(maximumSimilarMessages)) {
    maximumSimilarMessages = DEFAULT_MAXIMUM_SIMILAR_MESSAGES;
    // debugLog(`Using default maximumSimilarMessages=${maximumSimilarMessages}`);
  }
  // else userLog(`Using supplied maximumSimilarMessages=${maximumSimilarMessages} cf. default=${DEFAULT_MAXIMUM_SIMILAR_MESSAGES}`);

  // Check for duplicate notices in the noticeList
  // This might indicate that a function is being called twice unnecessarily
  // This entire section may be commented out of production code
  // It only really makes sense if the debugChain is enabled
  if (givenNoticeObject.noticeList && givenNoticeObject.noticeList.length)
  if (givenNoticeObject.noticeList.length > 8000) {
    (0, _utilities.userLog)("processNoticesCommon: ".concat(givenNoticeObject.noticeList.length.toLocaleString(), " notices is too many to search for duplicates!"));
  } else {var


    uniqueListContains = function uniqueListContains(item) {// returns -1 or the index of the first match
      for (var ix = 0; ix < uniqueList.length; ix++) {
        var thisUniqueNotice = uniqueList[ix];
        if ( // compare as few essentialfields as possible to find matches
        thisUniqueNotice.priority === item.priority &&
        thisUniqueNotice.message === item.message && (
        thisUniqueNotice.details === item.details || thisUniqueNotice.details === undefined || item.details === undefined) && (
        thisUniqueNotice.repoCode === item.repoCode || thisUniqueNotice.repoCode === undefined || item.repoCode === undefined) && (
        thisUniqueNotice.filename === item.filename || thisUniqueNotice.filename === undefined || item.filename === undefined) && (
        thisUniqueNotice.rowID === item.rowID || thisUniqueNotice.rowID === undefined || item.rowID === undefined) && (
        thisUniqueNotice.lineNumber === item.lineNumber || thisUniqueNotice.lineNumber === undefined || item.lineNumber === undefined) && (
        thisUniqueNotice.characterIndex === item.characterIndex || thisUniqueNotice.characterIndex === undefined || item.characterIndex === undefined) && (
        thisUniqueNotice.excerpt === item.excerpt || thisUniqueNotice.excerpt === undefined || item.excerpt === undefined) && (
        thisUniqueNotice.extra === item.extra || thisUniqueNotice.extra === undefined || item.extra === undefined))

        return ix;
      }
      return -1;
    };(0, _utilities.userLog)("processNoticesCommon: Checking ".concat(givenNoticeObject.noticeList.length.toLocaleString(), " notices for duplicates\u2026"));var uniqueList = [];var _iterator = _createForOfIteratorHelper(
    standardisedNoticeList),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var thisGivenNotice = _step.value;
        var xx = void 0;
        if ((xx = uniqueListContains(thisGivenNotice)) === -1) // wasnâ€™t found
          uniqueList.push(thisGivenNotice);else
        (0, _utilities.userLog)("Duplicate notices:\n".concat(JSON.stringify(thisGivenNotice), "\nwhen had\n").concat(JSON.stringify(uniqueList[xx])));
      }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
    if (uniqueList.length !== givenNoticeObject.noticeList.length)
    (0, _utilities.userLog)("Here with ".concat(givenNoticeObject.noticeList.length.toLocaleString(), " notices and ").concat(uniqueList.length.toLocaleString(), " unique notices"));
  }


  // Run a check through the noticeList to help discover any programming errors that need fixing
  // This entire section may be commented out of production code
  if (givenNoticeObject.noticeList && givenNoticeObject.noticeList.length) {
    // eslint-disable-next-line no-unused-vars
    var ALL_TSV_FIELDNAMES = ['Book', 'Chapter', 'Verse', 'Reference',
    'ID', 'Tags', 'SupportReference',
    'OrigWords', 'TWLink',
    'OrigQuote', 'Quote', 'Occurrence', 'GLQuote',
    'Question', 'Response',
    'OccurrenceNote', 'Note'];
    var numberStore = {},duplicatePriorityList = [];var _iterator2 = _createForOfIteratorHelper(
    standardisedNoticeList),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var _thisGivenNotice = _step2.value;
        var thisPriority = _thisGivenNotice.priority,thisMsg = _thisGivenNotice.message;
        //(typeof thisPriority === 'number' && thisPriority > 0 && thisPriority < 10000, `BAD PRIORITY for ${JSON.stringify(thisGivenNotice)}`);
        //parameterAssert(typeof thisMsg === 'string' && thisMsg.length >= 10, `BAD MESSAGE for ${JSON.stringify(thisGivenNotice)}`);

        // Check that notice priority numbers are unique (to detect programming errors)
        var oldMsg = numberStore[thisPriority];
        if (oldMsg && oldMsg !== thisMsg && !duplicatePriorityList.includes(thisPriority)
        // Some of the messages include the troubling character in the message
        //    so we expect them to differ slightly
        && !thisMsg.startsWith('Mismatched ') &&
        !thisMsg.startsWith('Unexpected doubled ') &&
        !thisMsg.startsWith('Unexpected space after ') &&
        !thisMsg.startsWith('Unexpected content after \\') &&
        !thisMsg.startsWith('USFMGrammar: ') &&
        !thisMsg.startsWith('Bad punctuation nesting: ') &&
        !thisMsg.startsWith('At end of text with unclosed ') &&
        !thisMsg.startsWith('Possible mismatched ') &&
        !thisMsg.endsWith(' character combination') &&
        !thisMsg.endsWith(' character after space') &&
        !thisMsg.endsWith(' character at start of line') &&
        !thisMsg.endsWith(' character at end of line') &&
        !thisMsg.endsWith(' marker at start of line') &&
        !thisMsg.endsWith(' closing character (no matching opener)') &&
        !thisMsg.endsWith(' closing character doesnâ€™t match'))
        {
          console.error("POSSIBLE PROGRAMMING ERROR: priority ".concat(thisPriority, " has at least two different messages: '").concat(oldMsg, "' and '").concat(thisMsg, "'"));
          duplicatePriorityList.push(thisPriority); // so that we only give the error once
        }

        // Check fields for bad values, and also across fields for unexpected combinations
        var thisRepoName = _thisGivenNotice.repoName,
        thisFilename = _thisGivenNotice.filename,thisLineNumber = _thisGivenNotice.lineNumber,
        thisC = _thisGivenNotice.C,thisV = _thisGivenNotice.V,
        thisRowID = _thisGivenNotice.rowID,thisFieldName = _thisGivenNotice.fieldName,
        thisLocation = _thisGivenNotice.location,thisExtra = _thisGivenNotice.extra;
        if (thisRepoName) {
          //parameterAssert(thisRepoName.indexOf(' ') < 0 && thisRepoName.indexOf('/') < 0 && thisRepoName.indexOf('\\') < 0, `repoName '${thisRepoName}' contains unexpected characters in ${JSON.stringify(thisGivenNotice)}`);
          if (thisLocation) {//parameterAssert(thisLocation.indexOf(thisRepoName) < 0, `repoName is repeated in location in ${JSON.stringify(thisGivenNotice)}`);
          }
        }
        if (thisFilename) {
          (0, _utilities.logicAssert)(thisFilename.indexOf(':') < 0 && thisFilename.indexOf('\\') < 0, "filename '".concat(thisFilename, "' contains unexpected characters in ").concat(JSON.stringify(_thisGivenNotice)));
          (0, _utilities.logicAssert)(ALL_TSV_FIELDNAMES.indexOf(thisFilename) < 0, "filename '".concat(thisFilename, "' contains a TSV fieldName!"));
          // NOTE: Some OBS and other messages have to include part of the part in the 'filename' (to prevent ambiguity) so we donâ€™t disallow forward slash
          // if (!thisRepoName || !(thisRepoName.endsWith('_obs') || thisRepoName.endsWith('_ta') || thisRepoName.endsWith('_tw')))
          //     //parameterAssert(thisFilename.indexOf('/') < 0, `filename '${thisFilename}' contains unexpected characters in ${JSON.stringify(thisGivenNotice)}`);
          if (thisLocation)
          (0, _utilities.logicAssert)(thisLocation.indexOf(thisFilename) < 0, "filename is repeated in location in ".concat(JSON.stringify(_thisGivenNotice)));
        }
        if (thisC)
        (0, _utilities.logicAssert)(thisC === 'front' || !isNaN(thisC * 1), "C '".concat(thisC, "' contains unexpected characters in ").concat(JSON.stringify(_thisGivenNotice)));
        if (thisV) {// NOTE: We don't allow for a en-dash in verse ranges -- should we?
          if (thisV.indexOf('-') !== -1) {// it contains a hyphen, i.e., a verse range
            var vBits = thisV.split('-');
            (0, _utilities.logicAssert)(vBits.length === 2 && !isNaN(vBits[0] * 1) && !isNaN(vBits[1] * 1), "V '".concat(thisV, "' verse range contains unexpected characters in ").concat(JSON.stringify(_thisGivenNotice)));
          } else // NOTE: Question mark below is in "bad verse number" notices
            (0, _utilities.logicAssert)(thisV === 'intro' || thisV === '?' || !isNaN(thisV * 1), "V '".concat(thisV, "' contains unexpected characters in ").concat(JSON.stringify(_thisGivenNotice)));
        }
        if (thisRowID) {
          (0, _utilities.logicAssert)(thisRowID.indexOf(' ') < 0 && thisRowID.indexOf('/') < 0 && thisRowID.indexOf('\\') < 0, "rowID '".concat(thisRowID, "' contains unexpected characters in ").concat(JSON.stringify(_thisGivenNotice)));
          if (thisLocation)
          (0, _utilities.logicAssert)(thisLocation.indexOf(thisRowID) < 0, "rowID is repeated in location in ".concat(JSON.stringify(_thisGivenNotice)));
        }
        if (thisFieldName) {
          // NOTE: fieldName can be a USFM marker, e.g., 'from \w'
          (0, _utilities.logicAssert)(thisFieldName.indexOf('/') < 0, "fieldName '".concat(thisFieldName, "' contains unexpected characters in ").concat(JSON.stringify(_thisGivenNotice)));
          if (thisLocation)
          (0, _utilities.logicAssert)(thisFieldName === 'w' // 'w' is just too likely to occur in the location string
          || thisLocation.indexOf(thisFieldName) < 0, "fieldName is repeated in location in ".concat(JSON.stringify(_thisGivenNotice)));
        }
        if (thisLineNumber) {
          (0, _utilities.logicAssert)(typeof thisLineNumber === 'number' && thisLineNumber > 0, "lineNumber '".concat(thisLineNumber, "' contains unexpected value in ").concat(JSON.stringify(_thisGivenNotice)));
          // Note: lineNumber can occur in location, e.g., in 3 in '3JN' or 'Door43' so have to take additional care not to give false alarms
          if (thisLocation && thisLineNumber > 4 && thisLineNumber !== 43)
            // && (!thisGivenNotice.bookID || thisGivenNotice.bookID.indexOf(thisLineNumber + '') < 0)
            (0, _utilities.logicAssert)(thisLocation.indexOf(thisLineNumber + '') < 0 && thisLocation.indexOf(thisLineNumber.toLocaleString()) < 0, "lineNumber might be repeated in location in ".concat(JSON.stringify(_thisGivenNotice)));
        }
        if (thisExtra) {(0, _utilities.logicAssert)(thisExtra !== '01', "extra should not be '".concat(thisExtra, "'"));}
        numberStore[thisPriority] = thisMsg;
      }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}
  }


  var resultObject = { // inititalise with our new fields
    numIgnoredNotices: 0, // Ignored by unique priority number
    numDisabledNotices: 0, // Individually disabled
    numSuppressedNotices: 0, // Low priority notices dropped completely
    processingOptions: optionalProcessingOptions // Just helpfully includes what we were given (may be undefined)
  };
  // Copy across all the other properties that we arenâ€™t interested in
  for (var gnoPropertyName in givenNoticeObject) {
    if (gnoPropertyName !== 'successList' && gnoPropertyName !== 'noticeList')
    resultObject[gnoPropertyName] = givenNoticeObject[gnoPropertyName];}

  // Fetch our processing parameters
  var ignorePriorityNumberList;
  try {
    ignorePriorityNumberList = optionalProcessingOptions.ignorePriorityNumberList;
  } catch (npfIPNLerror) {}
  if (ignorePriorityNumberList === undefined) {
    ignorePriorityNumberList = DEFAULT_IGNORE_PRIORITY_NUMBER_LIST;
    // debugLog(`Using default ignorePriorityNumberList=${JSON.stringify(ignorePriorityNumberList)}`);
  } else
  (0, _utilities.userLog)("processNoticesCommon: Using supplied ignorePriorityNumberList=".concat(JSON.stringify(ignorePriorityNumberList), " cf. default=").concat(JSON.stringify(DEFAULT_IGNORE_PRIORITY_NUMBER_LIST)));
  //parameterAssert(Array.isArray(ignorePriorityNumberList), `ignorePriorityNumberList should be an Array, not ${typeof ignorePriorityNumberList}=${ignorePriorityNumberList}`);
  var sortBy;
  try {
    sortBy = optionalProcessingOptions.sortBy;
    // debugLog(`processNoticesCommon: Setting sortBy='${sortBy}' from optionalProcessingOptions`);
  } catch (npfSBerror) {}
  if (sortBy === undefined) {
    sortBy = 'ByPriority';
    // debugLog(`processNoticesCommon: Using default sortBy='${sortBy}'`);
  }
  // else userLog(`processNoticesCommon: Using supplied sortBy='${sortBy}' cf. default='ByPriority'`);
  var cutoffPriorityLevel;
  try {
    cutoffPriorityLevel = optionalProcessingOptions.cutoffPriorityLevel;
  } catch (npfCPLerror) {}
  if (cutoffPriorityLevel === undefined) {
    cutoffPriorityLevel = DEFAULT_CUTOFF_PRIORITY_LEVEL;
    // debugLog(`Using default cutoffPriorityLevel=${cutoffPriorityLevel}`);
  } else
  (0, _utilities.userLog)("Using supplied cutoffPriorityLevel=".concat(cutoffPriorityLevel, " cf. default=").concat(DEFAULT_CUTOFF_PRIORITY_LEVEL));
  // if (cutoffPriorityLevel > errorPriorityLevel)
  // resultObject.errorList.push({999, "Cutoff level must not be higher than error level", excerpt:`(${cutoffPriorityLevel} vs ${errorPriorityLevel})`, " in processNoticesCommon options"]);

  var showDisabledNoticesFlag = optionalProcessingOptions.showDisabledNoticesFlag === true;
  if (showDisabledNoticesFlag) (0, _utilities.userLog)("showDisabledNoticesFlag=".concat(showDisabledNoticesFlag));

  // Adjust the list of success notices to combine multiple similar messages, e.g., Checked this book, Checked that book
  //  into one summary message, e.g., Checked this and that books.
  if (givenNoticeObject.successList) {
      // Handle the successList
      if (givenNoticeObject.successList.length < 5)
      resultObject.successList = givenNoticeObject.successList;else
      {// successList is fairly long -- maybe we can shorten it by combining multiple similar messages
        var BibleRegex = /\d\d-(\w\w\w).usfm/; // "Checked JUD file: 66-JUD.usfm"
        var NotesRegex = /\d\d-(\w\w\w).tsv/; // "Checked EN_TN_01-GEN.TSV file: en_tn_01-GEN.tsv"
        // const TWLRegex = /twl_(\w\w\w).tsv/; // From repoCheck "Checked en_twl BBB file: twl_BBB.tsv"
        var manifestRegex = /Checked ([\w\-_]{2,25}) manifest file/;
        var READMEregex = /Checked ([\w\-_]{2,25}) README file/;
        var LICENSEregex = /Checked ([\w\-_]{2,25}) LICENSE file/;
        resultObject.successList = [];
        var UHBBookList = [],UGNTBookList = [],LTBookList = [],STBookList = [],TNBookList = [],TN2BookList = [],TQ2BookList = [];
        var USFMBookList = [],TSVNotesList = [],manifestsList = [],READMEsList = [],LICENSEsList = [];
        var TNList = [],TQList = [],TWLList = [];var _iterator3 = _createForOfIteratorHelper(
        givenNoticeObject.successList),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var thisParticularSuccessMsg = _step3.value;
            // debugLog("thisParticularSuccessMsg", thisParticularSuccessMsg);
            var regexResult = void 0;
            if (thisParticularSuccessMsg.startsWith('Checked UHB file: '))
            UHBBookList.push(thisParticularSuccessMsg.substring(18, thisParticularSuccessMsg.length));else
            if (thisParticularSuccessMsg.startsWith('Checked UGNT file: '))
            UGNTBookList.push(thisParticularSuccessMsg.substring(19, thisParticularSuccessMsg.length));else
            if (thisParticularSuccessMsg.startsWith('Checked TWL file: '))
            TWLList.push(thisParticularSuccessMsg.substring(18, thisParticularSuccessMsg.length));else
            if (thisParticularSuccessMsg.startsWith('Checked LT file: '))
            LTBookList.push(thisParticularSuccessMsg.substring(17, thisParticularSuccessMsg.length));else
            if (thisParticularSuccessMsg.startsWith('Checked ST file: '))
            STBookList.push(thisParticularSuccessMsg.substring(17, thisParticularSuccessMsg.length));else
            if (thisParticularSuccessMsg.startsWith('Checked TN file: '))
            TNBookList.push(thisParticularSuccessMsg.substring(17, thisParticularSuccessMsg.length));else
            if (thisParticularSuccessMsg.startsWith('Checked TN2 file: '))
            TN2BookList.push(thisParticularSuccessMsg.substring(18, thisParticularSuccessMsg.length));else
            if (thisParticularSuccessMsg.startsWith('Checked TQ2 file: '))
            TQ2BookList.push(thisParticularSuccessMsg.substring(18, thisParticularSuccessMsg.length));else
            if (thisParticularSuccessMsg.startsWith('Checked TN2 ') && thisParticularSuccessMsg.substring(14, 20) === ' file:')
            TNList.push(thisParticularSuccessMsg.substring(21, thisParticularSuccessMsg.length));else
            if (thisParticularSuccessMsg.startsWith('Checked TQ2 ') && thisParticularSuccessMsg.substring(14, 20) === ' file:')
            TQList.push(thisParticularSuccessMsg.substring(21, thisParticularSuccessMsg.length));else
            if (thisParticularSuccessMsg.startsWith('Checked TWL ') && thisParticularSuccessMsg.substring(15, 21) === ' file:')
            TWLList.push(thisParticularSuccessMsg.substring(22, thisParticularSuccessMsg.length));else
            if ((regexResult = BibleRegex.exec(thisParticularSuccessMsg)) !== null
            // but donâ€™t do it for Book Package checks (in different repos)
            && thisParticularSuccessMsg.startsWith("Checked ".concat(regexResult[1], " file")))
            USFMBookList.push(regexResult[1]);else
            if ((regexResult = NotesRegex.exec(thisParticularSuccessMsg)) !== null
            // but donâ€™t do it for Book Package checks (in different repos)
            && thisParticularSuccessMsg.startsWith("Checked ".concat(regexResult[1], " file")))
            TSVNotesList.push(regexResult[1]);
            // else if ((regexResult = TWLRegex.exec(thisParticularSuccessMsg)) !== null)
            //     TWLList.push(regexResult[1]);
            else if ((regexResult = manifestRegex.exec(thisParticularSuccessMsg)) !== null)
              manifestsList.push(regexResult[1]);else
              if ((regexResult = READMEregex.exec(thisParticularSuccessMsg)) !== null)
              READMEsList.push(regexResult[1]);else
              if ((regexResult = LICENSEregex.exec(thisParticularSuccessMsg)) !== null)
              LICENSEsList.push(regexResult[1]);else
                // Just copy it across
                resultObject.successList.push(thisParticularSuccessMsg);
          }
          // Recreate original messages if exactly one found
        } catch (err) {_iterator3.e(err);} finally {_iterator3.f();}if (UHBBookList.length === 1)
        resultObject.successList.push("Checked UHB file: ".concat(UHBBookList[0]));
        if (UGNTBookList.length === 1)
        resultObject.successList.push("Checked UGNT file: ".concat(UGNTBookList[0]));
        // if (TWLBookList.length === 1)
        // resultObject.successList.push(`Checked TWL file: ${TWLBookList[0]}`);
        if (LTBookList.length === 1)
        resultObject.successList.push("Checked LT file: ".concat(LTBookList[0]));
        if (STBookList.length === 1)
        resultObject.successList.push("Checked ST file: ".concat(STBookList[0]));
        if (TNBookList.length === 1)
        resultObject.successList.push("Checked TN file: ".concat(TNBookList[0]));
        if (TN2BookList.length === 1)
        resultObject.successList.push("Checked TN2 file: ".concat(TN2BookList[0]));
        if (TQ2BookList.length === 1)
        resultObject.successList.push("Checked TQ2 file: ".concat(TQ2BookList[0]));
        if (USFMBookList.length === 1)
        resultObject.successList.push("Checked ".concat(USFMBookList[0], " file"));
        if (TSVNotesList.length === 1)
        resultObject.successList.push("Checked ".concat(TSVNotesList[0], " file"));
        if (TNList.length === 1)
        resultObject.successList.push("Checked TN2 file: ".concat(TNList[0]));
        if (TQList.length === 1)
        resultObject.successList.push("Checked TQ2 file: ".concat(TQList[0]));
        if (TWLList.length === 1)
        resultObject.successList.push("Checked TWL file: ".concat(TWLList[0]));
        if (manifestsList.length === 1)
        resultObject.successList.push("Checked ".concat(manifestsList[0], " manifest file"));
        if (READMEsList.length === 1)
        resultObject.successList.push("Checked ".concat(READMEsList[0], " README file"));
        if (LICENSEsList.length === 1)
        resultObject.successList.push("Checked ".concat(LICENSEsList[0], " LICENSE file"));
        // Put summary messages at the beginning of the list if more than one found
        // Process these messages in the opposite order than we want them to display (since we push to beginning of list each time)
        if (LICENSEsList.length > 1)
        resultObject.successList.unshift("Checked ".concat(LICENSEsList.length, " LICENSE files: ").concat(LICENSEsList.join(', ')));
        if (READMEsList.length > 1)
        resultObject.successList.unshift("Checked ".concat(READMEsList.length, " README files: ").concat(READMEsList.join(', ')));
        if (manifestsList.length > 1)
        resultObject.successList.unshift("Checked ".concat(manifestsList.length, " manifest files: ").concat(manifestsList.join(', ')));
        if (TSVNotesList.length > 1)
        resultObject.successList.unshift("Checked ".concat(TSVNotesList.length, " TSV notes files: ").concat(TSVNotesList.join(', ')));
        if (USFMBookList.length > 1)
        resultObject.successList.unshift("Checked ".concat(USFMBookList.length, " USFM Bible files: ").concat(USFMBookList.join(', ')));
        if (TWLList.length > 1)
        resultObject.successList.unshift("Checked ".concat(TWLList.length, " TWL files: ").concat(TWLList.join(', ')));
        if (TQList.length > 1)
        resultObject.successList.unshift("Checked ".concat(TQList.length, " TQ2 files: ").concat(TQList.join(', ')));
        if (TNList.length > 1)
        resultObject.successList.unshift("Checked ".concat(TNList.length, " TN files: ").concat(TNList.join(', ')));
        if (TQ2BookList.length > 1)
        resultObject.successList.unshift("Checked ".concat(TQ2BookList.length, " TQ2 files: ").concat(TQ2BookList.join(', ')));
        if (TN2BookList.length > 1)
        resultObject.successList.unshift("Checked ".concat(TN2BookList.length, " TN2 files: ").concat(TN2BookList.join(', ')));
        if (TNBookList.length > 1)
        resultObject.successList.unshift("Checked ".concat(TNBookList.length, " TN files: ").concat(TNBookList.join(', ')));
        if (STBookList.length > 1)
        resultObject.successList.unshift("Checked ".concat(STBookList.length, " ST files: ").concat(STBookList.join(', ')));
        if (LTBookList.length > 1)
        resultObject.successList.unshift("Checked ".concat(LTBookList.length, " LT files: ").concat(LTBookList.join(', ')));
        // if (TWLBookList.length > 1)
        // resultObject.successList.unshift(`Checked ${TWLBookList.length} TWL files: ${LTBookList.join(', ')}`);
        if (UGNTBookList.length > 1)
        resultObject.successList.unshift("Checked ".concat(UGNTBookList.length, " UGNT files: ").concat(UGNTBookList.join(', ')));
        if (UHBBookList.length > 1)
        resultObject.successList.unshift("Checked ".concat(UHBBookList.length, " UHB files: ").concat(UHBBookList.join(', ')));
      }} else
  resultObject.successList = [];

  // Handle the checkedFilenames list
  //  which might have 100s or 1,000s of .md filenames
  if (resultObject.checkedFilenames && resultObject.checkedFilenames.length > 10) {
    // debugLog(`Have ${resultObject.checkedFilenames.length} checkedFilenames`);
    resultObject.checkedFilenames = (0, _toConsumableArray2.default)(new Set(resultObject.checkedFilenames)); // Only keep unique ones
    // debugLog(`Now have ${resultObject.checkedFilenames.length} checkedFilenames`);
    // debugLog(JSON.stringify(resultObject.checkedFilenames));
  }

  // Specialised processing
  // If have s5 marker warnings, add one summary error
  // consoleLogObject('standardisedNoticeList', standardisedNoticeList);
  var _iterator4 = _createForOfIteratorHelper(standardisedNoticeList),_step4;try {for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {var thisParticularNotice = _step4.value;
      // debugLog("thisParticularNotice", JSON.stringify(thisParticularNotice));
      if (thisParticularNotice.message.indexOf('\\s5') >= 0) {
        var thisNewNotice = _objectSpread(_objectSpread({},
        thisParticularNotice), {}, { priority: 701, message: "\\s5 fields should be coded as \\ts\\* milestones", location: " in ".concat(givenNoticeObject.checkType),
          // I think we need to delete these fields below as they were probably set in thisParticularNotice
          C: undefined, V: undefined, characterIndex: undefined, excerpt: undefined });

        // if (thisParticularNotice.filename && thisParticularNotice.filename.length)
        //     thisNewNotice.filename = thisParticularNotice.filename; // Sometimes we have an additional file identifier
        // if (thisParticularNotice.repoName && thisParticularNotice.repoName.length)
        //     thisNewNotice.repoName = thisParticularNotice.repoName; // Sometimes we have an additional file identifier
        // if (thisParticularNotice.extra && thisParticularNotice.extra.length)
        //     thisNewNotice.extra = thisParticularNotice.extra; // Sometimes we have an additional file identifier
        standardisedNoticeList.push(thisNewNotice);
        break;
      }
    }

    // Remove any notices that they have asked us to ignore
    //  plus any from our list of disabled notices (for certain repos/files, etc.)
  } catch (err) {_iterator4.e(err);} finally {_iterator4.f();}var remainingNoticeList = [];var _iterator5 = _createForOfIteratorHelper(
  standardisedNoticeList),_step5;try {for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {var _thisNotice3 = _step5.value;
      if (ignorePriorityNumberList.includes(_thisNotice3.priority))
      resultObject.numIgnoredNotices++;else
      if ((0, _disabledNotices.isDisabledNotice)(_thisNotice3)) {
        if (showDisabledNoticesFlag) {
          _thisNotice3.message = "(disabled) ".concat(_thisNotice3.message);
          remainingNoticeList.push(_thisNotice3);
        } else // ignore it as usual
          resultObject.numDisabledNotices++;} else

      remainingNoticeList.push(_thisNotice3);
    }} catch (err) {_iterator5.e(err);} finally {_iterator5.f();}
  if (resultObject.numIgnoredNotices)
  (0, _utilities.userLog)("processNoticesCommon: Ignored ".concat(resultObject.numIgnoredNotices.toLocaleString(), " generic notice(s) out of ").concat(givenNoticeObject.noticeList.length.toLocaleString()));
  if (resultObject.numDisabledNotices)
  (0, _utilities.userLog)("processNoticesCommon: Disabled ".concat(resultObject.numDisabledNotices.toLocaleString(), " specific notice(s) out of ").concat(givenNoticeObject.noticeList.length.toLocaleString()));

  // Cut off the lowest priority notices if requested
  if (cutoffPriorityLevel > 0) {
    var newNoticeList = [];var _iterator6 = _createForOfIteratorHelper(
    remainingNoticeList),_step6;try {for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {var thisNotice = _step6.value;
        if (thisNotice.priority < cutoffPriorityLevel)
        resultObject.numSuppressedNotices++;else
        newNoticeList.push(thisNotice);}} catch (err) {_iterator6.e(err);} finally {_iterator6.f();}
    remainingNoticeList = newNoticeList;
  }
  // if (cutoffPriorityLevel > errorPriorityLevel)
  // resultObject.errorList.push({999, "Cutoff level must not be higher than error level", excerpt:`(${cutoffPriorityLevel} vs ${errorPriorityLevel})`, " in processNoticesCommon options"]);

  // Ensure that our displayed message list doesn't end up too huge for the browser to handle
  if (remainingNoticeList.length > 6000) {
    maximumHiddenNotices = Math.min(20, maximumHiddenNotices);
    maximumHiddenNoticesMessage = "Further hidden notices (beyond ".concat(maximumHiddenNotices, ") were suppressed!");
  }
  if (remainingNoticeList.length > 10000) {
    maximumSimilarMessages = Math.min(2, maximumSimilarMessages);
    standardisedNoticeList.push({ priority: 1, message: "Reduced numbers of similar and hidden messages because of large list (".concat(standardisedNoticeList.length.toLocaleString(), ")"), location: " during notice processing" });
  }

  // Sort the remainingNoticeList as required
  var SORT_LIST = ['TN', 'TN2', 'LT', 'ST', 'UHB', 'UGNT', 'TWL', 'TW', 'TQ', 'TQ2', 'SN', 'SQ', 'TA', undefined, 'README', 'LICENSE'];
  if (sortBy === 'ByPriority' || sortBy === 'ByRepo')
    // NOTE: We do have some notices with the same priority but different actual messages, esp. 191 Unexpected xx character after space
    remainingNoticeList.sort(function (a, b) {return "".concat(String(b.priority).padStart(3, '0')).concat(b.message) > "".concat(String(a.priority).padStart(3, '0')).concat(a.message);});else
  if (sortBy !== 'AsFound')
  console.error("Sorting '".concat(sortBy, "' is not implemented yet!!!"));
  if (sortBy === 'ByRepo') // sort again by repoCode string
    remainingNoticeList.sort(function (a, b) {return SORT_LIST.indexOf(a.repoCode) - SORT_LIST.indexOf(b.repoCode);});
  // remainingNoticeList.sort(function (a, b) { return b.repoCode > a.repoCode; });

  // Add in extra info if itâ€™s there -- default is to prepend it to the msg
  //  Doing this prevents errors/warnings from different repos or books from being combined
  if (remainingNoticeList.length &&
  remainingNoticeList[0].extra && remainingNoticeList[0].extra.length) {
    // debugLog(`We need to add the extra location, e.g. '${remainingNoticeList[0][5]}': will prepend it to the messages`);
    var _newNoticeList = [];var _iterator7 = _createForOfIteratorHelper(
    remainingNoticeList),_step7;try {for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {var _thisNotice = _step7.value;
        var _thisExtra = _thisNotice.extra;
        // logicAssert(thisExtra && thisExtra.length, `Expect thisNotice to have an "extra" field: ${JSON.stringify(thisNotice)}`)
        var newNotice = _objectSpread({}, _thisNotice);
        // We donâ€™t need the extra field if we've already got this info
        if (_thisExtra && _thisExtra !== _thisNotice.repoName && _thisExtra !== _thisNotice.bookID)
        newNotice.message = "".concat(_thisExtra, " ").concat(_thisNotice.message);
        delete newNotice.extra; // since we've used it (if it existed)
        _newNoticeList.push(newNotice);
      }} catch (err) {_iterator7.e(err);} finally {_iterator7.f();}
    remainingNoticeList = _newNoticeList;
  }

  // Count the number of occurrences of each message
  //  ready for further processing
  var allTotals = {};
  for (var _i = 0, _remainingNoticeList = remainingNoticeList; _i < _remainingNoticeList.length; _i++) {var _thisNotice2 = _remainingNoticeList[_i];
    var thisCombinedID = "".concat(String(_thisNotice2.priority).padStart(3, '0')).concat(_thisNotice2.message); // Could have identical worded messages but with different priorities
    if (isNaN(allTotals[thisCombinedID])) allTotals[thisCombinedID] = 1;else
    allTotals[thisCombinedID]++;
  }

  // debugLog(`processNoticesCommon is returning resultObject=${JSON.stringify(resultObject)}`);
  return [remainingNoticeList, allTotals, resultObject];
}
// end of processNoticesCommon function


/**
 *
 * @param {Object} givenNoticeObject
 * @param {Object} optionalProcessingOptions
 * @return {Object} containing errorList and warningList
 */
function processNoticesToErrorsWarnings(givenNoticeObject, optionalProcessingOptions) {
  /*
      Available options are:
          errorPriorityLevel (integer; default is DEFAULT_ERROR_PRIORITY_LEVEL above)
          maximumSimilarMessages (integer; default is DEFAULT_MAXIMUM_SIMILAR_MESSAGES above)
       Returns an object with:
          successList: a list of strings describing what has been checked
          errorList
          warningList
          numIgnoredNotices, numDisabledNotices, numSuppressedNotices, numHiddenErrors, numHiddenWarnings
          processingOptions: just helpfully passes on what we were given (may be undefined)
      Also, any other parameters are just passed through,
          although filenameList might be abbreviated, e.g. for 100s of .md files.
  */

  //     userLog(`processNoticesToErrorsWarnings v${NOTICE_PROCESSOR_VERSION_STRING} with options=${JSON.stringify(optionalProcessingOptions)}
  //    Given ${givenNoticeObject.successList.length.toLocaleString()} success string(s) plus ${givenNoticeObject.noticeList.length.toLocaleString()} notice(s)`);

  var _processNoticesCommon = processNoticesCommon(givenNoticeObject, optionalProcessingOptions),_processNoticesCommon2 = (0, _slicedToArray2.default)(_processNoticesCommon, 3),remainingNoticeList = _processNoticesCommon2[0],allTotals = _processNoticesCommon2[1],resultObject = _processNoticesCommon2[2];

  // Add the fields that we need here to the existing resultObject
  resultObject.errorList = [];resultObject.warningList = [];
  resultObject.numHiddenErrors = 0;resultObject.numHiddenWarnings = 0;

  var errorPriorityLevel;
  try {
    errorPriorityLevel = optionalProcessingOptions.errorPriorityLevel;
  } catch (npfEPLerror) {}
  if (errorPriorityLevel === undefined) {
    errorPriorityLevel = DEFAULT_ERROR_PRIORITY_LEVEL;
    // debugLog(`Using default errorPriorityLevel=${errorPriorityLevel}`);
  } else
  (0, _utilities.userLog)("Using supplied errorPriorityLevel=".concat(errorPriorityLevel, " cf. default=").concat(DEFAULT_ERROR_PRIORITY_LEVEL));

  // Check for repeated notices that should be compressed
  //  while simultaneously separating into error and warning lists
  var counter = {};var _iterator8 = _createForOfIteratorHelper(
  remainingNoticeList),_step8;try {for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {var thisNotice = _step8.value;
      var thisPriority = thisNotice.priority,thisMsg = thisNotice.message;
      var thisCombinedID = "".concat(String(thisNotice.priority).padStart(3, '0')).concat(thisNotice.message); // Could have identical worded messages but with different priorities
      if (isNaN(counter[thisCombinedID])) counter[thisCombinedID] = 1;else
      counter[thisCombinedID]++;
      if (maximumSimilarMessages > 0 && allTotals[thisCombinedID] > maximumSimilarMessages + 1 && counter[thisCombinedID] === maximumSimilarMessages + 1) {
        if (thisPriority >= errorPriorityLevel) {
          var numHidden = allTotals[thisCombinedID] - maximumSimilarMessages;
          (0, _utilities.logicAssert)(numHidden !== 1, "Shouldn\u2019t suppress just one error of priority ".concat(thisPriority));
          var adjHidden = Math.min(numHidden, maximumHiddenNotices);
          var numSuppressed = numHidden - adjHidden;
          resultObject.errorList.push({ priority: thisPriority, message: thisMsg, location: " \u2191 ".concat(adjHidden.toLocaleString(), " MORE SIMILAR ERROR").concat(adjHidden === 1 ? '' : 'S', " HIDDEN").concat(numSuppressed ? " (PLUS ".concat(numSuppressed.toLocaleString(), " SUPPRESSED)") : ''), hiddenNotices: [thisNotice] });
          resultObject.numHiddenErrors++;
        } else {
          var _numHidden = allTotals[thisCombinedID] - maximumSimilarMessages;
          (0, _utilities.logicAssert)(_numHidden !== 1, "Shouldn\u2019t suppress just one warning of priority ".concat(thisPriority));
          var _adjHidden = Math.min(_numHidden, maximumHiddenNotices);
          var _numSuppressed = _numHidden - _adjHidden;
          resultObject.warningList.push({ priority: thisPriority, message: thisMsg, location: " \u2191 ".concat(_adjHidden.toLocaleString(), " MORE SIMILAR WARNING").concat(_adjHidden === 1 ? '' : 'S', " HIDDEN").concat(_numSuppressed ? " (PLUS ".concat(_numSuppressed.toLocaleString(), " SUPPRESSED)") : ''), hiddenNotices: [thisNotice] });
          resultObject.numHiddenWarnings++;
        }
      } else if (maximumSimilarMessages > 0 && counter[thisCombinedID] > maximumSimilarMessages + 1) {
        if (thisPriority >= errorPriorityLevel) {
          var previousObject = resultObject.errorList[resultObject.errorList.length - 1];
          try {
            if (previousObject.hiddenNotices.length < maximumHiddenNotices) {
              previousObject.hiddenNotices.push(thisNotice);
              resultObject.numHiddenErrors++;
            } else {// suppress these excess notices
              var lastHiddenNoticeObject = previousObject.hiddenNotices[previousObject.hiddenNotices.length - 1];
              if (lastHiddenNoticeObject.message !== maximumHiddenNoticesMessage)
              previousObject.hiddenNotices.push({ priority: thisNotice.priority, message: maximumHiddenNoticesMessage });
              resultObject.numSuppressedNotices++;
            }
          } catch (e) {// presumably no hidden Notices in previous Object
            console.assert(!previousObject.hiddenNotices, "Didn't expected hiddenNotices to be defined: ".concat(JSON.stringify(previousObject), " error was: ").concat(e.message));
            resultObject.numSuppressedNotices++;
          }
        } else {
          var _previousObject = resultObject.warningList[resultObject.warningList.length - 1];
          try {
            if (_previousObject.hiddenNotices.length < maximumHiddenNotices) {
              _previousObject.hiddenNotices.push(thisNotice);
              resultObject.numHiddenWarnings++;
            } else {// suppress these excess notices
              var _lastHiddenNoticeObject = _previousObject.hiddenNotices[_previousObject.hiddenNotices.length - 1];
              if (_lastHiddenNoticeObject.message !== maximumHiddenNoticesMessage)
              _previousObject.hiddenNotices.push({ priority: thisNotice.priority, message: maximumHiddenNoticesMessage });
              resultObject.numSuppressedNotices++;
            }
          } catch (e) {// presumably no hidden Notices in previous Object
            console.assert(!_previousObject.hiddenNotices, "Didn't expected hiddenNotices to be defined: ".concat(JSON.stringify(_previousObject), " error was: ").concat(e.message));
            resultObject.numSuppressedNotices++;
          }
        }
      } else if (thisPriority >= errorPriorityLevel)
      resultObject.errorList.push(thisNotice);else

      resultObject.warningList.push(thisNotice);
    }

    // debugLog(`processNoticesToErrorsWarnings is returning ${resultObject.successList.length} successes, ${resultObject.errorList.length} errors, and ${resultObject.warningList.length} warnings
    //   numIgnoredNotices=${resultObject.numIgnoredNotices} numHiddenErrors=${resultObject.numHiddenErrors} numHiddenWarnings=${resultObject.numHiddenWarnings}`);
  } catch (err) {_iterator8.e(err);} finally {_iterator8.f();}return resultObject;
}
// end of processNoticesToErrorsWarnings function


/**
 *
 * @param {Object} givenNoticeObject
 * @param {Object} optionalProcessingOptions
 * @return {Object} containing severeList, mediumList, and lowList
 */
function processNoticesToSevereMediumLow(givenNoticeObject, optionalProcessingOptions) {
  /*
      Available options are:
          severePriorityLevel (integer; default is DEFAULT_SEVERE_PRIORITY_LEVEL above)
          mediumPriorityLevel (integer; default is DEFAULT_MEDIUM_PRIORITY_LEVEL above)
          maximumSimilarMessages (integer; default is DEFAULT_MAXIMUM_SIMILAR_MESSAGES above)
       Returns an object with:
          successList: a list of strings describing what has been checked
          severeList
          mediumList
          lowList
          numIgnoredNotices, numDisabledNotices, numSuppressedNotices, numHiddenSevere, numHiddenMedium, numHiddenLow
          processingOptions: just helpfully passes on what we were given (may be undefined)
      Also, any other parameters are just passed through,
          although filenameList might be abbreviated, e.g. for 100s of .md files.
  */

  //     userLog(`processNoticesToSevereMediumLow v${NOTICE_PROCESSOR_VERSION_STRING} with options=${JSON.stringify(optionalProcessingOptions)}
  //    Given ${givenNoticeObject.successList.length.toLocaleString()} success string(s) plus ${givenNoticeObject.noticeList.length.toLocaleString()} notice(s)`);

  var _processNoticesCommon3 = processNoticesCommon(givenNoticeObject, optionalProcessingOptions),_processNoticesCommon4 = (0, _slicedToArray2.default)(_processNoticesCommon3, 3),remainingNoticeList = _processNoticesCommon4[0],allTotals = _processNoticesCommon4[1],resultObject = _processNoticesCommon4[2];

  // Add the fields that we need here to the existing resultObject
  resultObject.severeList = [];resultObject.mediumList = [];resultObject.lowList = [];
  resultObject.numHiddenSevere = 0;resultObject.numHiddenMedium = 0;resultObject.numHiddenLow = 0;

  var severePriorityLevel;
  try {
    severePriorityLevel = optionalProcessingOptions.severePriorityLevel;
  } catch (npfSPLerror) {}
  if (severePriorityLevel === undefined) {
    severePriorityLevel = DEFAULT_SEVERE_PRIORITY_LEVEL;
    // debugLog(`Using default severePriorityLevel=${severePriorityLevel}`);
  } else
  (0, _utilities.userLog)("Using supplied severePriorityLevel=".concat(severePriorityLevel, " cf. default=").concat(DEFAULT_SEVERE_PRIORITY_LEVEL));
  var mediumPriorityLevel;
  try {
    mediumPriorityLevel = optionalProcessingOptions.mediumPriorityLevel;
  } catch (nfpMPLerror) {}
  if (mediumPriorityLevel === undefined) {
    mediumPriorityLevel = DEFAULT_MEDIUM_PRIORITY_LEVEL;
    // debugLog(`Using default mediumPriorityLevel=${mediumPriorityLevel}`);
  } else
  (0, _utilities.userLog)("Using supplied mediumPriorityLevel=".concat(mediumPriorityLevel, " cf. default=").concat(DEFAULT_MEDIUM_PRIORITY_LEVEL));

  // Check for repeated notices that should be compressed
  //  while simultaneously separating into error and warning lists
  var counter = {};var _iterator9 = _createForOfIteratorHelper(
  remainingNoticeList),_step9;try {for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {var thisNotice = _step9.value;
      var thisPriority = thisNotice.priority,thisMsg = thisNotice.message;
      var thisCombinedID = "".concat(String(thisNotice.priority).padStart(3, '0')).concat(thisNotice.message); // Could have identical worded messages but with different priorities
      if (isNaN(counter[thisCombinedID])) counter[thisCombinedID] = 1;else
      counter[thisCombinedID]++;
      if (maximumSimilarMessages > 0 && allTotals[thisCombinedID] > maximumSimilarMessages + 1 && counter[thisCombinedID] === maximumSimilarMessages + 1) {
        if (thisPriority >= severePriorityLevel) {
          var numHidden = allTotals[thisCombinedID] - maximumSimilarMessages;
          (0, _utilities.logicAssert)(numHidden !== 1, "Shouldn\u2019t suppress just one severe error of priority ".concat(thisPriority));
          var adjHidden = Math.min(numHidden, maximumHiddenNotices);
          var numSuppressed = numHidden - adjHidden;
          resultObject.severeList.push({ priority: thisPriority, message: thisMsg, location: " \u2191 ".concat(adjHidden.toLocaleString(), " MORE SIMILAR ERROR").concat(adjHidden === 1 ? '' : 'S', " HIDDEN").concat(numSuppressed ? " (PLUS ".concat(numSuppressed.toLocaleString(), " SUPPRESSED)") : ''), hiddenNotices: [thisNotice] });
          resultObject.numHiddenSevere++;
        } else if (thisPriority >= mediumPriorityLevel) {
          var _numHidden2 = allTotals[thisCombinedID] - maximumSimilarMessages;
          (0, _utilities.logicAssert)(_numHidden2 !== 1, "Shouldn\u2019t suppress just one medium error of priority ".concat(thisPriority));
          var _adjHidden2 = Math.min(_numHidden2, maximumHiddenNotices);
          var _numSuppressed2 = _numHidden2 - _adjHidden2;
          resultObject.mediumList.push({ priority: thisPriority, message: thisMsg, location: " \u2191 ".concat(_adjHidden2.toLocaleString(), " MORE SIMILAR ERROR").concat(_adjHidden2 === 1 ? '' : 'S', " HIDDEN").concat(_numSuppressed2 ? " (PLUS ".concat(_numSuppressed2.toLocaleString(), " SUPPRESSED)") : ''), hiddenNotices: [thisNotice] });
          resultObject.numHiddenMedium++;
        } else {
          var _numHidden3 = allTotals[thisCombinedID] - maximumSimilarMessages;
          (0, _utilities.logicAssert)(_numHidden3 !== 1, "Shouldn\u2019t suppress just one low warning of priority ".concat(thisPriority));
          var _adjHidden3 = Math.min(_numHidden3, maximumHiddenNotices);
          var _numSuppressed3 = _numHidden3 - _adjHidden3;
          resultObject.lowList.push({ priority: thisPriority, message: thisMsg, location: " \u2191 ".concat(_adjHidden3.toLocaleString(), " MORE SIMILAR WARNING").concat(_adjHidden3 === 1 ? '' : 'S', " HIDDEN").concat(_numSuppressed3 ? " (PLUS ".concat(_numSuppressed3.toLocaleString(), " SUPPRESSED)") : ''), hiddenNotices: [thisNotice] });
          resultObject.numHiddenLow++;
        }
      } else if (maximumSimilarMessages > 0 && counter[thisCombinedID] > maximumSimilarMessages + 1) {
        if (thisPriority >= severePriorityLevel) {
          var previousObject = resultObject.severeList[resultObject.severeList.length - 1];
          try {
            if (previousObject.hiddenNotices.length < maximumHiddenNotices) {
              previousObject.hiddenNotices.push(thisNotice);
              resultObject.numHiddenSevere++;
            } else {// suppress these excess notices
              var lastHiddenNoticeObject = previousObject.hiddenNotices[previousObject.hiddenNotices.length - 1];
              if (lastHiddenNoticeObject.message !== maximumHiddenNoticesMessage)
              previousObject.hiddenNotices.push({ priority: thisNotice.priority, message: maximumHiddenNoticesMessage });
              resultObject.numSuppressedNotices++;
            }
          } catch (e) {// presumably no hidden Notices in previous Object
            console.assert(!previousObject.hiddenNotices, "Didn't expected hiddenNotices to be defined: ".concat(JSON.stringify(previousObject), " error was: ").concat(e.message));
            resultObject.numSuppressedNotices++;
          }
        } else if (thisPriority >= mediumPriorityLevel) {
          var _previousObject2 = resultObject.mediumList[resultObject.mediumList.length - 1];
          try {
            if (_previousObject2.hiddenNotices.length < maximumHiddenNotices) {
              _previousObject2.hiddenNotices.push(thisNotice);
              resultObject.numHiddenMedium++;
            } else {// suppress these excess notices
              var _lastHiddenNoticeObject2 = _previousObject2.hiddenNotices[_previousObject2.hiddenNotices.length - 1];
              if (_lastHiddenNoticeObject2.message !== maximumHiddenNoticesMessage)
              _previousObject2.hiddenNotices.push({ priority: thisNotice.priority, message: maximumHiddenNoticesMessage });
              resultObject.numSuppressedNotices++;
            }
          } catch (e) {// presumably no hidden Notices in previous Object
            console.assert(!_previousObject2.hiddenNotices, "Didn't expected hiddenNotices to be defined: ".concat(JSON.stringify(_previousObject2), " error was: ").concat(e.message));
            resultObject.numSuppressedNotices++;
          }
        } else {
          var _previousObject3 = resultObject.lowList[resultObject.lowList.length - 1];
          try {
            if (_previousObject3.hiddenNotices.length < maximumHiddenNotices) {
              _previousObject3.hiddenNotices.push(thisNotice);
              resultObject.numHiddenLow++;
            } else {// suppress these excess notices
              var _lastHiddenNoticeObject3 = _previousObject3.hiddenNotices[_previousObject3.hiddenNotices.length - 1];
              if (_lastHiddenNoticeObject3.message !== maximumHiddenNoticesMessage)
              _previousObject3.hiddenNotices.push({ priority: thisNotice.priority, message: maximumHiddenNoticesMessage });
              resultObject.numSuppressedNotices++;
            }
          } catch (e) {// presumably no hidden Notices in previous Object
            console.assert(!_previousObject3.hiddenNotices, "Didn't expected hiddenNotices to be defined: ".concat(JSON.stringify(_previousObject3), " error was: ").concat(e.message));
            resultObject.numSuppressedNotices++;
          }
        }
      } else if (thisPriority >= severePriorityLevel)
      resultObject.severeList.push(thisNotice);else
      if (thisPriority >= mediumPriorityLevel)
      resultObject.mediumList.push(thisNotice);else

      resultObject.lowList.push(thisNotice);
    }

    // debugLog(`processNoticesToSevereMediumLow is returning ${resultObject.successList.length} successes, ${resultObject.severeList.length} severe, ${resultObject.mediumList.length} medium, and ${resultObject.lowList.length} low
    //   numIgnoredNotices=${resultObject.numIgnoredNotices} numHiddenSevere=${resultObject.numHiddenSevere} numHiddenMedium=${resultObject.numHiddenMedium} numHiddenLow=${resultObject.numHiddenLow}`);
  } catch (err) {_iterator9.e(err);} finally {_iterator9.f();}return resultObject;
}
// end of processNoticesToSevereMediumLow function


/**
 *
 * @param {Object} givenNoticeObject
 * @param {Object} optionalProcessingOptions
 * @return {Object} containing warningList
 */
function processNoticesToSingleList(givenNoticeObject, optionalProcessingOptions) {
  /*
      Available options are:
          severePriorityLevel (integer; default is DEFAULT_SEVERE_PRIORITY_LEVEL above)
          mediumPriorityLevel (integer; default is DEFAULT_MEDIUM_PRIORITY_LEVEL above)
          maximumSimilarMessages (integer; default is DEFAULT_MAXIMUM_SIMILAR_MESSAGES above)
       Returns an object with:
          successList: a list of strings describing what has been checked
          warningList
          numIgnoredNotices, numDisabledNotices, numSuppressedNotices, numHiddenNotices
          processingOptions: just helpfully passes on what we were given (may be undefined)
      Also, any other parameters are just passed through,
          although filenameList might be abbreviated, e.g. for 100s of .md files.
  */

  //     userLog(`processNoticesToSingleList v${NOTICE_PROCESSOR_VERSION_STRING} with options=${JSON.stringify(optionalProcessingOptions)}
  //    Given ${givenNoticeObject.successList.length.toLocaleString()} success string(s) plus ${givenNoticeObject.noticeList.length.toLocaleString()} notice(s)`);

  var _processNoticesCommon5 = processNoticesCommon(givenNoticeObject, optionalProcessingOptions),_processNoticesCommon6 = (0, _slicedToArray2.default)(_processNoticesCommon5, 3),remainingNoticeList = _processNoticesCommon6[0],allTotals = _processNoticesCommon6[1],resultObject = _processNoticesCommon6[2];

  // Add the fields that we need here to the existing resultObject
  resultObject.warningList = [];resultObject.numHiddenNotices = 0;

  // Check for repeated notices that should be compressed
  //  while simultaneously creating warning list
  var counter = {};var _iterator10 = _createForOfIteratorHelper(
  remainingNoticeList),_step10;try {for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {var thisNotice = _step10.value;
      var thisPriority = thisNotice.priority,thisMsg = thisNotice.message;
      var thisCombinedID = "".concat(String(thisNotice.priority).padStart(3, '0')).concat(thisNotice.message); // Could have identical worded messages but with different priorities
      if (isNaN(counter[thisCombinedID])) counter[thisCombinedID] = 1;else
      counter[thisCombinedID]++;
      if (maximumSimilarMessages > 0 && allTotals[thisCombinedID] > maximumSimilarMessages + 1 && counter[thisCombinedID] === maximumSimilarMessages + 1) {
        var numHidden = allTotals[thisCombinedID] - maximumSimilarMessages;
        (0, _utilities.logicAssert)(numHidden !== 1, "Shouldn\u2019t suppress just one notice of priority ".concat(thisPriority));
        var adjHidden = Math.min(numHidden, maximumHiddenNotices);
        var numSuppressed = numHidden - adjHidden;
        resultObject.warningList.push({ priority: thisPriority, message: thisMsg, location: " \u2191 ".concat(adjHidden.toLocaleString(), " MORE SIMILAR NOTICE").concat(adjHidden === 1 ? '' : 'S', " HIDDEN").concat(numSuppressed ? " (PLUS ".concat(numSuppressed.toLocaleString(), " SUPPRESSED)") : ''), hiddenNotices: [thisNotice] });
        resultObject.numHiddenNotices++;
      } else if (maximumSimilarMessages > 0 && counter[thisCombinedID] > maximumSimilarMessages + 1) {
        // debugLog(`Have thisCombinedID='${thisCombinedID}' and ${counter[thisCombinedID]}`)
        var previousObject = resultObject.warningList[resultObject.warningList.length - 1];
        try {
          // console.assert(previousObject, `previousObject should be defined: ${resultObject.warningList.length}`);
          // console.assert(previousObject.hiddenNotices, `resultObject.warningList[${resultObject.warningList.length-1}].hiddenNotices should be defined: now ${JSON.stringify(thisNotice, 2)} with ${JSON.stringify(previousObject, 2)} and before that ${JSON.stringify(resultObject.warningList[resultObject.warningList.length-2])}`);
          if (previousObject.hiddenNotices.length < maximumHiddenNotices) {
            previousObject.hiddenNotices.push(thisNotice);
            resultObject.numHiddenNotices++;
          } else {// suppress these excess notices
            var lastHiddenNoticeObject = previousObject.hiddenNotices[previousObject.hiddenNotices.length - 1];
            if (lastHiddenNoticeObject.message !== maximumHiddenNoticesMessage)
            previousObject.hiddenNotices.push({ priority: thisNotice.priority, message: maximumHiddenNoticesMessage });
            resultObject.numSuppressedNotices++;
          }
        } catch (e) {// presumably no hidden Notices in previous Object
          console.assert(!previousObject.hiddenNotices, "Didn't expected hiddenNotices to be defined: ".concat(JSON.stringify(previousObject), " error was: ").concat(e.message));
          resultObject.numSuppressedNotices++;
        }
      } else
      resultObject.warningList.push(thisNotice);
    }

    // debugLog(`processNoticesToSingleList is returning ${resultObject.successList.length} successes, ${resultObject.warningList.length} warnings
    //   numIgnoredNotices=${resultObject.numIgnoredNotices} numHiddenNotices=${resultObject.numHiddenNotices}`);
  } catch (err) {_iterator10.e(err);} finally {_iterator10.f();}return resultObject;
}
// end of processNoticesToSingleList function
//# sourceMappingURL=data:application/json;charset=utf-8;base64,