"use strict";

var _textHandlingFunctions = require("../core/text-handling-functions"); /* eslint-env jest */

describe('isWhitespace() - ', function () {

  describe('whitespace tests - ', function () {
    it('single space is whitespace', function () {
      var returnedValue = (0, _textHandlingFunctions.isWhitespace)(' ');
      expect(returnedValue).toEqual(true);
    });
    it('multiple spaces are whitespace', function () {
      var returnedValue = (0, _textHandlingFunctions.isWhitespace)('            ');
      expect(returnedValue).toEqual(true);
    });
    it('zero-width space is whitespace', function () {
      var returnedValue = (0, _textHandlingFunctions.isWhitespace)("\u200B");
      expect(returnedValue).toEqual(true);
    });
    it('single character is not whitespace', function () {
      var returnedValue = (0, _textHandlingFunctions.isWhitespace)('           a');
      expect(returnedValue).toEqual(false);
    });
  });
});

describe('countOccurrences() - ', function () {

  describe('countOccurrences tests - ', function () {
    it('count single character', function () {
      var returnedValue = (0, _textHandlingFunctions.countOccurrences)('abc', 'b');
      expect(returnedValue).toEqual(1);
    });
    it('count multiple single characters', function () {
      var returnedValue = (0, _textHandlingFunctions.countOccurrences)('babcb', 'b');
      expect(returnedValue).toEqual(3);
    });
  });
});

describe('ourReplaceAll() - ', function () {

  describe('ourReplaceAll tests - ', function () {
    it('replace single character', function () {
      var returnedValue = (0, _textHandlingFunctions.ourReplaceAll)('abc', 'b', 'q');
      expect(returnedValue).toEqual('aqc');
    });
    it('replace multiple single characters', function () {
      var returnedValue = (0, _textHandlingFunctions.ourReplaceAll)('babcb', 'b', 'q');
      expect(returnedValue).toEqual('qaqcq');
    });
  });
});

describe('ourDeleteAll() - ', function () {

  describe('ourDeleteAll tests - ', function () {
    it('delete single character', function () {
      var returnedValue = (0, _textHandlingFunctions.ourDeleteAll)('abc', 'b');
      expect(returnedValue).toEqual('ac');
    });
    it('delete multiple single characters', function () {
      var returnedValue = (0, _textHandlingFunctions.ourDeleteAll)('babcb', 'b');
      expect(returnedValue).toEqual('ac');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fX3Rlc3RzX18vdGV4dC1oYW5kbGluZy1mdW5jdGlvbnMudGVzdC5qcyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsIml0IiwicmV0dXJuZWRWYWx1ZSIsImV4cGVjdCIsInRvRXF1YWwiXSwibWFwcGluZ3MiOiI7O0FBRUEsd0UsQ0FGQTs7QUFJQUEsUUFBUSxDQUFDLG1CQUFELEVBQXNCLFlBQU07O0FBRWxDQSxFQUFBQSxRQUFRLENBQUMscUJBQUQsRUFBd0IsWUFBTTtBQUNwQ0MsSUFBQUEsRUFBRSxDQUFDLDRCQUFELEVBQStCLFlBQU07QUFDckMsVUFBTUMsYUFBYSxHQUFHLHlDQUFhLEdBQWIsQ0FBdEI7QUFDQUMsTUFBQUEsTUFBTSxDQUFDRCxhQUFELENBQU4sQ0FBc0JFLE9BQXRCLENBQThCLElBQTlCO0FBQ0QsS0FIQyxDQUFGO0FBSUFILElBQUFBLEVBQUUsQ0FBQyxnQ0FBRCxFQUFtQyxZQUFNO0FBQ3pDLFVBQU1DLGFBQWEsR0FBRyx5Q0FBYSxjQUFiLENBQXRCO0FBQ0FDLE1BQUFBLE1BQU0sQ0FBQ0QsYUFBRCxDQUFOLENBQXNCRSxPQUF0QixDQUE4QixJQUE5QjtBQUNELEtBSEMsQ0FBRjtBQUlBSCxJQUFBQSxFQUFFLENBQUMsZ0NBQUQsRUFBbUMsWUFBTTtBQUN6QyxVQUFNQyxhQUFhLEdBQUcseUNBQWEsUUFBYixDQUF0QjtBQUNBQyxNQUFBQSxNQUFNLENBQUNELGFBQUQsQ0FBTixDQUFzQkUsT0FBdEIsQ0FBOEIsSUFBOUI7QUFDRCxLQUhDLENBQUY7QUFJQUgsSUFBQUEsRUFBRSxDQUFDLG9DQUFELEVBQXVDLFlBQU07QUFDN0MsVUFBTUMsYUFBYSxHQUFHLHlDQUFhLGNBQWIsQ0FBdEI7QUFDQUMsTUFBQUEsTUFBTSxDQUFDRCxhQUFELENBQU4sQ0FBc0JFLE9BQXRCLENBQThCLEtBQTlCO0FBQ0QsS0FIQyxDQUFGO0FBSUQsR0FqQk8sQ0FBUjtBQWtCRCxDQXBCTyxDQUFSOztBQXNCQUosUUFBUSxDQUFDLHVCQUFELEVBQTBCLFlBQU07O0FBRXRDQSxFQUFBQSxRQUFRLENBQUMsMkJBQUQsRUFBOEIsWUFBTTtBQUMxQ0MsSUFBQUEsRUFBRSxDQUFDLHdCQUFELEVBQTJCLFlBQU07QUFDakMsVUFBTUMsYUFBYSxHQUFHLDZDQUFpQixLQUFqQixFQUF3QixHQUF4QixDQUF0QjtBQUNBQyxNQUFBQSxNQUFNLENBQUNELGFBQUQsQ0FBTixDQUFzQkUsT0FBdEIsQ0FBOEIsQ0FBOUI7QUFDRCxLQUhDLENBQUY7QUFJQUgsSUFBQUEsRUFBRSxDQUFDLGtDQUFELEVBQXFDLFlBQU07QUFDM0MsVUFBTUMsYUFBYSxHQUFHLDZDQUFpQixPQUFqQixFQUEwQixHQUExQixDQUF0QjtBQUNBQyxNQUFBQSxNQUFNLENBQUNELGFBQUQsQ0FBTixDQUFzQkUsT0FBdEIsQ0FBOEIsQ0FBOUI7QUFDRCxLQUhDLENBQUY7QUFJRCxHQVRPLENBQVI7QUFVRCxDQVpPLENBQVI7O0FBY0FKLFFBQVEsQ0FBQyxvQkFBRCxFQUF1QixZQUFNOztBQUVuQ0EsRUFBQUEsUUFBUSxDQUFDLHdCQUFELEVBQTJCLFlBQU07QUFDdkNDLElBQUFBLEVBQUUsQ0FBQywwQkFBRCxFQUE2QixZQUFNO0FBQ25DLFVBQU1DLGFBQWEsR0FBRywwQ0FBYyxLQUFkLEVBQXFCLEdBQXJCLEVBQTBCLEdBQTFCLENBQXRCO0FBQ0FDLE1BQUFBLE1BQU0sQ0FBQ0QsYUFBRCxDQUFOLENBQXNCRSxPQUF0QixDQUE4QixLQUE5QjtBQUNELEtBSEMsQ0FBRjtBQUlBSCxJQUFBQSxFQUFFLENBQUMsb0NBQUQsRUFBdUMsWUFBTTtBQUM3QyxVQUFNQyxhQUFhLEdBQUcsMENBQWMsT0FBZCxFQUF1QixHQUF2QixFQUE0QixHQUE1QixDQUF0QjtBQUNBQyxNQUFBQSxNQUFNLENBQUNELGFBQUQsQ0FBTixDQUFzQkUsT0FBdEIsQ0FBOEIsT0FBOUI7QUFDRCxLQUhDLENBQUY7QUFJRCxHQVRPLENBQVI7QUFVRCxDQVpPLENBQVI7O0FBY0FKLFFBQVEsQ0FBQyxtQkFBRCxFQUFzQixZQUFNOztBQUVsQ0EsRUFBQUEsUUFBUSxDQUFDLHVCQUFELEVBQTBCLFlBQU07QUFDdENDLElBQUFBLEVBQUUsQ0FBQyx5QkFBRCxFQUE0QixZQUFNO0FBQ2xDLFVBQU1DLGFBQWEsR0FBRyx5Q0FBYSxLQUFiLEVBQW9CLEdBQXBCLENBQXRCO0FBQ0FDLE1BQUFBLE1BQU0sQ0FBQ0QsYUFBRCxDQUFOLENBQXNCRSxPQUF0QixDQUE4QixJQUE5QjtBQUNELEtBSEMsQ0FBRjtBQUlBSCxJQUFBQSxFQUFFLENBQUMsbUNBQUQsRUFBc0MsWUFBTTtBQUM1QyxVQUFNQyxhQUFhLEdBQUcseUNBQWEsT0FBYixFQUFzQixHQUF0QixDQUF0QjtBQUNBQyxNQUFBQSxNQUFNLENBQUNELGFBQUQsQ0FBTixDQUFzQkUsT0FBdEIsQ0FBOEIsSUFBOUI7QUFDRCxLQUhDLENBQUY7QUFJRCxHQVRPLENBQVI7QUFVRCxDQVpPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZW52IGplc3QgKi9cblxuaW1wb3J0IHsgaXNXaGl0ZXNwYWNlLCBjb3VudE9jY3VycmVuY2VzLCBvdXJSZXBsYWNlQWxsLCBvdXJEZWxldGVBbGwgfSBmcm9tICcuLi9jb3JlL3RleHQtaGFuZGxpbmctZnVuY3Rpb25zJztcblxuZGVzY3JpYmUoJ2lzV2hpdGVzcGFjZSgpIC0gJywgKCkgPT4ge1xuXG4gIGRlc2NyaWJlKCd3aGl0ZXNwYWNlIHRlc3RzIC0gJywgKCkgPT4ge1xuICAgIGl0KCdzaW5nbGUgc3BhY2UgaXMgd2hpdGVzcGFjZScsICgpID0+IHtcbiAgICAgIGNvbnN0IHJldHVybmVkVmFsdWUgPSBpc1doaXRlc3BhY2UoJyAnKTtcbiAgICAgIGV4cGVjdChyZXR1cm5lZFZhbHVlKS50b0VxdWFsKHRydWUpO1xuICAgIH0pO1xuICAgIGl0KCdtdWx0aXBsZSBzcGFjZXMgYXJlIHdoaXRlc3BhY2UnLCAoKSA9PiB7XG4gICAgICBjb25zdCByZXR1cm5lZFZhbHVlID0gaXNXaGl0ZXNwYWNlKCcgICAgICAgICAgICAnKTtcbiAgICAgIGV4cGVjdChyZXR1cm5lZFZhbHVlKS50b0VxdWFsKHRydWUpO1xuICAgIH0pO1xuICAgIGl0KCd6ZXJvLXdpZHRoIHNwYWNlIGlzIHdoaXRlc3BhY2UnLCAoKSA9PiB7XG4gICAgICBjb25zdCByZXR1cm5lZFZhbHVlID0gaXNXaGl0ZXNwYWNlKCdcXHUyMDBCJyk7XG4gICAgICBleHBlY3QocmV0dXJuZWRWYWx1ZSkudG9FcXVhbCh0cnVlKTtcbiAgICB9KTtcbiAgICBpdCgnc2luZ2xlIGNoYXJhY3RlciBpcyBub3Qgd2hpdGVzcGFjZScsICgpID0+IHtcbiAgICAgIGNvbnN0IHJldHVybmVkVmFsdWUgPSBpc1doaXRlc3BhY2UoJyAgICAgICAgICAgYScpO1xuICAgICAgZXhwZWN0KHJldHVybmVkVmFsdWUpLnRvRXF1YWwoZmFsc2UpO1xuICAgIH0pO1xuICB9KVxufSlcblxuZGVzY3JpYmUoJ2NvdW50T2NjdXJyZW5jZXMoKSAtICcsICgpID0+IHtcblxuICBkZXNjcmliZSgnY291bnRPY2N1cnJlbmNlcyB0ZXN0cyAtICcsICgpID0+IHtcbiAgICBpdCgnY291bnQgc2luZ2xlIGNoYXJhY3RlcicsICgpID0+IHtcbiAgICAgIGNvbnN0IHJldHVybmVkVmFsdWUgPSBjb3VudE9jY3VycmVuY2VzKCdhYmMnLCAnYicpO1xuICAgICAgZXhwZWN0KHJldHVybmVkVmFsdWUpLnRvRXF1YWwoMSk7XG4gICAgfSk7XG4gICAgaXQoJ2NvdW50IG11bHRpcGxlIHNpbmdsZSBjaGFyYWN0ZXJzJywgKCkgPT4ge1xuICAgICAgY29uc3QgcmV0dXJuZWRWYWx1ZSA9IGNvdW50T2NjdXJyZW5jZXMoJ2JhYmNiJywgJ2InKTtcbiAgICAgIGV4cGVjdChyZXR1cm5lZFZhbHVlKS50b0VxdWFsKDMpO1xuICAgIH0pO1xuICB9KVxufSlcblxuZGVzY3JpYmUoJ291clJlcGxhY2VBbGwoKSAtICcsICgpID0+IHtcblxuICBkZXNjcmliZSgnb3VyUmVwbGFjZUFsbCB0ZXN0cyAtICcsICgpID0+IHtcbiAgICBpdCgncmVwbGFjZSBzaW5nbGUgY2hhcmFjdGVyJywgKCkgPT4ge1xuICAgICAgY29uc3QgcmV0dXJuZWRWYWx1ZSA9IG91clJlcGxhY2VBbGwoJ2FiYycsICdiJywgJ3EnKTtcbiAgICAgIGV4cGVjdChyZXR1cm5lZFZhbHVlKS50b0VxdWFsKCdhcWMnKTtcbiAgICB9KTtcbiAgICBpdCgncmVwbGFjZSBtdWx0aXBsZSBzaW5nbGUgY2hhcmFjdGVycycsICgpID0+IHtcbiAgICAgIGNvbnN0IHJldHVybmVkVmFsdWUgPSBvdXJSZXBsYWNlQWxsKCdiYWJjYicsICdiJywgJ3EnKTtcbiAgICAgIGV4cGVjdChyZXR1cm5lZFZhbHVlKS50b0VxdWFsKCdxYXFjcScpO1xuICAgIH0pO1xuICB9KVxufSlcblxuZGVzY3JpYmUoJ291ckRlbGV0ZUFsbCgpIC0gJywgKCkgPT4ge1xuXG4gIGRlc2NyaWJlKCdvdXJEZWxldGVBbGwgdGVzdHMgLSAnLCAoKSA9PiB7XG4gICAgaXQoJ2RlbGV0ZSBzaW5nbGUgY2hhcmFjdGVyJywgKCkgPT4ge1xuICAgICAgY29uc3QgcmV0dXJuZWRWYWx1ZSA9IG91ckRlbGV0ZUFsbCgnYWJjJywgJ2InKTtcbiAgICAgIGV4cGVjdChyZXR1cm5lZFZhbHVlKS50b0VxdWFsKCdhYycpO1xuICAgIH0pO1xuICAgIGl0KCdkZWxldGUgbXVsdGlwbGUgc2luZ2xlIGNoYXJhY3RlcnMnLCAoKSA9PiB7XG4gICAgICBjb25zdCByZXR1cm5lZFZhbHVlID0gb3VyRGVsZXRlQWxsKCdiYWJjYicsICdiJyk7XG4gICAgICBleHBlY3QocmV0dXJuZWRWYWx1ZSkudG9FcXVhbCgnYWMnKTtcbiAgICB9KTtcbiAgfSlcbn0pXG5cbiJdfQ==