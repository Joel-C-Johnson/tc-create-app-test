"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _tnTsv9RowCheck = require("../core/tn-tsv9-row-check");
var _path = _interopRequireDefault(require("path"));
var _fsExtra = _interopRequireDefault(require("fs-extra")); /* eslint-env jest */

var optionalCheckingOptions = {
  originalLanguageRepoUsername: 'unfoldingWord',
  taRepoUsername: 'unfoldingWord',
  disableLinkedTAArticlesCheckFlag: true,
  disableLinkedTWArticlesCheckFlag: true,
  getFile: function getFile(params) {
    var username = params.username,repository = params.repository,path = params.path;
    // console.log(`tn-table-row-check.test getFile(${username}, ${repository}, ${path})`)
    var filePath = _path.default.join('./src/__tests__/fixtures', username, repository, path);
    if (_fsExtra.default.existsSync(filePath)) {
      return _fsExtra.default.readFileSync(filePath).toString();
    }
    // eslint-disable-next-line no-throw-literal
    throw "tn-table-row-check.test getFile(): Could not find ".concat(filePath);
  } };


describe('checkTN_TSV9DataRow() - ', function () {
  var languageCode = 'en';
  var repoCode = 'TN';

  describe('link tests - ', function () {
    it('should fail invalid doublet link', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:
              chosenLine = "RUT\t2\t12\tgnn5\tfigs-parallelism\tשְׁלֵמָ֗ה\t1\tmay your full wages come from Yahweh\tThis is a poetic expression that is very similar to the previous sentence. Alternate translation: “May Yahweh fully give to you everything that you deserve” (See: [[rc://*/ta/man/translate/figs-parallelism]], [Doublet](../figs-doublet/01.md))";_context.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'RUT', '2', '12', 'from test line', optionalCheckingOptions));case 3:rawResults = _context.sent;
              expect(rawResults.noticeList.length).toEqual(2);
              expect(rawResults).toMatchSnapshot();case 6:case "end":return _context.stop();}}}, _callee);})));


    it('should fail broken link start', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:
              chosenLine = "RUT\t2\t12\tgnn5\tfigs-parallelism\tשְׁלֵמָ֗ה\t1\tmay your full wages come from Yahweh\tThis is a poetic expression that is very similar to the previous sentence. Alternate translation: “May Yahweh fully give to you everything that you deserve” (See: [rc://*/ta/man/translate/figs-parallelism]]";_context2.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'RUT', '2', '12', 'from test line', optionalCheckingOptions));case 3:rawResults = _context2.sent;
              expect(rawResults.noticeList.length).toEqual(3);
              expect(rawResults).toMatchSnapshot();case 6:case "end":return _context2.stop();}}}, _callee2);})));


    it('should fail broken link end', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:
              chosenLine = "RUT\t2\t12\tgnn5\tfigs-parallelism\tשְׁלֵמָ֗ה\t1\tmay your full wages come from Yahweh\tThis is a poetic expression that is very similar to the previous sentence. Alternate translation: “May Yahweh fully give to you everything that you deserve” (See: [[rc://*/ta/man/translate/figs-parallelism]";_context3.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'RUT', '2', '12', 'from test line', optionalCheckingOptions));case 3:rawResults = _context3.sent;
              expect(rawResults.noticeList.length).toEqual(3);
              expect(rawResults).toMatchSnapshot();case 6:case "end":return _context3.stop();}}}, _callee3);})));


    it('should fail double broken link start', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee4$(_context4) {while (1) {switch (_context4.prev = _context4.next) {case 0:
              chosenLine = "RUT\t2\t12\tgnn5\tfigs-parallelism\tשְׁלֵמָ֗ה\t1\tmay your full wages come from Yahweh\tThis is a poetic expression that is very similar to the previous sentence. Alternate translation: “May Yahweh fully give to you everything that you deserve” (See: rc://*/ta/man/translate/figs-parallelism]])";_context4.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'RUT', '2', '12', 'from test line', optionalCheckingOptions));case 3:rawResults = _context4.sent;
              expect(rawResults.noticeList.length).toEqual(1);
              expect(rawResults).toMatchSnapshot();case 6:case "end":return _context4.stop();}}}, _callee4);})));


    it('should fail double broken link end', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee5$(_context5) {while (1) {switch (_context5.prev = _context5.next) {case 0:
              chosenLine = "RUT\t2\t12\tgnn5\tfigs-parallelism\tשְׁלֵמָ֗ה\t1\tmay your full wages come from Yahweh\tThis is a poetic expression that is very similar to the previous sentence. Alternate translation: “May Yahweh fully give to you everything that you deserve” (See: [[rc://*/ta/man/translate/figs-parallelism)";_context5.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'RUT', '2', '12', 'from test line', optionalCheckingOptions));case 3:rawResults = _context5.sent;
              expect(rawResults.noticeList.length).toEqual(2);
              expect(rawResults).toMatchSnapshot();case 6:case "end":return _context5.stop();}}}, _callee5);})));


    it('should fail if SupportReference link differs from link in OccurrenceNote', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee6$(_context6) {while (1) {switch (_context6.prev = _context6.next) {case 0:
              chosenLine = "GEN\t1\t6\turb3\tfigs-imperative\t\t0\tLet there be an expanse…let it divide\tThese are commands. By commanding that the expanse should exist and that it divide the waters, God made it exist and divide the waters. (See: [[rc://*/ta/man/figs-parallelism]])";_context6.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '6', 'from test line', optionalCheckingOptions));case 3:rawResults = _context6.sent;
              expect(rawResults.noticeList.length).toEqual(2);
              expect(rawResults).toMatchSnapshot();case 6:case "end":return _context6.stop();}}}, _callee6);})));


    it('should fail invalid link path', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee7$(_context7) {while (1) {switch (_context7.prev = _context7.next) {case 0:
              chosenLine = "GEN\t1\t7\turb3\tfigs-imperative\t\t0\tLet there be an expanse…let it divide\tThese are commands. By commanding that the expanse should exist and that it divide the waters, God made it exist and divide the waters. (See: [[rc://*/ta/woman/figs-imperative]])";_context7.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '7', 'from test line', optionalCheckingOptions));case 3:rawResults = _context7.sent;
              expect(rawResults.noticeList.length).toEqual(1);
              expect(rawResults).toMatchSnapshot();case 6:case "end":return _context7.stop();}}}, _callee7);})));


    it('should succeed with mixed link types', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee8() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee8$(_context8) {while (1) {switch (_context8.prev = _context8.next) {case 0:
              chosenLine = "GEN\t1\t8\tss9r\tfigs-merism\t\t0\tevening and morning\tThis refers to the whole day. The writer speaks of the whole day as if it were these two parts. In the Jewish culture, a day begins when the sun sets. See how you translated this in [Genesis 1:5](../01/05.md). (See: [[rc://*/ta/man/translate/figs-merism]])";_context8.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '8', 'from test line', optionalCheckingOptions));case 3:rawResults = _context8.sent;
              expect(rawResults.noticeList.length).toEqual(1);case 5:case "end":return _context8.stop();}}}, _callee8);})));


    it('should succeed with dual links', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee9() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee9$(_context9) {while (1) {switch (_context9.prev = _context9.next) {case 0:
              chosenLine = "GEN\t1\t9\tzu6f\tfigs-activepassive\t\t0\tLet the waters…be gathered\tThis can be translated with an active verb. This is a command. By commanding that the waters gather together, God made them gather together. Alternate translation: “Let the waters…gather” or “Let the waters…come together” (See: [[rc://*/ta/man/translate/figs-activepassive]] and [[rc://*/ta/man/translate/figs-imperative]])";_context9.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '9', 'from test line', optionalCheckingOptions));case 3:rawResults = _context9.sent;
              expect(rawResults.noticeList.length).toEqual(3);case 5:case "end":return _context9.stop();}}}, _callee9);})));


    it('should fail invalid first link', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee10() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee10$(_context10) {while (1) {switch (_context10.prev = _context10.next) {case 0:
              chosenLine = "GEN\t1\t9\tzu6f\tfigs-activepassive\t\t0\tLet the waters…be gathered\tThis can be translated with an active verb. This is a command. By commanding that the waters gather together, God made them gather together. Alternate translation: “Let the waters…gather” or “Let the waters…come together” (See: [[rc://*/ta/man/translate/figs-activepassivez]] and [[rc://*/ta/man/translate/figs-imperative]])";_context10.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '9', 'from test line', optionalCheckingOptions));case 3:rawResults = _context10.sent;
              expect(rawResults.noticeList.length).toEqual(4);
              expect(rawResults).toMatchSnapshot();case 6:case "end":return _context10.stop();}}}, _callee10);})));


    it('should fail invalid second link', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee11() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee11$(_context11) {while (1) {switch (_context11.prev = _context11.next) {case 0:
              chosenLine = "GEN\t1\t9\tzu6f\tfigs-activepassive\t\t0\tLet the waters…be gathered\tThis can be translated with an active verb. This is a command. By commanding that the waters gather together, God made them gather together. Alternate translation: “Let the waters…gather” or “Let the waters…come together” (See: [[rc://*/ta/man/translate/figs-activepassive]] and [[rc://*/ta/man/translate/figs-imperativez]])";_context11.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '9', 'from test line', optionalCheckingOptions));case 3:rawResults = _context11.sent;
              expect(rawResults.noticeList.length).toEqual(4);
              expect(rawResults).toMatchSnapshot();case 6:case "end":return _context11.stop();}}}, _callee11);})));


    it('should pass valid verse link', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee12() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee12$(_context12) {while (1) {switch (_context12.prev = _context12.next) {case 0:
              chosenLine = "GEN\t1\t19\tha33\t\t\t0\tIt was so\t“It happened like that” or “That is what happened.” What God commanded happened just as he said it should. This phrase appears throughout the chapter and has the same meaning wherever it appears. See how you translated it in [Genesis 1:7](../01/07.md).";_context12.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '19', 'from test line', optionalCheckingOptions));case 3:rawResults = _context12.sent;
              expect(rawResults.noticeList.length).toEqual(0);case 5:case "end":return _context12.stop();}}}, _callee12);})));


    it('should fail invalid verse link', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee13() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee13$(_context13) {while (1) {switch (_context13.prev = _context13.next) {case 0:
              chosenLine = "GEN\t1\t9\tha33\t\t\t0\tIt was so\t“It happened like that” or “That is what happened.” What God commanded happened just as he said it should. This phrase appears throughout the chapter and has the same meaning wherever it appears. See how you translated it in [Genesis 1:7](../01/zzz.md).";_context13.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '9', 'from test line', optionalCheckingOptions));case 3:rawResults = _context13.sent;
              expect(rawResults.noticeList.length).toEqual(1);
              expect(rawResults).toMatchSnapshot();case 6:case "end":return _context13.stop();}}}, _callee13);})));


    it('should fail invalid verse link start', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee14() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee14$(_context14) {while (1) {switch (_context14.prev = _context14.next) {case 0:
              chosenLine = "GEN\t1\t9\tha33\t\t\t0\tIt was so\t“It happened like that” or “That is what happened.” What God commanded happened just as he said it should. This phrase appears throughout the chapter and has the same meaning wherever it appears. See how you translated it in Genesis 1:7](../01/07.md).";_context14.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '9', 'from test line', optionalCheckingOptions));case 3:rawResults = _context14.sent;
              expect(rawResults.noticeList.length).toEqual(1);
              expect(rawResults).toMatchSnapshot();case 6:case "end":return _context14.stop();}}}, _callee14);})));


    it('should fail invalid verse link end', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee15() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee15$(_context15) {while (1) {switch (_context15.prev = _context15.next) {case 0:
              chosenLine = "GEN\t1\t9\tha33\t\t\t0\tIt was so\t“It happened like that” or “That is what happened.” What God commanded happened just as he said it should. This phrase appears throughout the chapter and has the same meaning wherever it appears. See how you translated it in [Genesis 1:7](../01/07.md.";_context15.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '9', 'from test line', optionalCheckingOptions));case 3:rawResults = _context15.sent;
              expect(rawResults.noticeList.length).toEqual(2);
              expect(rawResults).toMatchSnapshot();case 6:case "end":return _context15.stop();}}}, _callee15);})));


  });

  describe('Original Quote tests - ', function () {
    it('invalid Original Language', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee16() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee16$(_context16) {while (1) {switch (_context16.prev = _context16.next) {case 0:
              chosenLine = "GEN\t1\t1\tf2mg\t\t0\t\t\tIn the beginning, God created the heavens and the earth “This is about how God made the heavens and the earth in the beginning.” This statement summarizes the rest of the chapter. Some languages translate it as “A very long time ago God created the heavens and the earth.” Translate it in a way that shows this actually happened and is not just a folk story.";_context16.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '1', 'from test line', optionalCheckingOptions));case 3:rawResults = _context16.sent;
              expect(rawResults.noticeList.length).toEqual(2);
              expect(rawResults).toMatchSnapshot();case 6:case "end":return _context16.stop();}}}, _callee16);})));


    it('should find missing Original Quote', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee17() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee17$(_context17) {while (1) {switch (_context17.prev = _context17.next) {case 0:
              chosenLine = "GEN\t1\t3\ta7qw\tfigs-imperative\t\t1\tLet there be light\tThis is a command. By commanding that light should exist, God made it exist. (See: [[rc://*/ta/man/translate/figs-imperative]])";_context17.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '3', 'from test line', optionalCheckingOptions));case 3:rawResults = _context17.sent;
              expect(rawResults.noticeList.length).toEqual(2);
              expect(rawResults).toMatchSnapshot();case 6:case "end":return _context17.stop();}}}, _callee17);})));


    it('should fail to find OrigLang Quote', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee18() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee18$(_context18) {while (1) {switch (_context18.prev = _context18.next) {case 0:
              chosenLine = "GEN\t1\t2\tb7qw\tfigs-imperative\tוְ⁠חֹ֖שֶךְ\t1\tDarkness\tThis is a command. By commanding that light should exist, God made it exist. (See: [[rc://*/ta/man/translate/figs-imperative]])";_context18.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '2', 'from test line', optionalCheckingOptions));case 3:rawResults = _context18.sent;
              expect(rawResults.noticeList.length).toEqual(2);
              expect(rawResults).toMatchSnapshot();case 6:case "end":return _context18.stop();}}}, _callee18);})));


    it('should fail to find 2nd instance/occurrence', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee19() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee19$(_context19) {while (1) {switch (_context19.prev = _context19.next) {case 0:
              chosenLine = "GEN\t1\t2\tc7qw\tfigs-imperative\tוְ⁠חֹ֖שֶׁךְ\t2\tDarkness\tThis is a command. By commanding that light should exist, God made it exist. (See: [[rc://*/ta/man/translate/figs-imperative]])";_context19.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '2', 'from test line', optionalCheckingOptions));case 3:rawResults = _context19.sent;
              expect(rawResults.noticeList.length).toEqual(2);case 5:case "end":return _context19.stop();}}}, _callee19);})));


    it('should fail with leading space', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee20() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee20$(_context20) {while (1) {switch (_context20.prev = _context20.next) {case 0:
              chosenLine = "GEN\t1\t2\te7qw\tfigs-imperative\t וְ⁠חֹ֖שֶׁךְ\t1\tDarkness\tThis is a command. By commanding that light should exist, God made it exist. (See: [[rc://*/ta/man/translate/figs-imperative]])";_context20.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '2', 'from test line', optionalCheckingOptions));case 3:rawResults = _context20.sent;
              expect(rawResults.noticeList.length).toEqual(3);
              expect(rawResults).toMatchSnapshot();case 6:case "end":return _context20.stop();}}}, _callee20);})));


    it('should fail with trailing space', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee21() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee21$(_context21) {while (1) {switch (_context21.prev = _context21.next) {case 0:
              chosenLine = "GEN\t1\t2\tf7qw\tfigs-imperative\tוְ⁠חֹ֖שֶׁךְ \t1\tDarkness\tThis is a command. By commanding that light should exist, God made it exist. (See: [[rc://*/ta/man/translate/figs-imperative]])";_context21.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '2', 'from test line', optionalCheckingOptions));case 3:rawResults = _context21.sent;
              expect(rawResults.noticeList.length).toEqual(2);
              expect(rawResults).toMatchSnapshot();case 6:case "end":return _context21.stop();}}}, _callee21);})));


    it('should fail with leading word joiner', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee22() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee22$(_context22) {while (1) {switch (_context22.prev = _context22.next) {case 0:
              chosenLine = "GEN\t1\t2\tg7qw\tfigs-imperative\t\u2060\u05D5\u05B0\u2060\u05D7\u05B9\u0596\u05E9\u05C1\u05B6\u05DA\u05B0\t1\tDarkness\tThis is a command. By commanding that light should exist, God made it exist. (See: [[rc://*/ta/man/translate/figs-imperative]])";_context22.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '2', 'from test line', optionalCheckingOptions));case 3:rawResults = _context22.sent;
              expect(rawResults.noticeList.length).toEqual(3);
              expect(rawResults).toMatchSnapshot();case 6:case "end":return _context22.stop();}}}, _callee22);})));


    it('should fail with trailing word joiner', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee23() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee23$(_context23) {while (1) {switch (_context23.prev = _context23.next) {case 0:
              chosenLine = "GEN\t1\t2\th7qw\tfigs-imperative\t\u05D5\u05B0\u2060\u05D7\u05B9\u0596\u05E9\u05C1\u05B6\u05DA\u05B0\u2060\t1\tDarkness\tThis is a command. By commanding that light should exist, God made it exist. (See: [[rc://*/ta/man/translate/figs-imperative]])";_context23.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '2', 'from test line', optionalCheckingOptions));case 3:rawResults = _context23.sent;
              expect(rawResults.noticeList.length).toEqual(3);
              expect(rawResults).toMatchSnapshot();case 6:case "end":return _context23.stop();}}}, _callee23);})));


    it('should fail with leading zero width non-joiner', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee24() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee24$(_context24) {while (1) {switch (_context24.prev = _context24.next) {case 0:
              chosenLine = "GEN\t1\t2\ti7qw\tfigs-imperative\t\u200C\u05D5\u05B0\u2060\u05D7\u05B9\u0596\u05E9\u05C1\u05B6\u05DA\u05B0\t1\tDarkness\tThis is a command. By commanding that light should exist, God made it exist. (See: [[rc://*/ta/man/translate/figs-imperative]])";_context24.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '2', 'from test line', optionalCheckingOptions));case 3:rawResults = _context24.sent;
              expect(rawResults.noticeList.length).toEqual(2);
              expect(rawResults).toMatchSnapshot();case 6:case "end":return _context24.stop();}}}, _callee24);})));


    it('should fail with trailing zero width non-joiner', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee25() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee25$(_context25) {while (1) {switch (_context25.prev = _context25.next) {case 0:
              chosenLine = "GEN\t1\t2\tj7qw\tfigs-imperative\t\u05D5\u05B0\u2060\u05D7\u05B9\u0596\u05E9\u05C1\u05B6\u05DA\u05B0\u200C\t1\tDarkness\tThis is a command. By commanding that light should exist, God made it exist. (See: [[rc://*/ta/man/translate/figs-imperative]])";_context25.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '2', 'from test line', optionalCheckingOptions));case 3:rawResults = _context25.sent;
              expect(rawResults.noticeList.length).toEqual(2);
              expect(rawResults).toMatchSnapshot();case 6:case "end":return _context25.stop();}}}, _callee25);})));


    it('should fail with leading zero width joiner', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee26() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee26$(_context26) {while (1) {switch (_context26.prev = _context26.next) {case 0:
              chosenLine = "GEN\t1\t2\tk7qw\tfigs-imperative\t\u200D\u05D5\u05B0\u2060\u05D7\u05B9\u0596\u05E9\u05C1\u05B6\u05DA\u05B0\t1\tDarkness\tThis is a command. By commanding that light should exist, God made it exist. (See: [[rc://*/ta/man/translate/figs-imperative]])";_context26.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '2', 'from test line', optionalCheckingOptions));case 3:rawResults = _context26.sent;
              expect(rawResults.noticeList.length).toEqual(3);
              expect(rawResults).toMatchSnapshot();case 6:case "end":return _context26.stop();}}}, _callee26);})));


    it('should fail with trailing zero width joiner', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee27() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee27$(_context27) {while (1) {switch (_context27.prev = _context27.next) {case 0:
              chosenLine = "GEN\t1\t2\tl7qw\tfigs-imperative\t\u05D5\u05B0\u2060\u05D7\u05B9\u0596\u05E9\u05C1\u05B6\u05DA\u05B0\u200D\t1\tDarkness\tThis is a command. By commanding that light should exist, God made it exist. (See: [[rc://*/ta/man/translate/figs-imperative]])";_context27.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '2', 'from test line', optionalCheckingOptions));case 3:rawResults = _context27.sent;
              expect(rawResults.noticeList.length).toEqual(3);
              expect(rawResults).toMatchSnapshot();case 6:case "end":return _context27.stop();}}}, _callee27);})));


    it('should fail with valid but high occurrence number', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee28() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee28$(_context28) {while (1) {switch (_context28.prev = _context28.next) {case 0:
              chosenLine = "MAT\t2\t2\tv248\t\tπροσκυνῆσαι\t2\tto worship\tPossible meanings are (1) they intended to worship the baby as divine, or (2) they wanted to honor him as a human king. If your language has a word that includes both meanings, you should consider using it here.";_context28.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'MAT', '2', '2', 'from test line', optionalCheckingOptions));case 3:rawResults = _context28.sent;
              expect(rawResults.noticeList.length).toEqual(1);
              expect(rawResults).toMatchSnapshot();case 6:case "end":return _context28.stop();}}}, _callee28);})));


    it('should pass with correct quote', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee29() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee29$(_context29) {while (1) {switch (_context29.prev = _context29.next) {case 0:
              chosenLine = "MAT\t2\t2\tv248\t\tπροσκυνῆσαι\t1\tto worship\tPossible meanings are (1) they intended to worship the baby as divine, or (2) they wanted to honor him as a human king. If your language has a word that includes both meanings, you should consider using it here.";_context29.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'MAT', '2', '2', 'from test line', optionalCheckingOptions));case 3:rawResults = _context29.sent;
              // console.log(`Got raw results: ${JSON.stringify(rawResults)}`);
              expect(rawResults.noticeList.length).toEqual(0);case 5:case "end":return _context29.stop();}}}, _callee29);})));


  });

  describe('Occurrence Note tests - ', function () {

    it('should find white space', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee30() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee30$(_context30) {while (1) {switch (_context30.prev = _context30.next) {case 0:
              chosenLine = "GEN\t1\t2\tm7qw\tfigs-imperative\tוְ⁠חֹ֖שֶׁךְ\t1\tDarkness\t ";_context30.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '2', 'from test line', optionalCheckingOptions));case 3:rawResults = _context30.sent;
              expect(rawResults.noticeList.some(function (entry) {return entry.message.indexOf('whitespace') !== -1;}));
              expect(rawResults.noticeList.length).toEqual(2);
              expect(rawResults).toMatchSnapshot();case 7:case "end":return _context30.stop();}}}, _callee30);})));


    it('should find empty note', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee31() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee31$(_context31) {while (1) {switch (_context31.prev = _context31.next) {case 0:
              chosenLine = "GEN\t1\t2\tn7qw\tfigs-imperative\tוְ⁠חֹ֖שֶׁךְ\t1\tDarkness\t";_context31.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '2', 'from test line', optionalCheckingOptions));case 3:rawResults = _context31.sent;
              expect(rawResults.noticeList.length).toEqual(2);
              expect(rawResults).toMatchSnapshot();case 6:case "end":return _context31.stop();}}}, _callee31);})));


  });

  describe('GL Note tests - ', function () {

    it('should find bad ellipse', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee32() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee32$(_context32) {while (1) {switch (_context32.prev = _context32.next) {case 0:
              chosenLine = "GEN\t2\t3\tw3r5\t\t\t1\tBad ellipse...\tNote8";_context32.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '2', '3', 'from test line', optionalCheckingOptions));case 3:rawResults = _context32.sent;
              expect(rawResults.noticeList.length).toEqual(2);
              expect(rawResults).toMatchSnapshot();case 6:case "end":return _context32.stop();}}}, _callee32);})));


  });

  describe('BookID tests - ', function () {

    it('should find wrong book ID', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee33() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee33$(_context33) {while (1) {switch (_context33.prev = _context33.next) {case 0:
              chosenLine = "RUT\t1\t2\to7qw\tfigs-imperative\tוְ⁠חֹ֖שֶׁךְ\t1\tDarkness\tThis is a command. By commanding that light should exist, God made it exist. (See: [[rc://*/ta/man/translate/figs-imperative]])";_context33.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '2', 'from test line', optionalCheckingOptions));case 3:rawResults = _context33.sent;
              expect(rawResults.noticeList.length).toEqual(2);
              expect(rawResults).toMatchSnapshot();case 6:case "end":return _context33.stop();}}}, _callee33);})));


    it('should find invalid book ID', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee34() {var chosenLine, error;return _regenerator.default.wrap(function _callee34$(_context34) {while (1) {switch (_context34.prev = _context34.next) {case 0:
              chosenLine = "GIN\t1\t2\tp7qw\tfigs-imperative\tוְ⁠חֹ֖שֶׁךְ\t1\tDarkness\tThis is a command. By commanding that light should exist, God made it exist. (See: [[rc://*/ta/man/translate/figs-imperative]])";
              error = false;_context34.prev = 2;_context34.next = 5;return (

                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GIN', '1', '2', 'from test line', optionalCheckingOptions));case 5:
              error = false;_context34.next = 11;break;case 8:_context34.prev = 8;_context34.t0 = _context34["catch"](2);

              error = true;case 11:

              expect(error).toBeTruthy();case 12:case "end":return _context34.stop();}}}, _callee34, null, [[2, 8]]);})));


  });

  describe('TSV format tests - ', function () {
    it('empty line should fail', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee35() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee35$(_context35) {while (1) {switch (_context35.prev = _context35.next) {case 0:
              chosenLine = ""; //lineG;
              _context35.next = 3;return (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '2', 'from test line', optionalCheckingOptions);case 3:rawResults = _context35.sent;
              expect(rawResults.noticeList.length).toEqual(1);
              expect(rawResults).toMatchSnapshot();case 6:case "end":return _context35.stop();}}}, _callee35);})));


    it('header should succeed', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee36() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee36$(_context36) {while (1) {switch (_context36.prev = _context36.next) {case 0:
              chosenLine = "Book\tChapter\tVerse\tID\tSupportReference\tOrigQuote\tOccurrence\tGLQuote\tOccurrenceNote";_context36.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '2', 'from test line', optionalCheckingOptions));case 3:rawResults = _context36.sent;
              expect(rawResults.noticeList.length).toEqual(0);case 5:case "end":return _context36.stop();}}}, _callee36);})));


    it('header should fail', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee37() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee37$(_context37) {while (1) {switch (_context37.prev = _context37.next) {case 0:
              chosenLine = "Book\tChapter\tVerse\tID\tSupportReference\tOrigQuote\tOccurrence\tGLQuote\tOccurrenceNotes";_context37.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '2', 'from test line', optionalCheckingOptions));case 3:rawResults = _context37.sent;
              expect(rawResults.noticeList.length).toEqual(11);case 5:case "end":return _context37.stop();}}}, _callee37);})));


    it('should find wrong row count', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee38() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee38$(_context38) {while (1) {switch (_context38.prev = _context38.next) {case 0:
              chosenLine = "EXO\t2\t3\tw3r5\t\t1\t\t<br>Boo"; // only 8 fields
              _context38.next = 3;return (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '2', 'from test line', optionalCheckingOptions);case 3:rawResults = _context38.sent;
              expect(rawResults.noticeList.length).toEqual(1);
              expect(rawResults).toMatchSnapshot();case 6:case "end":return _context38.stop();}}}, _callee38);})));


    it('should fail not TSV', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee39() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee39$(_context39) {while (1) {switch (_context39.prev = _context39.next) {case 0:
              chosenLine = "Peace on Earth, good will to all men/people!";_context39.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '2', 'from test line', optionalCheckingOptions));case 3:rawResults = _context39.sent;
              expect(rawResults.noticeList.length).toEqual(1);
              expect(rawResults).toMatchSnapshot();case 6:case "end":return _context39.stop();}}}, _callee39);})));


  });

  describe('SupportReference tests - ', function () {
    it('should find short SupportReference', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee40() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee40$(_context40) {while (1) {switch (_context40.prev = _context40.next) {case 0:
              chosenLine = "GEN\t1\t2\tq7q\tfigs-imperative\tוְ⁠חֹ֖שֶׁךְ\t1\tDarkness\tThis is a command. By commanding that light should exist, God made it exist. (See: [[rc://*/ta/man/translate/figs-imperative]])";_context40.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '2', 'from test line', optionalCheckingOptions));case 3:rawResults = _context40.sent;
              expect(rawResults.noticeList.length).toEqual(2);
              rawResults.suggestion = undefined; // We need to get rid of random characters in suggestion
              expect(rawResults).toMatchSnapshot();case 7:case "end":return _context40.stop();}}}, _callee40);})));


    it('should find long SupportReference', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee41() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee41$(_context41) {while (1) {switch (_context41.prev = _context41.next) {case 0:
              chosenLine = "GEN\t1\t2\tr7q33\tfigs-imperative\tוְ⁠חֹ֖שֶׁךְ\t1\tDarkness\tThis is a command. By commanding that light should exist, God made it exist. (See: [[rc://*/ta/man/translate/figs-imperative]])";_context41.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '2', 'from test line', optionalCheckingOptions));case 3:rawResults = _context41.sent;
              expect(rawResults.noticeList.length).toEqual(2);
              expect(rawResults).toMatchSnapshot();case 6:case "end":return _context41.stop();}}}, _callee41);})));


    it('should find missing SupportReference', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee42() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee42$(_context42) {while (1) {switch (_context42.prev = _context42.next) {case 0:
              chosenLine = "GEN\t1\t2\t\tfigs-imperative\tוְ⁠חֹ֖שֶׁךְ\t1\tDarkness\tThis is a command. By commanding that light should exist, God made it exist. (See: [[rc://*/ta/man/translate/figs-imperative]])";_context42.next = 3;return (
                (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '2', 'from test line', optionalCheckingOptions));case 3:rawResults = _context42.sent;
              expect(rawResults.noticeList.length).toEqual(2);
              expect(rawResults).toMatchSnapshot();case 6:case "end":return _context42.stop();}}}, _callee42);})));


  });

  it('should find invalid SupportReference and missing quotes', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee43() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee43$(_context43) {while (1) {switch (_context43.prev = _context43.next) {case 0:
            chosenLine = "GEN\t2\t3\tw3r5\tLaugh\t\t1\t\tNote5";_context43.next = 3;return (
              (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '2', '3', 'from test line', optionalCheckingOptions));case 3:rawResults = _context43.sent;
            expect(rawResults.noticeList.length).toEqual(4);
            expect(rawResults).toMatchSnapshot();case 6:case "end":return _context43.stop();}}}, _callee43);})));


  it('should handle front matter', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee44() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee44$(_context44) {while (1) {switch (_context44.prev = _context44.next) {case 0:
            chosenLine = "GEN\t1\tintro\tzb6f\t\t\t0\t\t# Genesis 01 General Notes<br><br>## Structure and formatting<br><br>This chapter presents the first account of God creating the world. There is a pattern to this account: “God said…God saw that it was good…This was evening and morning, the first day.” Translators should preserve this pattern in their versions.<br><br>## Special concepts in this chapter<br><br>### The universe<br><br>This account of creation is told within the framework of ancient Hebrew ideas about the universe: the earth was resting with water around it and below it. Over the earth was something like a vast dome, called “an expanse between the waters” (1:6), on top of which was more water. Translators should try to keep these original images in their work, even though readers in their project language might have a completely different idea of what the universe is like.<br><br>### Evening and morning<br><br>Genesis 1 presents the ancient Hebrew idea of a day: it begins with sunset, lasts through the night and continues through the daylight hours until the next sunset. This pattern should be preserved in translation, even if readers in the project language define “day” differently.<br><br>## Other possible translation difficulties in this chapter<br><br>### “In the beginning”<br><br>Some languages and cultures speak of the world as if it has always existed, as if it had no beginning. But “very long ago” is different from “in the beginning,” and you need to be sure that your translation communicates correctly.<br><br>### “God said, ‘Let there be’”<br><br>This expression occurs often in this chapter. It can be difficult to translate, because God is not shown as talking to a particular person. If God is talking to a thing, it is something not yet in existence. Translators should find the most natural way in the project language to signal the idea that God spoke things into existence; he created the world and the things in it by simply commanding that they should exist.";_context44.next = 3;return (
              (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', 'intro', 'from test line', optionalCheckingOptions));case 3:rawResults = _context44.sent;
            expect(rawResults.noticeList.length).toEqual(1);case 5:case "end":return _context44.stop();}}}, _callee44);})));


  it('should find invalid Book ID, chapter number, ID, SupportReference, quotes, OccurrenceNote', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee45() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee45$(_context45) {while (1) {switch (_context45.prev = _context45.next) {case 0:
            chosenLine = "GIN\t200\t9\tW-3r5\tLaugh\t\t17\tBad ellipse...\t<br>Boo hoo,,<br> lost my shoe !";_context45.next = 3;return (
              (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '2', 'from test line', optionalCheckingOptions));case 3:rawResults = _context45.sent;
            expect(rawResults.noticeList.length).toEqual(14);
            expect(rawResults).toMatchSnapshot();case 6:case "end":return _context45.stop();}}}, _callee45);})));


  it('should find mismatched chapter verse', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee46() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee46$(_context46) {while (1) {switch (_context46.prev = _context46.next) {case 0:
            chosenLine = "GEN\t2\t3\ts7qw\tfigs-imperative\t\t0\tLet there be light\tThis is a command. By commanding that light should exist, God made it exist. (See: [[rc://*/ta/man/translate/figs-imperative]])";_context46.next = 3;return (
              (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '22', '33', 'from test line', optionalCheckingOptions));case 3:rawResults = _context46.sent;
            expect(rawResults.noticeList.length).toEqual(3);
            expect(rawResults).toMatchSnapshot();case 6:case "end":return _context46.stop();}}}, _callee46);})));


  it('should find mismatched bookId', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee47() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee47$(_context47) {while (1) {switch (_context47.prev = _context47.next) {case 0:
            chosenLine = "EXO\t1\t2\tt7qw\tfigs-imperative\t\t0\tLet there be light\tThis is a command. By commanding that light should exist, God made it exist. (See: [[rc://*/ta/man/translate/figs-imperative]])";_context47.next = 3;return (
              (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '2', 'from test line', optionalCheckingOptions));case 3:rawResults = _context47.sent;
            expect(rawResults.noticeList.length).toEqual(2);
            expect(rawResults).toMatchSnapshot();case 6:case "end":return _context47.stop();}}}, _callee47);})));


  it('should find language code instead of asterisk', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee48() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee48$(_context48) {while (1) {switch (_context48.prev = _context48.next) {case 0:
            chosenLine = "EXO\t1\t2\tu7qw\tfigs-imperative\t\t0\tLet there be light\tThis is a command. By commanding that light should exist, God made it exist. (See: [[rc://en/ta/man/translate/figs-imperative]])";_context48.next = 3;return (
              (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'EXO', '1', '2', 'from test line', optionalCheckingOptions));case 3:rawResults = _context48.sent;
            expect(rawResults.noticeList.length).toEqual(1);
            expect(rawResults).toMatchSnapshot();case 6:case "end":return _context48.stop();}}}, _callee48);})));


  it('should be valid', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee49() {var chosenLine, rawResults;return _regenerator.default.wrap(function _callee49$(_context49) {while (1) {switch (_context49.prev = _context49.next) {case 0:
            chosenLine = "GEN\t1\t2\tv7qw\tfigs-imperative\tוְ⁠חֹ֖שֶׁךְ\t1\tDarkness\tThis is a command. By commanding that light should exist, God made it exist. (See: [[rc://*/ta/man/translate/figs-imperative]])";_context49.next = 3;return (
              (0, _tnTsv9RowCheck.checkTN_TSV9DataRow)(languageCode, repoCode, chosenLine, 'GEN', '1', '2', 'from test line', optionalCheckingOptions));case 3:rawResults = _context49.sent;
            expect(rawResults.noticeList.length).toEqual(1);case 5:case "end":return _context49.stop();}}}, _callee49);})));


});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,