"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _checkBookPackage = require("../demos/book-package-check/checkBookPackage");
var _path = _interopRequireDefault(require("path"));
var _fsExtra = _interopRequireDefault(require("fs-extra")); /* eslint-env jest */

var testFiles = {};

var optionalCheckingOptions = {
  disableLinkedTAArticlesCheckFlag: true,
  disableLinkedTWArticlesCheckFlag: true,
  getFile: function getFile(params) {
    var username = params.username,repository = params.repository,path = params.path;
    // console.log(`book-package-check.test getFile(${username}, ${repository}, ${path})`)
    var filePath = _path.default.join('./src/__tests__/fixtures', username, repository, path);

    if (testFiles.hasOwnProperty(filePath)) {// see if we have a test file to use
      if (testFiles[filePath] !== null) {// if file content not null, then return contents.  Otherwise will throw exception
        return testFiles[filePath];
      }
      // eslint-disable-next-line no-throw-literal
      throw "Simulated error - Could not find ".concat(filePath);
    } else if (_fsExtra.default.existsSync(filePath)) {
      return _fsExtra.default.readFileSync(filePath).toString();
    }
    // eslint-disable-next-line no-throw-literal
    throw "Tests could not find ".concat(filePath);
  },
  getFileListFromZip: function getFileListFromZip(params) {
    var username = params.username,repository = params.repository,optionalPrefix = params.optionalPrefix;
    // console.log(`book-package-check.test getFileListFromZip(${username}, ${repository}, ${optionalPrefix})`)
    var filePath = _path.default.join('./src/__tests__/fixtures', username, repository);
    var files = getAllFiles(filePath);
    if (optionalPrefix) {
      files = files.filter(function (file) {return file.toLowerCase().startsWith(optionalPrefix);}); // filter just for current book
    }
    return files;
  } };


describe('checkBookPackage() - ', function () {
  beforeEach(function () {
    testFiles = {}; // reset test files
  });

  it('TIT should fail on unsupported language', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {var username, languageCode, bookID, rawResults, filteredResults;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:
            username = 'unfoldingWord';
            languageCode = 'zzz';
            bookID = 'TIT';_context.next = 5;return (
              (0, _checkBookPackage.checkBookPackage)(username, languageCode, bookID, function () {}, optionalCheckingOptions));case 5:rawResults = _context.sent;
            console.log("TIT unsupported language BP test took ".concat(rawResults.elapsedSeconds, " seconds"));
            expect(rawResults.noticeList.length).toBeGreaterThan(0);
            filteredResults = {
              successList: rawResults.successList,
              noticeList: rawResults.noticeList,
              checkedFilenames: rawResults.checkedFilenames,
              checkedRepoNames: rawResults.checkedRepoNames };

            expect(filteredResults).toMatchSnapshot();case 10:case "end":return _context.stop();}}}, _callee);})),
  6000); // Allow 6 seconds

  it('TIT should fail on missing repo', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {var username, languageCode, bookID, rawResults, filteredResults;return _regenerator.default.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:
            username = 'unfoldingWord';
            languageCode = 'en';
            bookID = 'TIT';
            testFiles = { // override these files
              'src/__tests__/fixtures/unfoldingWord/en_ult/57-TIT.usfm': null };_context2.next = 6;return (


              (0, _checkBookPackage.checkBookPackage)(username, languageCode, bookID, function () {}, optionalCheckingOptions));case 6:rawResults = _context2.sent;
            console.log("TIT missing repo BP test took ".concat(rawResults.elapsedSeconds, " seconds"));
            expect(rawResults.noticeList.length).toBeGreaterThan(0);
            filteredResults = {
              successList: rawResults.successList,
              noticeList: rawResults.noticeList,
              checkedFilenames: rawResults.checkedFilenames,
              checkedRepoNames: rawResults.checkedRepoNames };

            expect(filteredResults).toMatchSnapshot();case 11:case "end":return _context2.stop();}}}, _callee2);})),
  12000); // Allow 12 seconds

  it('TIT should pass', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {var username, languageCode, bookID, rawResults, filteredResults;return _regenerator.default.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:
            username = 'unfoldingWord';
            languageCode = 'en';
            bookID = 'TIT';_context3.next = 5;return (
              (0, _checkBookPackage.checkBookPackage)(username, languageCode, bookID, function () {}, optionalCheckingOptions));case 5:rawResults = _context3.sent;
            console.log("TIT BP test took ".concat(rawResults.elapsedSeconds, " seconds"));
            expect(rawResults.noticeList.length).toBeGreaterThanOrEqual(0);
            filteredResults = {
              successList: rawResults.successList,
              noticeList: rawResults.noticeList,
              checkedFilenames: rawResults.checkedFilenames,
              checkedRepoNames: rawResults.checkedRepoNames };

            expect(filteredResults).toMatchSnapshot();case 10:case "end":return _context3.stop();}}}, _callee3);})),
  15000); // Allow 15 seconds

  it('RUT should pass', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {var username, languageCode, bookID, rawResults, filteredResults;return _regenerator.default.wrap(function _callee4$(_context4) {while (1) {switch (_context4.prev = _context4.next) {case 0:
            username = 'unfoldingWord';
            languageCode = 'en';
            bookID = 'RUT';_context4.next = 5;return (
              (0, _checkBookPackage.checkBookPackage)(username, languageCode, bookID, function () {}, optionalCheckingOptions));case 5:rawResults = _context4.sent;
            console.log("RUT BP test took ".concat(rawResults.elapsedSeconds, " seconds"));
            expect(rawResults.noticeList.length).toBeGreaterThanOrEqual(4);
            filteredResults = {
              successList: rawResults.successList,
              noticeList: rawResults.noticeList,
              checkedFilenames: rawResults.checkedFilenames,
              checkedRepoNames: rawResults.checkedRepoNames };

            expect(filteredResults).toMatchSnapshot();case 10:case "end":return _context4.stop();}}}, _callee4);})),
  20000); // Allow 20 seconds

});

//
// Helper functions
//

/**
 * recursively get a file list
 * @param {string} dirPath
 * @param {string} subPath
 * @param {Array} arrayOfFiles
 * @return {Array}
 */
var getAllFiles = function getAllFiles(dirPath, subPath, arrayOfFiles) {
  // console.log(`getAllFiles(${dirPath}, ${subPath}, ${arrayOfFiles}`);
  arrayOfFiles = arrayOfFiles || [];
  subPath = subPath || '.';
  var fullPath = _path.default.join(dirPath, subPath);
  if (_fsExtra.default.existsSync(fullPath)) {
    var files = _fsExtra.default.readdirSync(fullPath);

    files.forEach(function (file) {
      var fullSubPath_ = _path.default.join(fullPath, file);
      if (_fsExtra.default.statSync(fullSubPath_).isDirectory()) {
        arrayOfFiles = getAllFiles(dirPath, _path.default.join(subPath, file), arrayOfFiles);
      } else {
        arrayOfFiles.push(_path.default.join(subPath, file));
      }
    });
  }
  return arrayOfFiles;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,