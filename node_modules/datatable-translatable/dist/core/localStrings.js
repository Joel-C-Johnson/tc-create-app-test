"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.localString = void 0;
// 
// Translate strings into different languages 
// Then use localString(id) to return the language specific string to use
//
// To use:
// 1. Import:
//    import { Tooltip } from '@material-ui/core';
//    import { localString } from '../../core/localStrings';
//
// 2. Update string ids as needed
// 3. Wrap button (if a tooltip):
// <Tooltip title={localString(iconTooltip)} arrow>
//   <Translate />
// </Tooltip>
// 4. -or- just call exported function, where a string is needed:
//
//    localString(stringid)
//
var strings = {
  en: {
    AddRow: "Add a Row",
    DeleteRow: "Delete a Row",
    MoveRowUp: "Move Row Up",
    MoveRowDown: "Move Row Down",
    ViewVersions: "View Versions",
    ExpandCollapseChapter: "Expand/Collapse Chapter",

    /* do not remove these two */
    StringMissing: "String Id missing",
    LangNotSupported: "Language not supported"
  },
  el: {
    StringMissing: "λείπει το εργαλείο"
  }
};

var localString = function localString(id) {
  var lang = navigator.language.split(/-|_/)[0]; // if language is unknown (not sure this can actually happen)

  if (lang === undefined) {
    lang = 'en';
  } // if there are no strings for the language


  if (strings[lang] === undefined) {
    lang = 'en';
    return strings[lang]['LangNotSupported'];
  }

  var lstring = strings[lang][id]; // if a string for the message id is missing

  if (lstring === undefined) {
    return strings[lang]['StringMissing'];
  }

  return lstring;
};

exports.localString = localString;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb3JlL2xvY2FsU3RyaW5ncy5qcyJdLCJuYW1lcyI6WyJzdHJpbmdzIiwiZW4iLCJBZGRSb3ciLCJEZWxldGVSb3ciLCJNb3ZlUm93VXAiLCJNb3ZlUm93RG93biIsIlZpZXdWZXJzaW9ucyIsIkV4cGFuZENvbGxhcHNlQ2hhcHRlciIsIlN0cmluZ01pc3NpbmciLCJMYW5nTm90U3VwcG9ydGVkIiwiZWwiLCJsb2NhbFN0cmluZyIsImlkIiwibGFuZyIsIm5hdmlnYXRvciIsImxhbmd1YWdlIiwic3BsaXQiLCJ1bmRlZmluZWQiLCJsc3RyaW5nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFNQSxPQUFPLEdBQUc7QUFDWkMsRUFBQUEsRUFBRSxFQUFDO0FBQ0NDLElBQUFBLE1BQU0sRUFBRSxXQURUO0FBRUNDLElBQUFBLFNBQVMsRUFBRSxjQUZaO0FBR0NDLElBQUFBLFNBQVMsRUFBRSxhQUhaO0FBSUNDLElBQUFBLFdBQVcsRUFBRSxlQUpkO0FBS0NDLElBQUFBLFlBQVksRUFBRSxlQUxmO0FBTUNDLElBQUFBLHFCQUFxQixFQUFFLHlCQU54Qjs7QUFPQztBQUNBQyxJQUFBQSxhQUFhLEVBQUMsbUJBUmY7QUFTQ0MsSUFBQUEsZ0JBQWdCLEVBQUU7QUFUbkIsR0FEUztBQVlaQyxFQUFBQSxFQUFFLEVBQUU7QUFDQUYsSUFBQUEsYUFBYSxFQUFDO0FBRGQ7QUFaUSxDQUFoQjs7QUFpQk8sSUFBTUcsV0FBVyxHQUFHLFNBQWRBLFdBQWMsQ0FBQ0MsRUFBRCxFQUFRO0FBQy9CLE1BQUlDLElBQUksR0FBR0MsU0FBUyxDQUFDQyxRQUFWLENBQW1CQyxLQUFuQixDQUF5QixLQUF6QixFQUFnQyxDQUFoQyxDQUFYLENBRCtCLENBRS9COztBQUNBLE1BQUtILElBQUksS0FBS0ksU0FBZCxFQUEwQjtBQUN0QkosSUFBQUEsSUFBSSxHQUFHLElBQVA7QUFDSCxHQUw4QixDQU0vQjs7O0FBQ0EsTUFBS2IsT0FBTyxDQUFDYSxJQUFELENBQVAsS0FBa0JJLFNBQXZCLEVBQW1DO0FBQy9CSixJQUFBQSxJQUFJLEdBQUcsSUFBUDtBQUNBLFdBQU9iLE9BQU8sQ0FBQ2EsSUFBRCxDQUFQLENBQWMsa0JBQWQsQ0FBUDtBQUNIOztBQUNELE1BQUlLLE9BQU8sR0FBR2xCLE9BQU8sQ0FBQ2EsSUFBRCxDQUFQLENBQWNELEVBQWQsQ0FBZCxDQVgrQixDQVkvQjs7QUFDQSxNQUFLTSxPQUFPLEtBQUtELFNBQWpCLEVBQTZCO0FBQ3pCLFdBQU9qQixPQUFPLENBQUNhLElBQUQsQ0FBUCxDQUFjLGVBQWQsQ0FBUDtBQUNIOztBQUNELFNBQU9LLE9BQVA7QUFDSCxDQWpCTSIsInNvdXJjZXNDb250ZW50IjpbIi8vIFxyXG4vLyBUcmFuc2xhdGUgc3RyaW5ncyBpbnRvIGRpZmZlcmVudCBsYW5ndWFnZXMgXHJcbi8vIFRoZW4gdXNlIGxvY2FsU3RyaW5nKGlkKSB0byByZXR1cm4gdGhlIGxhbmd1YWdlIHNwZWNpZmljIHN0cmluZyB0byB1c2VcclxuLy9cclxuLy8gVG8gdXNlOlxyXG4vLyAxLiBJbXBvcnQ6XHJcbi8vICAgIGltcG9ydCB7IFRvb2x0aXAgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZSc7XHJcbi8vICAgIGltcG9ydCB7IGxvY2FsU3RyaW5nIH0gZnJvbSAnLi4vLi4vY29yZS9sb2NhbFN0cmluZ3MnO1xyXG4vL1xyXG4vLyAyLiBVcGRhdGUgc3RyaW5nIGlkcyBhcyBuZWVkZWRcclxuLy8gMy4gV3JhcCBidXR0b24gKGlmIGEgdG9vbHRpcCk6XHJcbi8vIDxUb29sdGlwIHRpdGxlPXtsb2NhbFN0cmluZyhpY29uVG9vbHRpcCl9IGFycm93PlxyXG4vLyAgIDxUcmFuc2xhdGUgLz5cclxuLy8gPC9Ub29sdGlwPlxyXG4vLyA0LiAtb3ItIGp1c3QgY2FsbCBleHBvcnRlZCBmdW5jdGlvbiwgd2hlcmUgYSBzdHJpbmcgaXMgbmVlZGVkOlxyXG4vL1xyXG4vLyAgICBsb2NhbFN0cmluZyhzdHJpbmdpZClcclxuLy9cclxuY29uc3Qgc3RyaW5ncyA9IHtcclxuICAgIGVuOntcclxuICAgICAgICBBZGRSb3c6IFwiQWRkIGEgUm93XCIsXHJcbiAgICAgICAgRGVsZXRlUm93OiBcIkRlbGV0ZSBhIFJvd1wiLFxyXG4gICAgICAgIE1vdmVSb3dVcDogXCJNb3ZlIFJvdyBVcFwiLFxyXG4gICAgICAgIE1vdmVSb3dEb3duOiBcIk1vdmUgUm93IERvd25cIixcclxuICAgICAgICBWaWV3VmVyc2lvbnM6IFwiVmlldyBWZXJzaW9uc1wiLFxyXG4gICAgICAgIEV4cGFuZENvbGxhcHNlQ2hhcHRlcjogXCJFeHBhbmQvQ29sbGFwc2UgQ2hhcHRlclwiLFxyXG4gICAgICAgIC8qIGRvIG5vdCByZW1vdmUgdGhlc2UgdHdvICovXHJcbiAgICAgICAgU3RyaW5nTWlzc2luZzpcIlN0cmluZyBJZCBtaXNzaW5nXCIsXHJcbiAgICAgICAgTGFuZ05vdFN1cHBvcnRlZDogXCJMYW5ndWFnZSBub3Qgc3VwcG9ydGVkXCJcclxuICAgIH0sXHJcbiAgICBlbDoge1xyXG4gICAgICAgIFN0cmluZ01pc3Npbmc6XCLOu861zq/PgM61zrkgz4TOvyDOtc+BzrPOsc67zrXOr86/XCJcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBsb2NhbFN0cmluZyA9IChpZCkgPT4ge1xyXG4gICAgbGV0IGxhbmcgPSBuYXZpZ2F0b3IubGFuZ3VhZ2Uuc3BsaXQoLy18Xy8pWzBdO1xyXG4gICAgLy8gaWYgbGFuZ3VhZ2UgaXMgdW5rbm93biAobm90IHN1cmUgdGhpcyBjYW4gYWN0dWFsbHkgaGFwcGVuKVxyXG4gICAgaWYgKCBsYW5nID09PSB1bmRlZmluZWQgKSB7XHJcbiAgICAgICAgbGFuZyA9ICdlbic7XHJcbiAgICB9XHJcbiAgICAvLyBpZiB0aGVyZSBhcmUgbm8gc3RyaW5ncyBmb3IgdGhlIGxhbmd1YWdlXHJcbiAgICBpZiAoIHN0cmluZ3NbbGFuZ10gPT09IHVuZGVmaW5lZCApIHtcclxuICAgICAgICBsYW5nID0gJ2VuJztcclxuICAgICAgICByZXR1cm4gc3RyaW5nc1tsYW5nXVsnTGFuZ05vdFN1cHBvcnRlZCddO1xyXG4gICAgfVxyXG4gICAgbGV0IGxzdHJpbmcgPSBzdHJpbmdzW2xhbmddW2lkXTtcclxuICAgIC8vIGlmIGEgc3RyaW5nIGZvciB0aGUgbWVzc2FnZSBpZCBpcyBtaXNzaW5nXHJcbiAgICBpZiAoIGxzdHJpbmcgPT09IHVuZGVmaW5lZCApIHtcclxuICAgICAgICByZXR1cm4gc3RyaW5nc1tsYW5nXVsnU3RyaW5nTWlzc2luZyddXHJcbiAgICB9XHJcbiAgICByZXR1cm4gbHN0cmluZztcclxufTtcclxuIl19