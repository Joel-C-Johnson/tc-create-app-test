"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getOffset = getOffset;
exports.getRowElement = exports.parseCells = exports.parseRows = exports.getRows = exports.getColumnNames = exports.stringify = exports.parseDataTable = exports.getColumnsFilterOptions = exports.correlateData = exports.rowGenerate = exports.cellEdit = exports.rowDelete = exports.rowAddBelow = exports.rowAddAbove = exports.rowMoveBelow = exports.rowMoveAbove = void 0;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var rowMoveAbove = function rowMoveAbove(_ref) {
  var rows = _ref.rows,
      rowIndex = _ref.rowIndex;
  return arrayMove(rows, rowIndex, rowIndex - 1);
};

exports.rowMoveAbove = rowMoveAbove;

var rowMoveBelow = function rowMoveBelow(_ref2) {
  var rows = _ref2.rows,
      rowIndex = _ref2.rowIndex;
  return arrayMove(rows, rowIndex, rowIndex + 1);
};

exports.rowMoveBelow = rowMoveBelow;

var rowAddAbove = function rowAddAbove(_ref3) {
  var rows = _ref3.rows,
      rowIndex = _ref3.rowIndex,
      rowData = _ref3.rowData;

  var _rows = _toConsumableArray(rows);

  _rows.splice(rowIndex - 1, 0, rowData);

  return _rows;
};

exports.rowAddAbove = rowAddAbove;

var rowAddBelow = function rowAddBelow(_ref4) {
  var rows = _ref4.rows,
      rowIndex = _ref4.rowIndex,
      rowData = _ref4.rowData;

  var _rows = _toConsumableArray(rows);

  _rows.splice(rowIndex + 1, 0, rowData);

  return _rows;
};

exports.rowAddBelow = rowAddBelow;

var rowDelete = function rowDelete(_ref5) {
  var rows = _ref5.rows,
      rowIndex = _ref5.rowIndex;

  var _rows = _toConsumableArray(rows);

  _rows.splice(rowIndex, 1);

  return _rows;
};

exports.rowDelete = rowDelete;

var cellEdit = function cellEdit(_ref6) {
  var rows = _ref6.rows,
      rowIndex = _ref6.rowIndex,
      columnIndex = _ref6.columnIndex,
      value = _ref6.value,
      data = _ref6.data;

  var _rows = rows.map(function (cells) {
    return _toConsumableArray(cells);
  }); // if row index points beyond end of array, 
  // then add as many empty rows as needed to 
  // make it a valid, even if empty row


  if (rowIndex >= rows.length || rows[rowIndex] === undefined) {
    //console.log("Undo delete process begins")
    //console.log("[datatable.js] cellEdit() number of row=", rows.length, " rowIndex=", rowIndex, " rows[rowIndex]", rows[rowIndex]);
    for (var i = -1; i < rowIndex - rows.length; i++) {
      var _row = new Array(rows[0].length); // set each cell in new row to be empty string


      for (var j = 0; j < _row.length; j++) {//_row[j] = "";
      }

      _rows.push(_row);
    } // now do an "undo" by filling in values from source


    for (var _i = 0; _i < _rows[rowIndex].length; _i++) {
      _rows[rowIndex][_i] = data[rowIndex][_i].trim();
    } //console.log("Undo delete process ends")

  }

  _rows[rowIndex][columnIndex] = value; //console.log("_rows before filter:", _rows);
  // next remove any empty rows created by the undo delete process

  _rows = _rows.filter(function (arow) {
    return arow[0] !== undefined;
  }); //console.log("_rows after filter:", _rows);

  return _rows;
};

exports.cellEdit = cellEdit;

var rowGenerate = function rowGenerate(_ref7) {
  var rows = _ref7.rows,
      columnNames = _ref7.columnNames,
      rowIndex = _ref7.rowIndex;
  var rowsIndex = {};
  var lengthIndex = {};
  var rowData = rows[rowIndex];
  rows.forEach(function (_row) {
    _row.forEach(function (value, index) {
      var column = columnNames[index];

      if (!rowsIndex[column]) {
        rowsIndex[column] = {};
      }

      if (!rowsIndex[column][value]) {
        rowsIndex[column][value] = 0;
      }

      rowsIndex[column][value]++;
      var valueLength = value.length;

      if (!lengthIndex[column]) {
        lengthIndex[column] = {};
      }

      if (!lengthIndex[column][valueLength]) {
        lengthIndex[column][valueLength] = 0;
      }

      lengthIndex[column][valueLength]++;
    });
  });
  var rowCount = rows.length;
  var newRow = rowData.map(function (value, index) {
    var column = columnNames[index];
    var values = Object.keys(rowsIndex[column]).length;
    var valuesRatio = values / rowCount;
    var duplicateValue = valuesRatio < 0.5;
    var valuesLengths = Object.keys(lengthIndex[column]);
    var valuesLengthsLength = valuesLengths.length;
    var needRandomId = valuesRatio > 0.99 && valuesLengthsLength <= 2;
    var newValue = '';

    if (duplicateValue) {
      newValue = value;
    } else if (needRandomId) {
      var length = value.length;
      var notUnique = true;
      var counter = 0;
      var allIds = Object.keys(rowsIndex[column]);
      var UNIQUE_COUNTER_THRESHOLD = 1000;

      while (notUnique && counter < UNIQUE_COUNTER_THRESHOLD) {
        newValue = randomId({
          length: length
        });
        notUnique = allIds.includes(newValue);
        counter++;
      }

      if (counter >= UNIQUE_COUNTER_THRESHOLD) {
        console.log("Duplicate IDs found after " + UNIQUE_COUNTER_THRESHOLD + " tries");
      }
    }

    return newValue;
  });
  return newRow;
};

exports.rowGenerate = rowGenerate;

var correlateData = function correlateData(_ref8) {
  var sourceRows = _ref8.sourceRows,
      targetRows = _ref8.targetRows,
      compositeKeyIndices = _ref8.compositeKeyIndices,
      delimiters = _ref8.delimiters;
  var data = [];

  if (sourceRows[0].length === targetRows[0].length) {
    var rowIndex = {};
    targetRows.forEach(function (row) {
      var compositeKey = compositeKeyIndices.map(function (index) {
        return row[index];
      }).join(':');
      rowIndex[compositeKey] = {
        target: row
      };
    });
    sourceRows.forEach(function (row) {
      var compositeKey = compositeKeyIndices.map(function (index) {
        return row[index];
      }).join(':'); // rowIndex[compositeKey] = rowIndex[compositeKey] || {};

      rowIndex[compositeKey] = _objectSpread({
        source: row
      }, rowIndex[compositeKey]);
    });
    data = Object.values(rowIndex).map(function (row) {
      var _row;

      if (row.source) {
        _row = row.source.map(function (sourceCell, index) {
          return "".concat(sourceCell).concat(delimiters.cell).concat(row.target ? row.target[index].replace(/^\u200B+/, '').replace(/\u200B+$/, '') : '');
        });
      } else {
        _row = row.target.map(function (targetCell, index) {
          return "".concat(delimiters.cell).concat(targetCell.replace(/^\u200B+/, '').replace(/\u200B+$/, ''));
        });
      }

      return _row;
    });
  }

  return data;
};

exports.correlateData = correlateData;

var getColumnsFilterOptions = function getColumnsFilterOptions(_ref9) {
  var columnIndices = _ref9.columnIndices,
      data = _ref9.data,
      delimiters = _ref9.delimiters;
  var _columnsFilterOptions = [];
  data.forEach(function (row) {
    columnIndices.forEach(function (columnIndex) {
      var values = row[columnIndex].split(delimiters.cell);
      values.forEach(function (value) {
        if (value) {
          if (!_columnsFilterOptions[columnIndex]) {
            _columnsFilterOptions[columnIndex] = [];
          }

          if (!_columnsFilterOptions[columnIndex].includes(value)) {
            _columnsFilterOptions[columnIndex].push(value);
          }
        }
      });
    });
  });
  return _columnsFilterOptions;
};

exports.getColumnsFilterOptions = getColumnsFilterOptions;

var parseDataTable = function parseDataTable(_ref10) {
  var table = _ref10.table,
      delimiters = _ref10.delimiters;
  var rows = parseRows({
    table: table,
    delimiter: delimiters.row
  }).map(function (row) {
    return parseCells({
      row: row,
      delimiter: delimiters.cell
    });
  });
  var dataTable = {
    columnNames: getColumnNames(rows),
    rows: getRows(rows)
  };
  return dataTable;
};

exports.parseDataTable = parseDataTable;

var stringify = function stringify(_ref11) {
  var columnNames = _ref11.columnNames,
      rows = _ref11.rows,
      delimiters = _ref11.delimiters;
  var string = '';

  if (columnNames && rows) {
    var dataTable = [columnNames].concat(_toConsumableArray(rows));

    for (var i = 0; i < dataTable.length; i++) {
      var rowstring = '';

      for (var j = 0; j < dataTable[i].length; j++) {
        rowstring += dataTable[i][j].replaceAll(/\n/gi, '<br>');

        if (j < dataTable[i].length - 1) {
          rowstring += delimiters.cell;
        }

        ;
      }

      string += rowstring;
      string += delimiters.row;
    } // The below is commented out and replaced with the 2d for loop above.
    // This is needed in order to only apply the outputFilter to make newlines 
    // into <br> elements when no parser is provided to the component. 
    // This makes up for the unconditional removal 
    // from the datatable outputfilter specified in Cell.js
    //string = dataTable.map(cells => cells.join(delimiters.cell)).join(delimiters.row);

  }

  return string;
};

exports.stringify = stringify;

var getColumnNames = function getColumnNames(rows) {
  return rows[0];
};

exports.getColumnNames = getColumnNames;

var getRows = function getRows(rows) {
  return rows.slice(1);
};

exports.getRows = getRows;

var parseRows = function parseRows(_ref12) {
  var table = _ref12.table,
      delimiter = _ref12.delimiter;
  return table.split(delimiter).filter(function (row) {
    return row !== '';
  });
};

exports.parseRows = parseRows;

var parseCells = function parseCells(_ref13) {
  var row = _ref13.row,
      delimiter = _ref13.delimiter;
  return row.split(delimiter);
}; // Private
// ids must begin with a letter


exports.parseCells = parseCells;

var randomId = function randomId(_ref14) {
  var length = _ref14.length;
  // get the initial letter first
  var letters = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"];
  var random = Math.floor(Math.random() * letters.length);
  var number = Math.random(); // 0.9394456857981651
  // number.toString(36); // '0.xtis06h6'

  if (length > 9) {
    length = 9;
  }

  var id = letters[random] + number.toString(36).substr(2, length - 1); // 'xtis06h6'

  return id;
};

var arrayMove = function arrayMove(array, oldIndex, newIndex) {
  var _array = _toConsumableArray(array);

  var tooLow = newIndex < 0;
  var tooHigh = newIndex > array.length - 1;

  if (!tooLow && !tooHigh) {
    var element = _array[oldIndex];

    _array.splice(oldIndex, 1);

    _array.splice(newIndex, 0, element);
  }

  return _array;
};

var getRowElement = function getRowElement(generateRowId, rowData, position) {
  var id = generateRowId(rowData);
  var currentHeader = document.getElementById(id);
  var previousSiblingHeader = getSiblingByClassName(currentHeader, '.header-row', position);
  return previousSiblingHeader;
};

exports.getRowElement = getRowElement;

function getSiblingByClassName(div, className, position) {
  var allInstances = Array.from(document.querySelectorAll(className));
  var indexOfCurrentElement = allInstances.indexOf(div);
  return allInstances[indexOfCurrentElement + position];
}

function getOffset(element) {
  var rect, win;

  if (!element) {
    return;
  } // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
  // Support: IE <=11+
  // Running getBoundingClientRect on a
  // disconnected node in IE throws an error


  if (!element.getClientRects().length) {
    return {
      top: 0,
      left: 0
    };
  } // Get document-relative position by adding viewport scroll to viewport-relative gBCR


  rect = element.getBoundingClientRect();
  win = element.ownerDocument.defaultView;
  return {
    top: rect.top + win.pageYOffset,
    left: rect.left + win.pageXOffset
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,