"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DataTableContextProvider = DataTableContextProvider;
exports.DataTableContext = void 0;

var _react = _interopRequireWildcard(require("react"));

var _lodash = _interopRequireDefault(require("lodash.isequal"));

var _useDeepCompareEffect = _interopRequireDefault(require("use-deep-compare-effect"));

var _deepFreeze = _interopRequireDefault(require("deep-freeze"));

var _datatable = require("../../core/datatable");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var DataTableContext = /*#__PURE__*/_react["default"].createContext();

exports.DataTableContext = DataTableContext;

function DataTableContextProvider(_ref) {
  var children = _ref.children,
      sourceFile = _ref.sourceFile,
      targetFile = _ref.targetFile,
      delimiters = _ref.delimiters,
      parser = _ref.parser,
      _ref$config = _ref.config,
      compositeKeyIndices = _ref$config.compositeKeyIndices,
      columnsFilter = _ref$config.columnsFilter;

  var _useState = (0, _react.useState)({}),
      _useState2 = _slicedToArray(_useState, 2),
      data = _useState2[0],
      setData = _useState2[1];

  var rowsReducer = function rowsReducer(rows, action) {
    var _rows;

    var type = action.type,
        value = action.value;
    var rowIndex = value.rowIndex,
        rowData = value.rowData,
        columnIndex = value.columnIndex;

    switch (type) {
      case 'SET_ROWS':
        return (0, _deepFreeze["default"])(value.rows);

      case 'ROW_MOVE_ABOVE':
        _rows = (0, _datatable.rowMoveAbove)({
          rows: rows,
          rowIndex: rowIndex
        });
        return (0, _deepFreeze["default"])(_rows);

      case 'ROW_MOVE_BELOW':
        _rows = (0, _datatable.rowMoveBelow)({
          rows: rows,
          rowIndex: rowIndex
        });
        return (0, _deepFreeze["default"])(_rows);

      case 'ROW_ADD_BELOW':
        _rows = (0, _datatable.rowAddBelow)({
          rows: rows,
          rowIndex: rowIndex,
          rowData: rowData
        });
        return (0, _deepFreeze["default"])(_rows);

      case 'ROW_DELETE':
        _rows = (0, _datatable.rowDelete)({
          rows: rows,
          rowIndex: rowIndex
        });
        return (0, _deepFreeze["default"])(_rows);

      case 'CELL_EDIT':
        _rows = (0, _datatable.cellEdit)({
          rows: rows,
          rowIndex: rowIndex,
          columnIndex: columnIndex,
          value: value.value,
          data: data
        });
        return (0, _deepFreeze["default"])(_rows);

      default:
        throw new Error("Unsupported action type: ".concat(action.type));
    }

    ;
  };

  var _useState3 = (0, _react.useState)({}),
      _useState4 = _slicedToArray(_useState3, 2),
      sourceRows = _useState4[0],
      setSourceRows = _useState4[1];

  var _useReducer = (0, _react.useReducer)(rowsReducer, {}),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      targetRows = _useReducer2[0],
      targetRowsDispatch = _useReducer2[1];

  var setTargetRows = function setTargetRows(rows) {
    return targetRowsDispatch({
      type: 'SET_ROWS',
      value: {
        rows: rows
      }
    });
  };

  var _useState5 = (0, _react.useState)(false),
      _useState6 = _slicedToArray(_useState5, 2),
      changed = _useState6[0],
      setChanged = _useState6[1];

  var _useState7 = (0, _react.useState)({}),
      _useState8 = _slicedToArray(_useState7, 2),
      columnNames = _useState8[0],
      setColumnNames = _useState8[1];

  var _useState9 = (0, _react.useState)([]),
      _useState10 = _slicedToArray(_useState9, 2),
      columnsFilterOptions = _useState10[0],
      setColumnsFilterOptions = _useState10[1]; // populate columnsFilterOptions when ready


  (0, _react.useEffect)(function () {
    if (columnsFilter && columnNames && Object.keys(data).length) {
      var columnIndices = columnsFilter.map(function (columnName) {
        return columnNames.indexOf(columnName);
      });

      var _columnsFilterOptions = (0, _datatable.getColumnsFilterOptions)({
        columnIndices: columnIndices,
        data: data,
        delimiters: delimiters
      });

      if (!(0, _lodash["default"])(_columnsFilterOptions, columnsFilterOptions)) {
        setColumnsFilterOptions(_columnsFilterOptions);
      }
    }
  }, [columnsFilter, columnNames, data, delimiters, columnsFilterOptions]); // parse sourceFile when updated

  (0, _react.useEffect)(function () {
    if (parser && parser.tsvStringToTable) {
      console.log("DataTable.context() using tsv parser for source");

      var _parser$tsvStringToTa = parser.tsvStringToTable(sourceFile),
          rows = _parser$tsvStringToTa.data;

      setSourceRows(rows);
    } else {
      if (delimiters) {
        var _parseDataTable = (0, _datatable.parseDataTable)({
          table: sourceFile,
          delimiters: delimiters
        }),
            _rows2 = _parseDataTable.rows;

        setSourceRows(_rows2);
      }
    }
  }, [sourceFile, delimiters, parser]); // parse targetFile when updated

  (0, _react.useEffect)(function () {
    if (parser && parser.tsvStringToTable) {
      console.log("DataTable.context() using tsv parser for target");

      var _parser$tsvStringToTa2 = parser.tsvStringToTable(targetFile),
          _columnNames = _parser$tsvStringToTa2.header,
          rows = _parser$tsvStringToTa2.data;

      setColumnNames(_columnNames);
      setTargetRows(rows);
      setChanged(false);
    } else if (delimiters) {
      var _parseDataTable2 = (0, _datatable.parseDataTable)({
        table: targetFile,
        delimiters: delimiters
      }),
          _columnNames2 = _parseDataTable2.columnNames,
          _rows3 = _parseDataTable2.rows;

      setColumnNames(_columnNames2);
      setTargetRows(_rows3);
      setChanged(false);
    }
  }, [targetFile, delimiters, parser]); // correlate data by compositeKeyIndices when sourceRows or targetRows updated

  (0, _useDeepCompareEffect["default"])(function () {
    if (Object.keys(sourceRows).length && Object.keys(targetRows).length) {
      var _data = (0, _datatable.correlateData)({
        sourceRows: sourceRows,
        targetRows: targetRows,
        compositeKeyIndices: compositeKeyIndices,
        delimiters: delimiters
      });

      setData(_data);
    }
  }, [sourceRows, targetRows, compositeKeyIndices, delimiters]);
  var actions = (0, _react.useMemo)(function () {
    return {
      rowMoveAbove: function rowMoveAbove(_ref2) {
        var rowIndex = _ref2.rowIndex;
        targetRowsDispatch({
          type: 'ROW_MOVE_ABOVE',
          value: {
            rowIndex: rowIndex
          }
        });
        setChanged(true);
      },
      rowMoveBelow: function rowMoveBelow(_ref3) {
        var rowIndex = _ref3.rowIndex;
        targetRowsDispatch({
          type: 'ROW_MOVE_BELOW',
          value: {
            rowIndex: rowIndex
          }
        });
        setChanged(true);
      },
      rowAddBelow: function rowAddBelow(_ref4) {
        var rowIndex = _ref4.rowIndex,
            rowData = _ref4.rowData;
        targetRowsDispatch({
          type: 'ROW_ADD_BELOW',
          value: {
            rowIndex: rowIndex,
            rowData: rowData
          }
        });
        setChanged(true);
      },
      rowDelete: function rowDelete(_ref5) {
        var rowIndex = _ref5.rowIndex;
        targetRowsDispatch({
          type: 'ROW_DELETE',
          value: {
            rowIndex: rowIndex
          }
        });
        console.log("row deleted");
        setChanged(true);
      },
      cellEdit: function cellEdit(_ref6) {
        var rowIndex = _ref6.rowIndex,
            columnIndex = _ref6.columnIndex,
            value = _ref6.value;
        targetRowsDispatch({
          type: 'CELL_EDIT',
          value: {
            rowIndex: rowIndex,
            columnIndex: columnIndex,
            value: value
          }
        });
        setChanged(true);
      },
      rowGenerate: function rowGenerate(_ref7) {
        var rowIndex = _ref7.rowIndex;
        return (0, _datatable.rowGenerate)({
          rows: targetRows,
          columnNames: columnNames,
          rowIndex: rowIndex
        });
      },
      targetFileSave: function targetFileSave() {
        if (parser && parser.tableToTsvString) {
          // combine header rows and data rows
          var table = [];
          table.push(columnNames);

          for (var i = 0; i < targetRows.length; i++) {
            table.push(targetRows[i]);
          }

          var _parser$tableToTsvStr = parser.tableToTsvString(table),
              _data2 = _parser$tableToTsvStr.data,
              errors = _parser$tableToTsvStr.errors;

          if (errors.length !== 0) {
            throw JSON.stringify(errors, null, 4);
          }

          return _data2;
        } else {
          return (0, _datatable.stringify)({
            columnNames: columnNames,
            rows: targetRows,
            delimiters: delimiters
          });
        }
      },
      setChanged: setChanged
    };
  }, [columnNames, delimiters, targetRows, parser]);
  var value = (0, _react.useMemo)(function () {
    return (0, _deepFreeze["default"])({
      state: {
        columnNames: columnNames,
        data: data,
        changed: changed,
        columnsFilterOptions: columnsFilterOptions
      },
      actions: actions
    });
  }, [actions, changed, columnNames, columnsFilterOptions, data]);

  var component = /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null);

  if (columnNames && Object.keys(data).length) {
    component = /*#__PURE__*/_react["default"].createElement(DataTableContext.Provider, {
      value: value
    }, children);
  }

  return component;
}

;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,