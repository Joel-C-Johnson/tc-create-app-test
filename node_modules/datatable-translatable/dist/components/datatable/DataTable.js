"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = DataTableWrapper;

var _ = require("../..");

var _muiTheme = require("./muiTheme");

var _DataTable = require("./DataTable.context");

var _helpers = require("./helpers");

var _react = _interopRequireWildcard(require("react"));

var _lodash = _interopRequireDefault(require("lodash.isequal"));

var _useDeepCompareEffect = _interopRequireDefault(require("use-deep-compare-effect"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _muiDatatables = _interopRequireDefault(require("mui-datatables"));

var _styles = require("@material-ui/core/styles");

var _markdownTranslatable = require("markdown-translatable");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var fixedHeaderOptions = {
  xAxis: false,
  yAxis: false
};
var rowsPerPageOptions = [25, 50, 100];

function DataTableWrapper(props) {
  return /*#__PURE__*/_react["default"].createElement(_markdownTranslatable.MarkdownContextProvider, null, /*#__PURE__*/_react["default"].createElement(_DataTable.DataTableContextProvider, props, /*#__PURE__*/_react["default"].createElement(DataTable, props)));
} // eslint-disable-next-line react/display-name


var DatatableMemo = /*#__PURE__*/_react["default"].memo(function (_ref) {
  var columns = _ref.columns,
      options = _ref.options,
      data = _ref.data,
      dataTableElement = _ref.dataTableElement;
  return /*#__PURE__*/_react["default"].createElement(_muiDatatables["default"], {
    ref: dataTableElement,
    columns: columns,
    options: options,
    data: data
  });
}, function (prevProps, nextProps) {
  var equal = (0, _lodash["default"])(prevProps.data, nextProps.data) && (0, _lodash["default"])(prevProps.columns, nextProps.columns) && (0, _lodash["default"])(prevProps.options, nextProps.options);
  return equal;
});

function DataTable(_ref2) {
  var _ref2$options = _ref2.options,
      options = _ref2$options === void 0 ? {} : _ref2$options,
      delimiters = _ref2.delimiters,
      config = _ref2.config,
      onSave = _ref2.onSave,
      onEdit = _ref2.onEdit,
      onValidate = _ref2.onValidate,
      onContentIsDirty = _ref2.onContentIsDirty,
      sourceFile = _ref2.sourceFile,
      _generateRowId = _ref2.generateRowId,
      props = _objectWithoutProperties(_ref2, ["options", "delimiters", "config", "onSave", "onEdit", "onValidate", "onContentIsDirty", "sourceFile", "generateRowId"]);

  var columnsFilter = config.columnsFilter,
      columnsShowDefault = config.columnsShowDefault,
      rowHeader = config.rowHeader;
  var dataTableElement = (0, _react.useRef)();

  var _useState = (0, _react.useState)(options.rowsPerPage || 25),
      _useState2 = _slicedToArray(_useState, 2),
      rowsPerPage = _useState2[0],
      setRowsPerPage = _useState2[1];

  var _useState3 = (0, _react.useState)(true),
      _useState4 = _slicedToArray(_useState3, 2),
      preview = _useState4[0],
      setPreview = _useState4[1];

  var _useState5 = (0, _react.useState)(columnsShowDefault),
      _useState6 = _slicedToArray(_useState5, 2),
      columnsShow = _useState6[0],
      setColumnsShow = _useState6[1];

  var _useState7 = (0, _react.useState)(false),
      _useState8 = _slicedToArray(_useState7, 2),
      isAutoSaveChanged = _useState8[0],
      setIsAutoSaveChanged = _useState8[1];

  var _useContext = (0, _react.useContext)(_DataTable.DataTableContext),
      state = _useContext.state,
      actions = _useContext.actions;

  var columnNames = state.columnNames,
      data = state.data,
      columnsFilterOptions = state.columnsFilterOptions;
  var _cellEdit = actions.cellEdit;

  var _ref3 = (0, _react.useContext)(_markdownTranslatable.MarkdownContext) || {},
      markdownState = _ref3.state,
      markdownActions = _ref3.actions;

  var generateRowId = (0, _react.useCallback)(_generateRowId, []);
  var cellEdit = (0, _react.useCallback)(function (parms) {
    _cellEdit(parms);

    setIsAutoSaveChanged(true);
  }, [_cellEdit, setIsAutoSaveChanged]);
  var changePage = (0, _react.useCallback)(function (page) {
    dataTableElement.current.changePage(page);
  }, [dataTableElement]);
  (0, _useDeepCompareEffect["default"])(function () {
    changePage(0);
  }, [changePage]); // Push "isChanged," so app knows when SAVE button is enabled.
  // See also Translatable in markdown-translatable.

  (0, _react.useEffect)(function () {
    if (onContentIsDirty) {
      onContentIsDirty(markdownState.isChanged);
    }
  }, [markdownState.isChanged, onContentIsDirty]);
  var togglePreview = (0, _react.useCallback)(function () {
    return setPreview(!preview);
  }, [preview]); // _onSave is called by Toolbar; cellEdit is called by DataTable.
  // State (contents) are different at these two times. (cellEdit lags)

  var _onSave = (0, _react.useCallback)(function () {
    var savedFile = actions.targetFileSave();
    onSave(savedFile);

    if (markdownActions && markdownActions.setIsChanged) {
      markdownActions.setIsChanged(false);
    }
  }, [actions, onSave, markdownActions]);

  (0, _useDeepCompareEffect["default"])(function () {
    console.log("useDeepEffect for isAutoSaveChanged");

    if (onEdit && isAutoSaveChanged) {
      var savedFile = actions.targetFileSave();
      onEdit(savedFile);
      setIsAutoSaveChanged(false); // if (markdownActions && markdownActions.setIsAutoSaveChanged) {
      //   markdownActions.setIsAutoSaveChanged(false);
      // }
    }
  }, [isAutoSaveChanged, onEdit, markdownActions, actions]);
  var onColumnViewChange = (0, _react.useCallback)(function (changedColumn, action) {
    var _columnsShow = _toConsumableArray(columnsShow);

    if (action === 'add') {
      _columnsShow.push(changedColumn);
    } else if (action === 'remove') {
      _columnsShow = _columnsShow.filter(function (col) {
        return col !== changedColumn;
      });
    }

    setColumnsShow(_columnsShow);
  }, [columnsShow]);
  var scrollToTop = (0, _react.useCallback)(function () {
    window.scrollTo(0, 0); // if (dataTableElement && dataTableElement.current) {
    //   window.scrollTo(0, dataTableElement.current.tableRef.offsetParent.offsetTop);
    // }
  }, []);
  var onChangeRowsPerPage = (0, _react.useCallback)(function () {
    return function (rows) {
      setRowsPerPage(rows);
      scrollToTop();
    };
  }, [scrollToTop]);

  var _onValidate = (0, _react.useCallback)(function () {
    // Note 1: the content on-screen, in-memory does NOT include
    // the headers. Since this component has no awareness of 
    // specific resource requirements, the header must be added
    // as first row by the app itself.
    // Note 2: the content on-screen, in-memory contains both
    // source and target data. The target data must be teased
    // out. A new array of rows (target rows) will be created 
    // and this is the data that will be passed to the validation
    // closure passed to this component.
    var targetRows = [];

    if (state && state.data) {
      var rows = state.data;

      for (var i = 0; i < rows.length; i++) {
        var row = rows[i];
        var targetRow = []; // now each cell has both source and target values, delimited by tab

        for (var j = 0; j < row.length; j++) {
          var values = row[j].split("\t");
          var targetValue = values[1];
          targetValue = targetValue.replaceAll('\\[', '[').replaceAll('\\]', ']');
          targetRow.push(targetValue);
        }

        targetRows.push(targetRow);
      }
    }

    onValidate && onValidate(targetRows);
  }, [onValidate, state]);

  var customToolbar = (0, _react.useCallback)(function () {
    return /*#__PURE__*/_react["default"].createElement(_.Toolbar, {
      preview: preview,
      onPreview: togglePreview,
      changed: markdownState.isChanged,
      onSave: _onSave,
      onValidate: onValidate ? _onValidate : undefined
    });
  }, [_onSave, markdownState.isChanged, preview, togglePreview, _onValidate, onValidate]);

  var _options = (0, _react.useMemo)(function () {
    return _objectSpread({
      responsive: 'scrollFullHeight',
      fixedHeaderOptions: fixedHeaderOptions,
      resizableColumns: false,
      selectableRows: 'none',
      rowHover: false,
      rowsPerPage: rowsPerPage,
      rowsPerPageOptions: rowsPerPageOptions,
      onChangeRowsPerPage: onChangeRowsPerPage,
      onColumnViewChange: onColumnViewChange,
      onChangePage: scrollToTop,
      download: false,
      print: false,
      customToolbar: customToolbar
    }, options);
  }, [customToolbar, onChangeRowsPerPage, onColumnViewChange, options, rowsPerPage, scrollToTop]);

  var _data = (0, _react.useMemo)(function () {
    return (0, _helpers.getData)({
      data: data,
      columnNames: columnNames,
      rowHeader: rowHeader
    });
  }, [columnNames, data, rowHeader]);

  var columns = (0, _react.useMemo)(function () {
    return (0, _helpers.getColumns)({
      columnNames: columnNames,
      columnsFilter: columnsFilter,
      columnsFilterOptions: columnsFilterOptions,
      columnsShow: columnsShow,
      delimiters: delimiters,
      rowHeader: rowHeader,
      generateRowId: generateRowId,
      cellEdit: cellEdit,
      preview: preview
    });
  }, [cellEdit, columnNames, columnsFilter, columnsFilterOptions, columnsShow, delimiters, generateRowId, preview, rowHeader]);
  return /*#__PURE__*/_react["default"].createElement(_styles.MuiThemeProvider, {
    theme: _muiTheme.getMuiTheme
  }, /*#__PURE__*/_react["default"].createElement(DatatableMemo, _extends({
    dataTableElement: dataTableElement,
    columns: columns,
    data: _data,
    options: _options
  }, props)));
}

DataTable.propTypes = {
  /** Original DataTable raw string or file contents */
  sourceFile: _propTypes["default"].string.isRequired,

  /** Translated DataTable raw string or file contents */
  targetFile: _propTypes["default"].string.isRequired,

  /** The callback to save the edited targetFile */
  onSave: _propTypes["default"].func.isRequired,

  /** The callback to validate the edited targetFile */
  onValidate: _propTypes["default"].func,

  /** The delimiters for converting the file into rows/columns */
  delimiters: _propTypes["default"].shape({
    /** Delimiters to convert a files into rows "\n" */
    row: _propTypes["default"].string.isRequired,

    /** Delimiters to convert a row into cells "\t" */
    cell: _propTypes["default"].string.isRequired
  }).isRequired,

  /** Configuration options */
  config: _propTypes["default"].shape({
    /** Combined Column Indices to correlate original and translated rows  */
    compositeKeyIndices: _propTypes["default"].arrayOf(_propTypes["default"].number).isRequired,

    /** Filterable columns */
    columnsFilter: _propTypes["default"].arrayOf(_propTypes["default"].string).isRequired,

    /** Columns shown */
    columnsShowDefault: _propTypes["default"].arrayOf(_propTypes["default"].string).isRequired,

    /** Function to render the row header.
     * `rowHeader(rowData) => React Component`
    */
    rowHeader: _propTypes["default"].func
  }).isRequired,

  /** Options to override or pass through to MUIDataTables.
   *  https://github.com/gregnb/mui-datatables
   */
  options: _propTypes["default"].object
};
DataTable.defaultProps = {
  delimiters: {
    row: '\n',
    cell: '\t'
  }
};
/* code graveyard

  const _onValidate = useCallback(() => {
    // NOTE! the content on-screen, in-memory does NOT include
    // the headers. So the initial value of tsvRows will be the headers.
    let tsvRows = "Book\tChapter\tVerse\tID\tSupportReference\tOrigQuote\tOccurrence\tGLQuote\tOccurrenceNote\n";
    if (state && state.data) {
      let rows = state.data;
      for (let i = 0; i < rows.length; i++) {
        let _row = rows[i];
        let _tsvRow = "";
        // now each cell has both source and target values, delimited by tab
        for (let j = 0; j < _row.length; j++) {
          let values = _row[j].split("\t");
          let targetValue = values[1];
          targetValue = targetValue.replaceAll('\\[', '[').replaceAll('\\]', ']');
          _tsvRow = _tsvRow + targetValue + "\t";
        }
        // add new row and a newline at end of row
        _tsvRow = _tsvRow.trim('\t');
        // check if row has content on target side
        if ( _tsvRow === '' ) continue;
        tsvRows = tsvRows + _tsvRow + "\n";
      }
    }
    onValidate && onValidate(tsvRows);
  }, [onValidate, state]);

*/
//# sourceMappingURL=data:application/json;charset=utf-8;base64,