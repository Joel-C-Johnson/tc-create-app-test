"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getColumns = getColumns;
exports.getData = getData;

var _react = _interopRequireDefault(require("react"));

var _helpers = require("../column-filter/helpers");

var _cell = require("../cell");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function getColumns(_ref) {
  var columnNames = _ref.columnNames,
      columnsFilter = _ref.columnsFilter,
      columnsFilterOptions = _ref.columnsFilterOptions,
      columnsShow = _ref.columnsShow,
      delimiters = _ref.delimiters,
      rowHeader = _ref.rowHeader,
      generateRowId = _ref.generateRowId,
      cellEdit = _ref.cellEdit,
      preview = _ref.preview;
  var columns = columnNames.map(function (_name) {
    var name = _name === null || _name === void 0 ? void 0 : _name.trim();
    var offset = rowHeader ? 1 : 0;
    var filterOptions;

    if (columnsFilter.includes(name)) {
      filterOptions = {
        logic: function logic(value, filters) {
          return (0, _helpers.filterLogic)({
            value: value,
            filters: filters,
            delimiters: delimiters
          });
        },
        display: function display(filterList, onChange, filterIndex, column) {
          return (0, _helpers.filterDisplay)({
            filterList: filterList,
            onChange: onChange,
            column: column,
            offset: offset,
            columnsFilterOptions: columnsFilterOptions,
            filterIndex: filterIndex
          });
        }
      };
    }

    ;
    return {
      name: name,
      searchable: true,
      options: {
        display: columnsShow.includes(name),
        filter: columnsFilter.includes(name),
        filterType: columnsFilter.includes(name) ? 'custom' : undefined,
        filterOptions: filterOptions,
        customBodyRender: function customBodyRender(value, tableMeta) {
          var _tableMeta$tableState = tableMeta.tableState,
              tableState = _tableMeta$tableState === void 0 ? {} : _tableMeta$tableState;

          var _ref2 = tableState || {},
              rowsPerPage = _ref2.rowsPerPage,
              page = _ref2.page;

          var cellProps = {
            generateRowId: generateRowId,
            value: value,
            tableMeta: tableMeta,
            onEdit: cellEdit,
            delimiters: delimiters,
            rowsPerPage: rowsPerPage,
            page: page,
            preview: preview
          };
          return /*#__PURE__*/_react["default"].createElement(_cell.Cell, cellProps);
        },
        customFilterListOptions: {
          render: function render(value) {
            return "".concat(name, " - ").concat(value);
          }
        }
      }
    };
  });

  if (rowHeader) {
    var headerColumn = {
      name: 'rowHeader',
      options: {
        filter: false,
        customBodyRender: function customBodyRender(_, tableMeta) {
          var cellProps = {
            generateRowId: generateRowId,
            tableMeta: tableMeta,
            delimiters: delimiters,
            rowHeader: rowHeader
          };
          return /*#__PURE__*/_react["default"].createElement(_cell.HeaderCell, cellProps);
        }
      }
    };
    columns.unshift(headerColumn);
  }

  return columns;
}

function getData(_ref3) {
  var data = _ref3.data,
      columnNames = _ref3.columnNames,
      rowHeader = _ref3.rowHeader;

  var _data = _toConsumableArray(data);

  if (columnNames && data && rowHeader) {
    _data = data.map(function (row) {
      return ['rowHeader'].concat(_toConsumableArray(row));
    });
  }

  return _data;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2RhdGF0YWJsZS9oZWxwZXJzLmpzIl0sIm5hbWVzIjpbImdldENvbHVtbnMiLCJjb2x1bW5OYW1lcyIsImNvbHVtbnNGaWx0ZXIiLCJjb2x1bW5zRmlsdGVyT3B0aW9ucyIsImNvbHVtbnNTaG93IiwiZGVsaW1pdGVycyIsInJvd0hlYWRlciIsImdlbmVyYXRlUm93SWQiLCJjZWxsRWRpdCIsInByZXZpZXciLCJjb2x1bW5zIiwibWFwIiwiX25hbWUiLCJuYW1lIiwidHJpbSIsIm9mZnNldCIsImZpbHRlck9wdGlvbnMiLCJpbmNsdWRlcyIsImxvZ2ljIiwidmFsdWUiLCJmaWx0ZXJzIiwiZGlzcGxheSIsImZpbHRlckxpc3QiLCJvbkNoYW5nZSIsImZpbHRlckluZGV4IiwiY29sdW1uIiwic2VhcmNoYWJsZSIsIm9wdGlvbnMiLCJmaWx0ZXIiLCJmaWx0ZXJUeXBlIiwidW5kZWZpbmVkIiwiY3VzdG9tQm9keVJlbmRlciIsInRhYmxlTWV0YSIsInRhYmxlU3RhdGUiLCJyb3dzUGVyUGFnZSIsInBhZ2UiLCJjZWxsUHJvcHMiLCJvbkVkaXQiLCJjdXN0b21GaWx0ZXJMaXN0T3B0aW9ucyIsInJlbmRlciIsImhlYWRlckNvbHVtbiIsIl8iLCJ1bnNoaWZ0IiwiZ2V0RGF0YSIsImRhdGEiLCJfZGF0YSIsInJvdyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7OztBQUdPLFNBQVNBLFVBQVQsT0FJSjtBQUFBLE1BSERDLFdBR0MsUUFIREEsV0FHQztBQUFBLE1BSFlDLGFBR1osUUFIWUEsYUFHWjtBQUFBLE1BSDJCQyxvQkFHM0IsUUFIMkJBLG9CQUczQjtBQUFBLE1BRkRDLFdBRUMsUUFGREEsV0FFQztBQUFBLE1BRllDLFVBRVosUUFGWUEsVUFFWjtBQUFBLE1BRndCQyxTQUV4QixRQUZ3QkEsU0FFeEI7QUFBQSxNQUREQyxhQUNDLFFBRERBLGFBQ0M7QUFBQSxNQURj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QUFHO0FBQ25CM0IsTUFBQUEsSUFBSSxFQUFFLFdBRGE7QUFFbkJjLE1BQUFBLE9BQU8sRUFBRTtBQUNQQyxRQUFBQSxNQUFNLEVBQUUsS0FERDtBQUVQRyxRQUFBQSxnQkFBZ0IsRUFBQywwQkFBQ1UsQ0FBRCxFQUFJVCxTQUFKLEVBQWtCO0FBQ2pDLGNBQU1JLFNBQVMsR0FBRztBQUNoQjdCLFlBQUFBLGFBQWEsRUFBYkEsYUFEZ0I7QUFDRHlCLFlBQUFBLFNBQVMsRUFBVEEsU0FEQztBQUNVM0IsWUFBQUEsVUFBVSxFQUFWQSxVQURWO0FBQ3NCQyxZQUFBQSxTQUFTLEVBQVRBO0FBRHRCLFdBQWxCO0FBR0EsOEJBQU8sZ0NBQUMsZ0JBQUQsRUFBZ0I4QixTQUFoQixDQUFQO0FBQ0Q7QUFQTTtBQUZVLEtBQXJCO0FBWUExQixJQUFBQSxPQUFPLENBQUNnQyxPQUFSLENBQWdCRixZQUFoQjtBQUNEOztBQUNELFNBQU85QixPQUFQO0FBQ0Q7O0FBRU0sU0FBU2lDLE9BQVQsUUFFSjtBQUFBLE1BRERDLElBQ0MsU0FEREEsSUFDQztBQUFBLE1BREszQyxXQUNMLFNBREtBLFdBQ0w7QUFBQSxNQURrQkssU0FDbEIsU0FEa0JBLFNBQ2xCOztBQUNELE1BQUl1QyxLQUFLLHNCQUFPRCxJQUFQLENBQVQ7O0FBRUEsTUFBSTNDLFdBQVcsSUFBSTJDLElBQWYsSUFBdUJ0QyxTQUEzQixFQUFzQztBQUNwQ3VDLElBQUFBLEtBQUssR0FBR0QsSUFBSSxDQUFDakMsR0FBTCxDQUFTLFVBQUFtQyxHQUFHO0FBQUEsY0FBSyxXQUFMLDRCQUFxQkEsR0FBckI7QUFBQSxLQUFaLENBQVI7QUFDRDs7QUFDRCxTQUFPRCxLQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBmaWx0ZXJMb2dpYywgZmlsdGVyRGlzcGxheSB9IGZyb20gJy4uL2NvbHVtbi1maWx0ZXIvaGVscGVycyc7XHJcbmltcG9ydCB7IENlbGwgLCBIZWFkZXJDZWxsIH0gZnJvbSAnLi4vY2VsbCc7XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbHVtbnMoe1xyXG4gIGNvbHVtbk5hbWVzLCBjb2x1bW5zRmlsdGVyLCBjb2x1bW5zRmlsdGVyT3B0aW9ucyxcclxuICBjb2x1bW5zU2hvdywgZGVsaW1pdGVycywgcm93SGVhZGVyLFxyXG4gIGdlbmVyYXRlUm93SWQsIGNlbGxFZGl0LCBwcmV2aWV3LFxyXG59KSB7XHJcbiAgbGV0IGNvbHVtbnMgPSBjb2x1bW5OYW1lcy5tYXAoKF9uYW1lKSA9PiB7XHJcbiAgICBjb25zdCBuYW1lID0gX25hbWU/LnRyaW0oKTtcclxuXHJcbiAgICBjb25zdCBvZmZzZXQgPSByb3dIZWFkZXIgPyAxIDogMDtcclxuICAgIGxldCBmaWx0ZXJPcHRpb25zO1xyXG5cclxuICAgIGlmIChjb2x1bW5zRmlsdGVyLmluY2x1ZGVzKG5hbWUpKSB7XHJcbiAgICAgIGZpbHRlck9wdGlvbnMgPSB7XHJcbiAgICAgICAgbG9naWM6ICh2YWx1ZSwgZmlsdGVycykgPT4gZmlsdGVyTG9naWMoe1xyXG4gICAgICAgICAgdmFsdWUsIGZpbHRlcnMsIGRlbGltaXRlcnMsXHJcbiAgICAgICAgfSksXHJcbiAgICAgICAgZGlzcGxheTogKGZpbHRlckxpc3QsIG9uQ2hhbmdlLCBmaWx0ZXJJbmRleCwgY29sdW1uKSA9PiAoXHJcbiAgICAgICAgICBmaWx0ZXJEaXNwbGF5KHtcclxuICAgICAgICAgICAgZmlsdGVyTGlzdCwgb25DaGFuZ2UsIGNvbHVtbiwgb2Zmc2V0LCBjb2x1bW5zRmlsdGVyT3B0aW9ucywgZmlsdGVySW5kZXgsXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICksXHJcbiAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbmFtZSxcclxuICAgICAgc2VhcmNoYWJsZTogdHJ1ZSxcclxuICAgICAgb3B0aW9uczoge1xyXG4gICAgICAgIGRpc3BsYXk6IGNvbHVtbnNTaG93LmluY2x1ZGVzKG5hbWUpLFxyXG4gICAgICAgIGZpbHRlcjogY29sdW1uc0ZpbHRlci5pbmNsdWRlcyhuYW1lKSxcclxuICAgICAgICBmaWx0ZXJUeXBlOiBjb2x1bW5zRmlsdGVyLmluY2x1ZGVzKG5hbWUpID8gJ2N1c3RvbScgOiB1bmRlZmluZWQsXHJcbiAgICAgICAgZmlsdGVyT3B0aW9ucyxcclxuICAgICAgICBjdXN0b21Cb2R5UmVuZGVyOih2YWx1ZSwgdGFibGVNZXRhKSA9PiB7XHJcbiAgICAgICAgICBjb25zdCB7IHRhYmxlU3RhdGUgPSB7fSB9ID0gdGFibGVNZXRhO1xyXG4gICAgICAgICAgY29uc3QgeyByb3dzUGVyUGFnZSwgcGFnZSB9ID0gdGFibGVTdGF0ZSB8fCB7fTtcclxuICAgICAgICAgIGNvbnN0IGNlbGxQcm9wcyA9IHtcclxuICAgICAgICAgICAgZ2VuZXJhdGVSb3dJZCwgdmFsdWUsIHRhYmxlTWV0YSwgb25FZGl0OiBjZWxsRWRpdCwgZGVsaW1pdGVycywgcm93c1BlclBhZ2UsIHBhZ2UsIHByZXZpZXcsXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgICAgcmV0dXJuIDxDZWxsIHsuLi5jZWxsUHJvcHN9IC8+O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY3VzdG9tRmlsdGVyTGlzdE9wdGlvbnM6IHsgcmVuZGVyOiAodmFsdWUpID0+IChgJHtuYW1lfSAtICR7dmFsdWV9YCkgfSxcclxuICAgICAgfSxcclxuICAgIH07XHJcbiAgfSk7XHJcblxyXG4gIGlmIChyb3dIZWFkZXIpIHtcclxuICAgIGNvbnN0IGhlYWRlckNvbHVtbiA9IHtcclxuICAgICAgbmFtZTogJ3Jvd0hlYWRlcicsXHJcbiAgICAgIG9wdGlvbnM6IHtcclxuICAgICAgICBmaWx0ZXI6IGZhbHNlLFxyXG4gICAgICAgIGN1c3RvbUJvZHlSZW5kZXI6KF8sIHRhYmxlTWV0YSkgPT4ge1xyXG4gICAgICAgICAgY29uc3QgY2VsbFByb3BzID0ge1xyXG4gICAgICAgICAgICBnZW5lcmF0ZVJvd0lkLCB0YWJsZU1ldGEsIGRlbGltaXRlcnMsIHJvd0hlYWRlcixcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICByZXR1cm4gPEhlYWRlckNlbGwgey4uLmNlbGxQcm9wc30gLz47XHJcbiAgICAgICAgfSxcclxuICAgICAgfSxcclxuICAgIH07XHJcbiAgICBjb2x1bW5zLnVuc2hpZnQoaGVhZGVyQ29sdW1uKTtcclxuICB9XHJcbiAgcmV0dXJuIGNvbHVtbnM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXREYXRhKHtcclxuICBkYXRhLCBjb2x1bW5OYW1lcywgcm93SGVhZGVyLFxyXG59KSB7XHJcbiAgbGV0IF9kYXRhID0gWy4uLmRhdGFdO1xyXG5cclxuICBpZiAoY29sdW1uTmFtZXMgJiYgZGF0YSAmJiByb3dIZWFkZXIpIHtcclxuICAgIF9kYXRhID0gZGF0YS5tYXAocm93ID0+IFsncm93SGVhZGVyJywgLi4ucm93XSk7XHJcbiAgfVxyXG4gIHJldHVybiBfZGF0YTtcclxufSJdfQ==