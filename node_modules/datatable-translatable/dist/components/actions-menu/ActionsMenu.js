"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styles = require("@material-ui/core/styles");

var _core = require("@material-ui/core");

var _lodash = _interopRequireDefault(require("lodash.isequal"));

var _icons = require("@material-ui/icons");

var _DataTable = require("../datatable/DataTable.context");

var _localStrings = require("../../core/localStrings");

var _AddRow = _interopRequireDefault(require("./AddRow"));

var _DeleteRow = _interopRequireDefault(require("./DeleteRow"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function RowMenu(_ref) {
  var rowIndex = _ref.rowIndex,
      rowData = _ref.rowData,
      delimiters = _ref.delimiters,
      generateRowId = _ref.generateRowId;
  var classes = useStyles();

  var _useContext = (0, _react.useContext)(_DataTable.DataTableContext),
      state = _useContext.state,
      actions = _useContext.actions;

  var columnNames = state.columnNames;
  var rowGenerate = actions.rowGenerate,
      rowAddBelow = actions.rowAddBelow,
      rowDelete = actions.rowDelete,
      rowMoveAbove = actions.rowMoveAbove,
      rowMoveBelow = actions.rowMoveBelow;

  var handleMoveAbove = function handleMoveAbove() {
    return rowMoveAbove({
      rowIndex: rowIndex
    });
  };

  var handleMoveBelow = function handleMoveBelow() {
    return rowMoveBelow({
      rowIndex: rowIndex
    });
  };

  var disableMoveAbove = rowIndex === 0; // rowData is the combined array of source and target
  // if target rows have been deleted, then source will contain more
  // rows that the target. For deleted rows, the combined array will 
  // have for each cell just the source data ending in a tab character.
  // Normally the target value for each cell follows the tab character.
  // If that target value is missing, then we are on a deleted row 
  // and we cannot add a row at this location.
  // From the console log, here is a sample:
  // 0: "rowHeader"
  // 1: "JUD\t"
  // 2: "1\t"
  // 3: "2\t"
  // 4: "q2qo\t"
  // 5: "figs-metaphor\t"
  // 6: "ὑμῖν…πληθυνθείη\t"
  // 7: "1\t"
  // 8: "May…be multiplied to you\t"
  // 9: "These ideas are spoken of as if ...
  // Note that there is the constant value "rowHeader" in slot zero.
  // Let's test by splitting index 1; in the sample above there should
  // be two elements, both being the string "JUD" if the row is not
  // deleted.
  // If a row is deleted (as opposed to being a new add/insert), then
  // source side will *not* be empty, but the target side will be empty.

  var cellvals = [];
  cellvals = rowData[1].split('\t'); // is this a deleted row?

  if (cellvals[0] !== "" && cellvals[1] === "") {
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null);
  }

  var addRowButton = /*#__PURE__*/_react["default"].createElement(_core.Tooltip, {
    title: (0, _localStrings.localString)('AddRow'),
    arrow: true
  }, /*#__PURE__*/_react["default"].createElement(_core.IconButton, {
    className: classes.button
  }, /*#__PURE__*/_react["default"].createElement(_icons.AddCircleOutline, null)));

  var deleteRowButton = /*#__PURE__*/_react["default"].createElement(_core.Tooltip, {
    title: (0, _localStrings.localString)('DeleteRow'),
    arrow: true
  }, /*#__PURE__*/_react["default"].createElement(_core.IconButton, {
    className: classes.button
  }, /*#__PURE__*/_react["default"].createElement(_icons.RemoveCircleOutline, null)));

  return /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.root
  }, /*#__PURE__*/_react["default"].createElement(_core.Tooltip, {
    title: (0, _localStrings.localString)('MoveRowUp'),
    arrow: true
  }, /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(_core.IconButton, {
    className: classes.flipY,
    disabled: disableMoveAbove,
    onClick: handleMoveAbove
  }, /*#__PURE__*/_react["default"].createElement(_icons.ArrowDropDownCircleOutlined, null)))), /*#__PURE__*/_react["default"].createElement(_AddRow["default"], {
    rowData: rowData,
    rowIndex: rowIndex,
    columnNames: columnNames,
    rowGenerate: rowGenerate,
    rowAddBelow: rowAddBelow,
    button: addRowButton,
    generateRowId: generateRowId
  }), /*#__PURE__*/_react["default"].createElement(_DeleteRow["default"], {
    rowData: rowData,
    rowIndex: rowIndex,
    columnNames: columnNames,
    rowDelete: rowDelete,
    delimiters: delimiters,
    button: deleteRowButton,
    generateRowId: generateRowId
  }), /*#__PURE__*/_react["default"].createElement(_core.Tooltip, {
    title: (0, _localStrings.localString)('MoveRowDown'),
    arrow: true
  }, /*#__PURE__*/_react["default"].createElement(_core.IconButton, {
    className: classes.button,
    onClick: handleMoveBelow
  }, /*#__PURE__*/_react["default"].createElement(_icons.ArrowDropDownCircleOutlined, null))));
}

var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    root: {
      display: 'flex',
      justifyContent: 'flex-end'
    },
    flipY: {
      transform: 'scaleY(-1)',
      padding: '8px'
    },
    button: {
      padding: '8px'
    }
  };
});

var _default = /*#__PURE__*/_react["default"].memo(RowMenu, function (prevProps, nextProps) {
  return prevProps.rowIndex === nextProps.rowIndex && (0, _lodash["default"])(prevProps.rowData, nextProps.rowData) && (0, _lodash["default"])(prevProps.delimiters, nextProps.delimiters);
});

exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,