"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _core = require("@material-ui/core");

var _lodash = _interopRequireDefault(require("lodash.isequal"));

var _markdownTranslatable = require("markdown-translatable");

var _styles = _interopRequireDefault(require("./styles"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

// file to memory
var inputFilters = [[/<br>/gi, '\n'], [/^\u200B/, ''], [/\u200B$/, ''], ['\\n\\n> ', '\n\n> ']]; // screen to memory and thus to file

var outputFilters = [[/^\u200B/, ''], [/\u200B$/, ''], [/<br>/gi, '\n'], ['\n\n> ', '\\n\\n> ']];

function BlockEditableWrapper(_ref) {
  var columnData = _ref.columnData,
      original = _ref.original,
      translation = _ref.translation,
      rowIndex = _ref.rowIndex,
      columnIndex = _ref.columnIndex,
      preview = _ref.preview,
      handleEdit = _ref.handleEdit;
  var classes = (0, _styles["default"])();

  var subheading = /*#__PURE__*/_react["default"].createElement(_core.Typography, {
    className: classes.subheading,
    variant: "subtitle2",
    align: "left",
    color: "textSecondary"
  }, columnData.name);

  var originalValue = original || '*empty*';
  var translationValue = translation || '';
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.row
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.original
  }, /*#__PURE__*/_react["default"].createElement(_core.Grid, {
    container: true,
    spacing: 2
  }, subheading.props.children !== "OccurrenceNote" ? /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_core.Grid, {
    item: true,
    xs: 4,
    style: {
      padding: '15px 0px 0px 0px'
    }
  }, subheading), /*#__PURE__*/_react["default"].createElement(_core.Grid, {
    item: true,
    xs: 6,
    style: {
      marginTop: '-15px',
      marginLeft: '2px',
      padding: '20px 10px 0px 28px'
    }
  }, /*#__PURE__*/_react["default"].createElement(_markdownTranslatable.BlockEditable, {
    key: "".concat(rowIndex, "-").concat(columnIndex, "-original"),
    preview: preview,
    markdown: originalValue,
    editable: false,
    inputFilters: inputFilters,
    outputFilters: outputFilters
  }))) : ''), /*#__PURE__*/_react["default"].createElement(_core.Grid, {
    container: true,
    spacing: 2
  }, subheading.props.children == "OccurrenceNote" ? /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_core.Grid, {
    item: true,
    xs: 4,
    style: {
      padding: '15px 0px 0px 0px',
      marginTop: '6px'
    }
  }, subheading), /*#__PURE__*/_react["default"].createElement(_markdownTranslatable.BlockEditable, {
    key: "".concat(rowIndex, "-").concat(columnIndex, "-original"),
    preview: preview,
    markdown: originalValue,
    editable: false,
    inputFilters: inputFilters,
    outputFilters: outputFilters
  })) : '')), /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.translation
  }, /*#__PURE__*/_react["default"].createElement(_core.Grid, {
    container: true,
    spacing: 2
  }, subheading.props.children !== "OccurrenceNote" ? /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_core.Grid, {
    item: true,
    xs: 4,
    style: {
      padding: '15px 0px 0px 0px'
    }
  }, subheading), /*#__PURE__*/_react["default"].createElement(_core.Grid, {
    item: true,
    xs: 6,
    style: {
      marginTop: '-15px',
      marginLeft: '2px',
      padding: '20px 10px 0px 28px'
    }
  }, /*#__PURE__*/_react["default"].createElement(_markdownTranslatable.BlockEditable, {
    key: "".concat(rowIndex, "-").concat(columnIndex, "-target"),
    debounce: 1000,
    preview: preview,
    markdown: translationValue,
    editable: true,
    inputFilters: inputFilters,
    outputFilters: outputFilters,
    onEdit: handleEdit
  }))) : ''), /*#__PURE__*/_react["default"].createElement(_core.Grid, {
    container: true,
    spacing: 2
  }, subheading.props.children == "OccurrenceNote" ? /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_core.Grid, {
    item: true,
    xs: 4,
    style: {
      padding: '15px 0px 0px 0px',
      marginTop: '6px'
    }
  }, subheading), /*#__PURE__*/_react["default"].createElement(_markdownTranslatable.BlockEditable, {
    key: "".concat(rowIndex, "-").concat(columnIndex, "-target"),
    debounce: 1000,
    preview: preview,
    markdown: translationValue,
    editable: true,
    inputFilters: inputFilters,
    outputFilters: outputFilters,
    onEdit: handleEdit
  })) : '')));
}

function Cell(props) {
  var value = props.value,
      _props$tableMeta = props.tableMeta,
      columnData = _props$tableMeta.columnData,
      columnIndex = _props$tableMeta.columnIndex,
      rowIndex = _props$tableMeta.rowIndex,
      preview = props.preview,
      onEdit = props.onEdit,
      delimiters = props.delimiters;
  var classes = (0, _styles["default"])();

  var _value$split = value.split(delimiters.cell),
      _value$split2 = _slicedToArray(_value$split, 2),
      original = _value$split2[0],
      translation = _value$split2[1];

  function handleEdit(markdown) {
    onEdit({
      rowIndex: rowIndex,
      columnIndex: columnIndex - 1,
      value: markdown
    });
  }

  ;
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: "cell-".concat(rowIndex, "-").concat(columnIndex, " ") + classes.root
  }, /*#__PURE__*/_react["default"].createElement(BlockEditableWrapper, {
    columnData: columnData,
    original: original,
    translation: translation,
    rowIndex: rowIndex,
    columnIndex: columnIndex,
    preview: preview,
    handleEdit: handleEdit
  }));
}

;
Cell.propTypes = {
  /** Value of the cell */
  value: _propTypes["default"].string.isRequired,

  /** The tableMeta passed from MUIDataTables */
  tableMeta: _propTypes["default"].object.isRequired,

  /** The function to render the rowHeader */
  rowHeader: _propTypes["default"].func,

  /** Set html preview mode, false renders raw markdown */
  preview: _propTypes["default"].bool,

  /** The delimiters for converting the file into rows/columns */
  delimiters: _propTypes["default"].shape({
    /** Delimiters to convert a files into rows "\n" */
    row: _propTypes["default"].string.isRequired,

    /** Delimiters to convert a row into cells "\t" */
    cell: _propTypes["default"].string.isRequired
  }).isRequired,

  /** Handle database updates */
  onEdit: _propTypes["default"].func.isRequired
};
Cell.defaultProps = {
  delimiters: {
    row: '\n',
    cell: '\t'
  }
};

var shouldReRender = function shouldReRender(prevProps, nextProps) {
  return (0, _lodash["default"])(prevProps.tableMeta, nextProps.tableMeta) && (0, _lodash["default"])(prevProps.preview, nextProps.preview) && (0, _lodash["default"])(prevProps.value, nextProps.value) && (0, _lodash["default"])(prevProps.page, nextProps.page);
};

var _default = /*#__PURE__*/(0, _react.memo)(Cell, shouldReRender);

exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,