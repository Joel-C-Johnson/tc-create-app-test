"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.markdownToHtml = exports.htmlToMarkdown = exports.fromDisplay = exports.toDisplay = void 0;

var _turndown = _interopRequireDefault(require("turndown"));

var _turndownPluginGfm = require("turndown-plugin-gfm");

var _showdown = _interopRequireDefault(require("showdown"));

var _string = require("./string");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var turndownService = new _turndown.default({
  headingStyle: 'atx'
});
turndownService.use(_turndownPluginGfm.gfm);
turndownService.addRule('strikethrough', {
  filter: ['del', 's', 'strike'],
  replacement: function replacement(content) {
    return "~".concat(content, "~");
  }
});
turndownService.addRule('underline', {
  filter: ['u'],
  replacement: function replacement(content) {
    return "<u>".concat(content, "</u>");
  }
}); // bold-italic <strong><em>...</em></strong>
// See below: emphasis rule allows bold-italic to pass through as _content_.

turndownService.addRule('bold-italic', {
  filter: function filter(node, options) {
    return node.nodeName === 'STRONG' && node.childNodes && node.childNodes.length == 1 && node.childNodes[0].nodeName === 'EM';
  },
  replacement: function replacement(content) {
    return "**".concat(content, "**");
  }
}); // <em> node NOT under a <strong> node.
// Will allow the embedded <em>content</em> to pass through as _content_

turndownService.addRule('emphasis', {
  //filter: ['em'],filter: (node, options) => {
  filter: function filter(node, options) {
    return node.nodeName === 'EM' && node.parentNode && node.parentNode.nodeName != 'STRONG';
  },
  replacement: function replacement(content) {
    return "*".concat(content, "*");
  }
});
var markdownToHtmlConverter = new _showdown.default.Converter({
  openLinksInNewWindow: true
});

var toDisplay = function toDisplay(content) {
  return content.replace(/&/g, '&amp;').replace(/<br\\?>/g, '\n').replace(/</g, '&lt;').replace(/>/g, '&gt;');
};

exports.toDisplay = toDisplay;

var fromDisplay = function fromDisplay(content) {
  return content.replace(/&nbsp;/, ' ').replace(/<br><div>/g, '<div>').replace(/<div>([\s\S]*)<\/div>/g, '\n$1').replace(/<br\\?>/g, '\n').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&');
};

exports.fromDisplay = fromDisplay;

var htmlToMarkdown = function htmlToMarkdown(_ref) {
  var html = _ref.html,
      _ref$outputFilters = _ref.outputFilters,
      outputFilters = _ref$outputFilters === void 0 ? [] : _ref$outputFilters;
  var markdown = turndownService.turndown(html); // Fix up resource links:

  markdown = markdown.replace(/\\\[\\\[rc:/g, '[[rc:');
  markdown = markdown.replace(/\\\]\\\]/g, ']]');
  markdown = markdown.replace(/\[\]\(rc:\/\/([^)]*)\)/g, '[[rc://$1]]'); // Asterisk inside of RC link:

  markdown = markdown.replace(/(\[\[.*)(\\\*)(.*\]\])/g, '$1*$3');
  markdown = (0, _string.filter)({
    string: markdown,
    filters: outputFilters
  }); // Strip NBSP from beginning or end.
  // See below (markdownToHtml) where this NBSP is added to empty blocks.

  while (markdown.match(/^\u200B/)) {
    markdown = markdown.replace(/\u200B/, '');
  }

  while (markdown.match(/\u200B$/)) {
    markdown = markdown.replace(/\u200B$/, '');
  } // Replace double space.


  markdown = markdown.replace(/(\d+)\. {2,}/g, '$1. ');
  return markdown;
};

exports.htmlToMarkdown = htmlToMarkdown;

var markdownToHtml = function markdownToHtml(_ref2) {
  var markdown = _ref2.markdown,
      _ref2$inputFilters = _ref2.inputFilters,
      inputFilters = _ref2$inputFilters === void 0 ? [] : _ref2$inputFilters;

  var _markdown = (markdown || '').slice(0); // Make "easy" blockquote:


  _markdown = _markdown.replace(/\n\>/g, '  \n\>');
  _markdown = _markdown.replace(/\<br\>\>/g, '  \<br\>\>'); // Prevent "    *" from being considered as <pre><code>....

  _markdown = _markdown.replace(/^\ \ \ \ \*/mg, '*');
  _markdown = (0, _string.filter)({
    string: _markdown,
    filters: inputFilters
  });
  var html = markdownToHtmlConverter.makeHtml(_markdown);
  html = html.replace(/<br\s.\\?>/ig, '<br/>'); // Insert NBSP into empty blocks.
  // See above (htmlToMarkdown) where this NBSP is later stripped out.

  if (!html || html === '') {
    html = '<p>&#8203;</p>';
  }

  return html;
};

exports.markdownToHtml = markdownToHtml;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,