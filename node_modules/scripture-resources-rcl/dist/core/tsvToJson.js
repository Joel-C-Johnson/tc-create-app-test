"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = tsvToJson;

function cov_246l1k7x4s() {
  var path = "D:\\Projects-unfoldingWord\\scripture-resources-rcl\\src\\core\\tsvToJson.js";
  var hash = "2a9ad785404d2f4e7de37eb42188fb01c6b8300a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\Projects-unfoldingWord\\scripture-resources-rcl\\src\\core\\tsvToJson.js",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 17
        },
        end: {
          line: 3,
          column: 19
        }
      },
      "1": {
        start: {
          line: 5,
          column: 2
        },
        end: {
          line: 19,
          column: 3
        }
      },
      "2": {
        start: {
          line: 6,
          column: 18
        },
        end: {
          line: 6,
          column: 40
        }
      },
      "3": {
        start: {
          line: 7,
          column: 20
        },
        end: {
          line: 7,
          column: 40
        }
      },
      "4": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 18,
          column: 5
        }
      },
      "5": {
        start: {
          line: 9,
          column: 17
        },
        end: {
          line: 9,
          column: 18
        }
      },
      "6": {
        start: {
          line: 10,
          column: 18
        },
        end: {
          line: 10,
          column: 20
        }
      },
      "7": {
        start: {
          line: 11,
          column: 26
        },
        end: {
          line: 11,
          column: 46
        }
      },
      "8": {
        start: {
          line: 13,
          column: 6
        },
        end: {
          line: 15,
          column: 7
        }
      },
      "9": {
        start: {
          line: 13,
          column: 19
        },
        end: {
          line: 13,
          column: 20
        }
      },
      "10": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 41
        }
      },
      "11": {
        start: {
          line: 17,
          column: 6
        },
        end: {
          line: 17,
          column: 23
        }
      },
      "12": {
        start: {
          line: 21,
          column: 2
        },
        end: {
          line: 21,
          column: 16
        }
      }
    },
    fnMap: {
      "0": {
        name: "tsvToJson",
        decl: {
          start: {
            line: 2,
            column: 24
          },
          end: {
            line: 2,
            column: 33
          }
        },
        loc: {
          start: {
            line: 2,
            column: 38
          },
          end: {
            line: 22,
            column: 1
          }
        },
        line: 2
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 5,
            column: 2
          },
          end: {
            line: 19,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 2
          },
          end: {
            line: 19,
            column: 3
          }
        }, {
          start: {
            line: 5,
            column: 2
          },
          end: {
            line: 19,
            column: 3
          }
        }],
        line: 5
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2a9ad785404d2f4e7de37eb42188fb01c6b8300a"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];

  cov_246l1k7x4s = function () {
    return actualCoverage;
  };

  return actualCoverage;
}

cov_246l1k7x4s();

function tsvToJson(tsv) {
  cov_246l1k7x4s().f[0]++;
  var result = (cov_246l1k7x4s().s[0]++, []);
  cov_246l1k7x4s().s[1]++;

  if (tsv) {
    cov_246l1k7x4s().b[0][0]++;
    var lines = (cov_246l1k7x4s().s[2]++, tsv.trim().split('\n'));
    var headers = (cov_246l1k7x4s().s[3]++, lines[0].split('\t'));
    cov_246l1k7x4s().s[4]++;

    for (var i = (cov_246l1k7x4s().s[5]++, 1); i < lines.length; i++) {
      var obj = (cov_246l1k7x4s().s[6]++, {});
      var currentline = (cov_246l1k7x4s().s[7]++, lines[i].split('\t'));
      cov_246l1k7x4s().s[8]++;

      for (var j = (cov_246l1k7x4s().s[9]++, 0); j < headers.length; j++) {
        cov_246l1k7x4s().s[10]++;
        obj[headers[j]] = currentline[j];
      }

      cov_246l1k7x4s().s[11]++;
      result.push(obj);
    }
  } else {
    cov_246l1k7x4s().b[0][1]++;
  }

  cov_246l1k7x4s().s[12]++;
  return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb3JlL3RzdlRvSnNvbi5qcyJdLCJuYW1lcyI6WyJ0c3ZUb0pzb24iLCJ0c3YiLCJyZXN1bHQiLCJsaW5lcyIsInRyaW0iLCJzcGxpdCIsImhlYWRlcnMiLCJpIiwibGVuZ3RoIiwib2JqIiwiY3VycmVudGxpbmUiLCJqIiwicHVzaCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDZSxTQUFTQSxTQUFULENBQW1CQyxHQUFuQixFQUF1QjtBQUFBO0FBQ3BDLE1BQU1DLE1BQU0sNkJBQUcsRUFBSCxDQUFaO0FBRG9DOztBQUdwQyxNQUFJRCxHQUFKLEVBQVM7QUFBQTtBQUNQLFFBQU1FLEtBQUssNkJBQUdGLEdBQUcsQ0FBQ0csSUFBSixHQUFXQyxLQUFYLENBQWlCLElBQWpCLENBQUgsQ0FBWDtBQUNBLFFBQU1DLE9BQU8sNkJBQUdILEtBQUssQ0FBQyxDQUFELENBQUwsQ0FBU0UsS0FBVCxDQUFlLElBQWYsQ0FBSCxDQUFiO0FBRk87O0FBSVAsU0FBSyxJQUFJRSxDQUFDLDZCQUFHLENBQUgsQ0FBVixFQUFnQkEsQ0FBQyxHQUFHSixLQUFLLENBQUNLLE1BQTFCLEVBQWtDRCxDQUFDLEVBQW5DLEVBQXVDO0FBQ3JDLFVBQU1FLEdBQUcsNkJBQUcsRUFBSCxDQUFUO0FBQ0EsVUFBTUMsV0FBVyw2QkFBR1AsS0FBSyxDQUFDSSxDQUFELENBQUwsQ0FBU0YsS0FBVCxDQUFlLElBQWYsQ0FBSCxDQUFqQjtBQUZxQzs7QUFJckMsV0FBSyxJQUFJTSxDQUFDLDZCQUFHLENBQUgsQ0FBVixFQUFnQkEsQ0FBQyxHQUFHTCxPQUFPLENBQUNFLE1BQTVCLEVBQW9DRyxDQUFDLEVBQXJDLEVBQXlDO0FBQUE7QUFDdkNGLFFBQUFBLEdBQUcsQ0FBQ0gsT0FBTyxDQUFDSyxDQUFELENBQVIsQ0FBSCxHQUFrQkQsV0FBVyxDQUFDQyxDQUFELENBQTdCO0FBQ0Q7O0FBTm9DO0FBUXJDVCxNQUFBQSxNQUFNLENBQUNVLElBQVAsQ0FBWUgsR0FBWjtBQUNEO0FBQ0YsR0FkRDtBQUFBO0FBQUE7O0FBSG9DO0FBbUJwQyxTQUFPUCxNQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHN2VG9Kc29uKHRzdil7XHJcbiAgY29uc3QgcmVzdWx0ID0gW107XHJcblxyXG4gIGlmICh0c3YpIHtcclxuICAgIGNvbnN0IGxpbmVzID0gdHN2LnRyaW0oKS5zcGxpdCgnXFxuJyk7XHJcbiAgICBjb25zdCBoZWFkZXJzID0gbGluZXNbMF0uc3BsaXQoJ1xcdCcpO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgY29uc3Qgb2JqID0ge307XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRsaW5lID0gbGluZXNbaV0uc3BsaXQoJ1xcdCcpO1xyXG5cclxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBoZWFkZXJzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgb2JqW2hlYWRlcnNbal1dID0gY3VycmVudGxpbmVbal07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJlc3VsdC5wdXNoKG9iaik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbiJdfQ==