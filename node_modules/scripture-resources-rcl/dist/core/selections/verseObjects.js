"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.occurrenceInjectVerseObjects = exports.getOccurrences = exports.getOccurrence = exports.getWordText = exports.verseObjectsToString = exports.flattenVerseObjects = void 0;

var _stringPunctuationTokenizer = _interopRequireDefault(require("string-punctuation-tokenizer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function cov_kkofcvm31() {
  var path = "D:\\Projects-unfoldingWord\\scripture-resources-rcl\\src\\core\\selections\\verseObjects.js";
  var hash = "cd5729df9efc282982ddae9d39d0cbe687b8776b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\Projects-unfoldingWord\\scripture-resources-rcl\\src\\core\\selections\\verseObjects.js",
    statementMap: {
      "0": {
        start: {
          line: 13,
          column: 35
        },
        end: {
          line: 27,
          column: 1
        }
      },
      "1": {
        start: {
          line: 14,
          column: 22
        },
        end: {
          line: 14,
          column: 39
        }
      },
      "2": {
        start: {
          line: 15,
          column: 2
        },
        end: {
          line: 25,
          column: 3
        }
      },
      "3": {
        start: {
          line: 16,
          column: 19
        },
        end: {
          line: 16,
          column: 40
        }
      },
      "4": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 24,
          column: 5
        }
      },
      "5": {
        start: {
          line: 18,
          column: 6
        },
        end: {
          line: 23,
          column: 7
        }
      },
      "6": {
        start: {
          line: 19,
          column: 22
        },
        end: {
          line: 19,
          column: 58
        }
      },
      "7": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 53
        }
      },
      "8": {
        start: {
          line: 20,
          column: 33
        },
        end: {
          line: 20,
          column: 51
        }
      },
      "9": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 26
        }
      },
      "10": {
        start: {
          line: 26,
          column: 2
        },
        end: {
          line: 26,
          column: 14
        }
      },
      "11": {
        start: {
          line: 29,
          column: 36
        },
        end: {
          line: 33,
          column: 1
        }
      },
      "12": {
        start: {
          line: 30,
          column: 32
        },
        end: {
          line: 30,
          column: 65
        }
      },
      "13": {
        start: {
          line: 31,
          column: 17
        },
        end: {
          line: 31,
          column: 85
        }
      },
      "14": {
        start: {
          line: 31,
          column: 58
        },
        end: {
          line: 31,
          column: 74
        }
      },
      "15": {
        start: {
          line: 32,
          column: 2
        },
        end: {
          line: 32,
          column: 16
        }
      },
      "16": {
        start: {
          line: 45,
          column: 27
        },
        end: {
          line: 50,
          column: 1
        }
      },
      "17": {
        start: {
          line: 46,
          column: 2
        },
        end: {
          line: 48,
          column: 3
        }
      },
      "18": {
        start: {
          line: 47,
          column: 4
        },
        end: {
          line: 47,
          column: 27
        }
      },
      "19": {
        start: {
          line: 49,
          column: 2
        },
        end: {
          line: 49,
          column: 50
        }
      },
      "20": {
        start: {
          line: 59,
          column: 29
        },
        end: {
          line: 71,
          column: 1
        }
      },
      "21": {
        start: {
          line: 60,
          column: 2
        },
        end: {
          line: 62,
          column: 3
        }
      },
      "22": {
        start: {
          line: 61,
          column: 4
        },
        end: {
          line: 61,
          column: 76
        }
      },
      "23": {
        start: {
          line: 64,
          column: 19
        },
        end: {
          line: 64,
          column: 20
        }
      },
      "24": {
        start: {
          line: 65,
          column: 2
        },
        end: {
          line: 69,
          column: 3
        }
      },
      "25": {
        start: {
          line: 66,
          column: 4
        },
        end: {
          line: 68,
          column: 7
        }
      },
      "26": {
        start: {
          line: 67,
          column: 6
        },
        end: {
          line: 67,
          column: 85
        }
      },
      "27": {
        start: {
          line: 67,
          column: 72
        },
        end: {
          line: 67,
          column: 85
        }
      },
      "28": {
        start: {
          line: 70,
          column: 2
        },
        end: {
          line: 70,
          column: 20
        }
      },
      "29": {
        start: {
          line: 79,
          column: 30
        },
        end: {
          line: 91,
          column: 1
        }
      },
      "30": {
        start: {
          line: 80,
          column: 2
        },
        end: {
          line: 82,
          column: 3
        }
      },
      "31": {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 81,
          column: 59
        }
      },
      "32": {
        start: {
          line: 84,
          column: 20
        },
        end: {
          line: 84,
          column: 21
        }
      },
      "33": {
        start: {
          line: 85,
          column: 2
        },
        end: {
          line: 89,
          column: 3
        }
      },
      "34": {
        start: {
          line: 86,
          column: 4
        },
        end: {
          line: 88,
          column: 7
        }
      },
      "35": {
        start: {
          line: 87,
          column: 6
        },
        end: {
          line: 87,
          column: 57
        }
      },
      "36": {
        start: {
          line: 87,
          column: 43
        },
        end: {
          line: 87,
          column: 57
        }
      },
      "37": {
        start: {
          line: 90,
          column: 2
        },
        end: {
          line: 90,
          column: 21
        }
      },
      "38": {
        start: {
          line: 98,
          column: 44
        },
        end: {
          line: 113,
          column: 1
        }
      },
      "39": {
        start: {
          line: 99,
          column: 22
        },
        end: {
          line: 99,
          column: 24
        }
      },
      "40": {
        start: {
          line: 100,
          column: 2
        },
        end: {
          line: 111,
          column: 3
        }
      },
      "41": {
        start: {
          line: 101,
          column: 34
        },
        end: {
          line: 101,
          column: 67
        }
      },
      "42": {
        start: {
          line: 102,
          column: 4
        },
        end: {
          line: 110,
          column: 7
        }
      },
      "43": {
        start: {
          line: 103,
          column: 25
        },
        end: {
          line: 103,
          column: 43
        }
      },
      "44": {
        start: {
          line: 104,
          column: 6
        },
        end: {
          line: 108,
          column: 7
        }
      },
      "45": {
        start: {
          line: 105,
          column: 27
        },
        end: {
          line: 105,
          column: 88
        }
      },
      "46": {
        start: {
          line: 106,
          column: 28
        },
        end: {
          line: 106,
          column: 83
        }
      },
      "47": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 67
        }
      },
      "48": {
        start: {
          line: 109,
          column: 6
        },
        end: {
          line: 109,
          column: 26
        }
      },
      "49": {
        start: {
          line: 112,
          column: 2
        },
        end: {
          line: 112,
          column: 23
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 13,
            column: 35
          },
          end: {
            line: 13,
            column: 36
          }
        },
        loc: {
          start: {
            line: 13,
            column: 64
          },
          end: {
            line: 27,
            column: 1
          }
        },
        line: 13
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 20,
            column: 22
          },
          end: {
            line: 20,
            column: 23
          }
        },
        loc: {
          start: {
            line: 20,
            column: 33
          },
          end: {
            line: 20,
            column: 51
          }
        },
        line: 20
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 29,
            column: 36
          },
          end: {
            line: 29,
            column: 37
          }
        },
        loc: {
          start: {
            line: 29,
            column: 54
          },
          end: {
            line: 33,
            column: 1
          }
        },
        line: 29
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 31,
            column: 43
          },
          end: {
            line: 31,
            column: 44
          }
        },
        loc: {
          start: {
            line: 31,
            column: 58
          },
          end: {
            line: 31,
            column: 74
          }
        },
        line: 31
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 45,
            column: 27
          },
          end: {
            line: 45,
            column: 28
          }
        },
        loc: {
          start: {
            line: 45,
            column: 43
          },
          end: {
            line: 50,
            column: 1
          }
        },
        line: 45
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 59,
            column: 29
          },
          end: {
            line: 59,
            column: 30
          }
        },
        loc: {
          start: {
            line: 59,
            column: 69
          },
          end: {
            line: 71,
            column: 1
          }
        },
        line: 59
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 66,
            column: 18
          },
          end: {
            line: 66,
            column: 19
          }
        },
        loc: {
          start: {
            line: 66,
            column: 35
          },
          end: {
            line: 68,
            column: 5
          }
        },
        line: 66
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 79,
            column: 30
          },
          end: {
            line: 79,
            column: 31
          }
        },
        loc: {
          start: {
            line: 79,
            column: 52
          },
          end: {
            line: 91,
            column: 1
          }
        },
        line: 79
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 86,
            column: 18
          },
          end: {
            line: 86,
            column: 19
          }
        },
        loc: {
          start: {
            line: 86,
            column: 26
          },
          end: {
            line: 88,
            column: 5
          }
        },
        line: 86
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 98,
            column: 44
          },
          end: {
            line: 98,
            column: 45
          }
        },
        loc: {
          start: {
            line: 98,
            column: 62
          },
          end: {
            line: 113,
            column: 1
          }
        },
        line: 98
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 102,
            column: 46
          },
          end: {
            line: 102,
            column: 47
          }
        },
        loc: {
          start: {
            line: 102,
            column: 70
          },
          end: {
            line: 110,
            column: 5
          }
        },
        line: 102
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 13,
            column: 50
          },
          end: {
            line: 13,
            column: 59
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 13,
            column: 57
          },
          end: {
            line: 13,
            column: 59
          }
        }],
        line: 13
      },
      "1": {
        loc: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        }, {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        }],
        line: 17
      },
      "2": {
        loc: {
          start: {
            line: 18,
            column: 6
          },
          end: {
            line: 23,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 18,
            column: 6
          },
          end: {
            line: 23,
            column: 7
          }
        }, {
          start: {
            line: 18,
            column: 6
          },
          end: {
            line: 23,
            column: 7
          }
        }],
        line: 18
      },
      "3": {
        loc: {
          start: {
            line: 46,
            column: 2
          },
          end: {
            line: 48,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 2
          },
          end: {
            line: 48,
            column: 3
          }
        }, {
          start: {
            line: 46,
            column: 2
          },
          end: {
            line: 48,
            column: 3
          }
        }],
        line: 46
      },
      "4": {
        loc: {
          start: {
            line: 46,
            column: 6
          },
          end: {
            line: 46,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 46,
            column: 6
          },
          end: {
            line: 46,
            column: 16
          }
        }, {
          start: {
            line: 46,
            column: 21
          },
          end: {
            line: 46,
            column: 47
          }
        }],
        line: 46
      },
      "5": {
        loc: {
          start: {
            line: 49,
            column: 9
          },
          end: {
            line: 49,
            column: 49
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 49,
            column: 22
          },
          end: {
            line: 49,
            column: 37
          }
        }, {
          start: {
            line: 49,
            column: 40
          },
          end: {
            line: 49,
            column: 49
          }
        }],
        line: 49
      },
      "6": {
        loc: {
          start: {
            line: 60,
            column: 2
          },
          end: {
            line: 62,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 2
          },
          end: {
            line: 62,
            column: 3
          }
        }, {
          start: {
            line: 60,
            column: 2
          },
          end: {
            line: 62,
            column: 3
          }
        }],
        line: 60
      },
      "7": {
        loc: {
          start: {
            line: 65,
            column: 2
          },
          end: {
            line: 69,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 2
          },
          end: {
            line: 69,
            column: 3
          }
        }, {
          start: {
            line: 65,
            column: 2
          },
          end: {
            line: 69,
            column: 3
          }
        }],
        line: 65
      },
      "8": {
        loc: {
          start: {
            line: 67,
            column: 6
          },
          end: {
            line: 67,
            column: 85
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 6
          },
          end: {
            line: 67,
            column: 85
          }
        }, {
          start: {
            line: 67,
            column: 6
          },
          end: {
            line: 67,
            column: 85
          }
        }],
        line: 67
      },
      "9": {
        loc: {
          start: {
            line: 67,
            column: 10
          },
          end: {
            line: 67,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 67,
            column: 10
          },
          end: {
            line: 67,
            column: 35
          }
        }, {
          start: {
            line: 67,
            column: 39
          },
          end: {
            line: 67,
            column: 70
          }
        }],
        line: 67
      },
      "10": {
        loc: {
          start: {
            line: 80,
            column: 2
          },
          end: {
            line: 82,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 2
          },
          end: {
            line: 82,
            column: 3
          }
        }, {
          start: {
            line: 80,
            column: 2
          },
          end: {
            line: 82,
            column: 3
          }
        }],
        line: 80
      },
      "11": {
        loc: {
          start: {
            line: 85,
            column: 2
          },
          end: {
            line: 89,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 2
          },
          end: {
            line: 89,
            column: 3
          }
        }, {
          start: {
            line: 85,
            column: 2
          },
          end: {
            line: 89,
            column: 3
          }
        }],
        line: 85
      },
      "12": {
        loc: {
          start: {
            line: 87,
            column: 6
          },
          end: {
            line: 87,
            column: 57
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 87,
            column: 6
          },
          end: {
            line: 87,
            column: 57
          }
        }, {
          start: {
            line: 87,
            column: 6
          },
          end: {
            line: 87,
            column: 57
          }
        }],
        line: 87
      },
      "13": {
        loc: {
          start: {
            line: 100,
            column: 2
          },
          end: {
            line: 111,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 2
          },
          end: {
            line: 111,
            column: 3
          }
        }, {
          start: {
            line: 100,
            column: 2
          },
          end: {
            line: 111,
            column: 3
          }
        }],
        line: 100
      },
      "14": {
        loc: {
          start: {
            line: 100,
            column: 6
          },
          end: {
            line: 100,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 100,
            column: 6
          },
          end: {
            line: 100,
            column: 18
          }
        }, {
          start: {
            line: 100,
            column: 22
          },
          end: {
            line: 100,
            column: 45
          }
        }],
        line: 100
      },
      "15": {
        loc: {
          start: {
            line: 104,
            column: 6
          },
          end: {
            line: 108,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 6
          },
          end: {
            line: 108,
            column: 7
          }
        }, {
          start: {
            line: 104,
            column: 6
          },
          end: {
            line: 108,
            column: 7
          }
        }],
        line: 104
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "cd5729df9efc282982ddae9d39d0cbe687b8776b"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];

  cov_kkofcvm31 = function () {
    return actualCoverage;
  };

  return actualCoverage;
}

cov_kkofcvm31();

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

cov_kkofcvm31().s[0]++;

/**
 * Borrowed and adapted from:
 * https://github.com/unfoldingWord/word-aligner/blob/develop/src/js/utils/verseObjects.js
 */

/**
 * @description flatten verse objects from nested format to flat array
 * @param {array} verseObjects - source array of nested verseObjects
 * @param {array} flat - output array that will be filled with flattened verseObjects
 */
var flattenVerseObjects = (verseObjects, flat = (cov_kkofcvm31().b[0][0]++, [])) => {
  cov_kkofcvm31().f[0]++;

  var _verseObjects = (cov_kkofcvm31().s[1]++, [...verseObjects]);

  cov_kkofcvm31().s[2]++;

  while (_verseObjects.length > 0) {
    var object = (cov_kkofcvm31().s[3]++, _verseObjects.shift());
    cov_kkofcvm31().s[4]++;

    if (object) {
      cov_kkofcvm31().b[1][0]++;
      cov_kkofcvm31().s[5]++;

      if (object.type === 'milestone') {
        cov_kkofcvm31().b[2][0]++;

        // get children of milestone
        var _flat = (cov_kkofcvm31().s[6]++, flattenVerseObjects(object.children));

        cov_kkofcvm31().s[7]++;

        _flat.forEach(_object => {
          cov_kkofcvm31().f[1]++;
          cov_kkofcvm31().s[8]++;
          return flat.push(_object);
        });
      } else {
        cov_kkofcvm31().b[2][1]++;
        cov_kkofcvm31().s[9]++;
        flat.push(object);
      }
    } else {
      cov_kkofcvm31().b[1][1]++;
    }
  }

  cov_kkofcvm31().s[10]++;
  return flat;
};

exports.flattenVerseObjects = flattenVerseObjects;
cov_kkofcvm31().s[11]++;

var verseObjectsToString = verseObjects => {
  cov_kkofcvm31().f[2]++;
  var flattenedVerseObjects = (cov_kkofcvm31().s[12]++, flattenVerseObjects(verseObjects));
  var string = (cov_kkofcvm31().s[13]++, flattenedVerseObjects.map(verseObject => {
    cov_kkofcvm31().f[3]++;
    cov_kkofcvm31().s[14]++;
    return verseObject.text;
  }).join(' '));
  cov_kkofcvm31().s[15]++;
  return string;
};
/**
 * Below borrowed and adapted from:
 * https://github.com/unfoldingWord/word-aligner/blob/develop/src/js/utils/verseObjects.js
 */

/**
 * get text from word type verse object or word object
 * @param {WordObject} wordObject - an object containing information about the word
 * @return {string|undefined} text from word object
 */


exports.verseObjectsToString = verseObjectsToString;
cov_kkofcvm31().s[16]++;

var getWordText = wordObject => {
  cov_kkofcvm31().f[4]++;
  cov_kkofcvm31().s[17]++;

  if ((cov_kkofcvm31().b[4][0]++, wordObject) && (cov_kkofcvm31().b[4][1]++, wordObject.type === 'word')) {
    cov_kkofcvm31().b[3][0]++;
    cov_kkofcvm31().s[18]++;
    return wordObject.text;
  } else {
    cov_kkofcvm31().b[3][1]++;
  }

  cov_kkofcvm31().s[19]++;
  return wordObject ? (cov_kkofcvm31().b[5][0]++, wordObject.word) : (cov_kkofcvm31().b[5][1]++, undefined);
};
/**
 * Gets the occurrence of a subString in words by counting up to subString index
 * @param {String|Array} words - word list or string to search
 * @param {Number} currentWordIndex - index of desired word in words
 * @param {String} subString - The sub string to search for
 * @return {Integer} - the occurrence of the word at currentWordIndex
 */


exports.getWordText = getWordText;
cov_kkofcvm31().s[20]++;

var getOccurrence = (words, currentWordIndex, subString) => {
  cov_kkofcvm31().f[5]++;
  cov_kkofcvm31().s[21]++;

  if (typeof words === 'string') {
    cov_kkofcvm31().b[6][0]++;
    cov_kkofcvm31().s[22]++;
    return _stringPunctuationTokenizer.default.occurrenceInString(words, currentWordIndex, subString);
  } else {
    cov_kkofcvm31().b[6][1]++;
  }

  var occurrence = (cov_kkofcvm31().s[23]++, 0);
  cov_kkofcvm31().s[24]++;

  if (Array.isArray(words)) {
    cov_kkofcvm31().b[7][0]++;
    cov_kkofcvm31().s[25]++;
    words.forEach((word, index) => {
      cov_kkofcvm31().f[6]++;
      cov_kkofcvm31().s[26]++;

      if ((cov_kkofcvm31().b[9][0]++, index <= currentWordIndex) && (cov_kkofcvm31().b[9][1]++, getWordText(word) === subString)) {
        cov_kkofcvm31().b[8][0]++;
        cov_kkofcvm31().s[27]++;
        occurrence++;
      } else {
        cov_kkofcvm31().b[8][1]++;
      }
    });
  } else {
    cov_kkofcvm31().b[7][1]++;
  }

  cov_kkofcvm31().s[28]++;
  return occurrence;
};
/**
 * Function that count occurrences of a substring in words
 * @param {String|Array} words - word list or string to search
 * @param {String} subString - The sub string to search for
 * @return {Integer} - the count of the occurrences
 */


exports.getOccurrence = getOccurrence;
cov_kkofcvm31().s[29]++;

var getOccurrences = (words, subString) => {
  cov_kkofcvm31().f[7]++;
  cov_kkofcvm31().s[30]++;

  if (typeof words === 'string') {
    cov_kkofcvm31().b[10][0]++;
    cov_kkofcvm31().s[31]++;
    return _stringPunctuationTokenizer.default.occurrencesInString(words, subString);
  } else {
    cov_kkofcvm31().b[10][1]++;
  }

  var occurrences = (cov_kkofcvm31().s[32]++, 0);
  cov_kkofcvm31().s[33]++;

  if (Array.isArray(words)) {
    cov_kkofcvm31().b[11][0]++;
    cov_kkofcvm31().s[34]++;
    words.forEach(word => {
      cov_kkofcvm31().f[8]++;
      cov_kkofcvm31().s[35]++;

      if (getWordText(word) === subString) {
        cov_kkofcvm31().b[12][0]++;
        cov_kkofcvm31().s[36]++;
        occurrences++;
      } else {
        cov_kkofcvm31().b[12][1]++;
      }
    });
  } else {
    cov_kkofcvm31().b[11][1]++;
  }

  cov_kkofcvm31().s[37]++;
  return occurrences;
};
/**
 * @description verseObjects with occurrences from verseObjects
 * @param {Array} verseObjects - Word list to add occurrence(s) to
 * @return {verseObjects: Array} - clone of verseObjects and word map
 */


exports.getOccurrences = getOccurrences;
cov_kkofcvm31().s[38]++;

var occurrenceInjectVerseObjects = verseObjects => {
  cov_kkofcvm31().f[9]++;

  var _verseObjects = (cov_kkofcvm31().s[39]++, []);

  cov_kkofcvm31().s[40]++;

  if ((cov_kkofcvm31().b[14][0]++, verseObjects) && (cov_kkofcvm31().b[14][1]++, verseObjects.length > 0)) {
    cov_kkofcvm31().b[13][0]++;
    var flattenedVerseObjects = (cov_kkofcvm31().s[41]++, flattenVerseObjects(verseObjects));
    cov_kkofcvm31().s[42]++;
    _verseObjects = flattenedVerseObjects.map((verseObject, index) => {
      cov_kkofcvm31().f[10]++;

      var _verseObject = (cov_kkofcvm31().s[43]++, _objectSpread({}, verseObject));

      cov_kkofcvm31().s[44]++;

      if (verseObject.type === 'word') {
        cov_kkofcvm31().b[15][0]++;
        var occurrence = (cov_kkofcvm31().s[45]++, getOccurrence(flattenedVerseObjects, index, verseObject.text));
        var occurrences = (cov_kkofcvm31().s[46]++, getOccurrences(flattenedVerseObjects, verseObject.text));
        cov_kkofcvm31().s[47]++;
        _verseObject = _objectSpread(_objectSpread({}, verseObject), {}, {
          occurrence,
          occurrences
        });
      } else {
        cov_kkofcvm31().b[15][1]++;
      }

      cov_kkofcvm31().s[48]++;
      return _verseObject;
    });
  } else {
    cov_kkofcvm31().b[13][1]++;
  }

  cov_kkofcvm31().s[49]++;
  return _verseObjects;
};

exports.occurrenceInjectVerseObjects = occurrenceInjectVerseObjects;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,