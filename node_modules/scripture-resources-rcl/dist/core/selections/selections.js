"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizeString = exports.occurrencesInString = exports.checkSelectionOccurrences = exports.occurrences = exports.getQuoteOccurrencesInVerse = exports.addSelectionToSelections = exports.removeSelectionFromSelections = exports.optimizeSelections = exports.rangesToSelections = exports.selectionArray = exports.optimizeRanges = exports.selectionsToStringSplices = exports.selectionsToRanges = exports.spliceStringOnRanges = exports.generateSelection = exports.subSelectionsFromSubquote = exports.getPrecedingText = exports.getStringFromEllipsis = exports.getCurrentOccurrenceFromPrecedingText = exports.selectionsFromQuoteAndString = exports.getPrecedingOccurrences = exports.selectionsFromQuoteAndVerseObjects = void 0;

var _deepEqual = _interopRequireDefault(require("deep-equal"));

var _lodash = _interopRequireDefault(require("lodash"));

var _stringPunctuationTokenizer = require("string-punctuation-tokenizer");

var _verseObjects = require("./verseObjects");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function cov_2mx2g0skd4() {
  var path = "D:\\Projects-unfoldingWord\\scripture-resources-rcl\\src\\core\\selections\\selections.js";
  var hash = "26616be738278d7bf3a7658b8c28de5d4c18a712";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\Projects-unfoldingWord\\scripture-resources-rcl\\src\\core\\selections\\selections.js",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 50
        },
        end: {
          line: 17,
          column: 1
        }
      },
      "1": {
        start: {
          line: 11,
          column: 19
        },
        end: {
          line: 11,
          column: 21
        }
      },
      "2": {
        start: {
          line: 12,
          column: 2
        },
        end: {
          line: 15,
          column: 3
        }
      },
      "3": {
        start: {
          line: 13,
          column: 19
        },
        end: {
          line: 13,
          column: 53
        }
      },
      "4": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 77
        }
      },
      "5": {
        start: {
          line: 16,
          column: 2
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 39
        },
        end: {
          line: 29,
          column: 1
        }
      },
      "7": {
        start: {
          line: 20,
          column: 26
        },
        end: {
          line: 20,
          column: 44
        }
      },
      "8": {
        start: {
          line: 21,
          column: 45
        },
        end: {
          line: 27,
          column: 6
        }
      },
      "9": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 25,
          column: 34
        }
      },
      "10": {
        start: {
          line: 28,
          column: 2
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "11": {
        start: {
          line: 31,
          column: 44
        },
        end: {
          line: 80,
          column: 1
        }
      },
      "12": {
        start: {
          line: 36,
          column: 15
        },
        end: {
          line: 36,
          column: 41
        }
      },
      "13": {
        start: {
          line: 38,
          column: 18
        },
        end: {
          line: 38,
          column: 55
        }
      },
      "14": {
        start: {
          line: 39,
          column: 19
        },
        end: {
          line: 39,
          column: 21
        }
      },
      "15": {
        start: {
          line: 40,
          column: 22
        },
        end: {
          line: 40,
          column: 42
        }
      },
      "16": {
        start: {
          line: 41,
          column: 2
        },
        end: {
          line: 41,
          column: 33
        }
      },
      "17": {
        start: {
          line: 43,
          column: 2
        },
        end: {
          line: 45,
          column: 3
        }
      },
      "18": {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 44,
          column: 14
        }
      },
      "19": {
        start: {
          line: 47,
          column: 2
        },
        end: {
          line: 50,
          column: 3
        }
      },
      "20": {
        start: {
          line: 48,
          column: 24
        },
        end: {
          line: 48,
          column: 58
        }
      },
      "21": {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 49,
          column: 51
        }
      },
      "22": {
        start: {
          line: 52,
          column: 29
        },
        end: {
          line: 52,
          column: 30
        }
      },
      "23": {
        start: {
          line: 53,
          column: 22
        },
        end: {
          line: 53,
          column: 24
        }
      },
      "24": {
        start: {
          line: 54,
          column: 2
        },
        end: {
          line: 78,
          column: 5
        }
      },
      "25": {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 55,
          column: 76
        }
      },
      "26": {
        start: {
          line: 56,
          column: 30
        },
        end: {
          line: 60,
          column: 5
        }
      },
      "27": {
        start: {
          line: 61,
          column: 4
        },
        end: {
          line: 66,
          column: 6
        }
      },
      "28": {
        start: {
          line: 68,
          column: 26
        },
        end: {
          line: 73,
          column: 6
        }
      },
      "29": {
        start: {
          line: 75,
          column: 4
        },
        end: {
          line: 75,
          column: 75
        }
      },
      "30": {
        start: {
          line: 75,
          column: 44
        },
        end: {
          line: 75,
          column: 73
        }
      },
      "31": {
        start: {
          line: 77,
          column: 4
        },
        end: {
          line: 77,
          column: 30
        }
      },
      "32": {
        start: {
          line: 79,
          column: 2
        },
        end: {
          line: 79,
          column: 20
        }
      },
      "33": {
        start: {
          line: 89,
          column: 53
        },
        end: {
          line: 99,
          column: 1
        }
      },
      "34": {
        start: {
          line: 94,
          column: 2
        },
        end: {
          line: 98,
          column: 3
        }
      },
      "35": {
        start: {
          line: 95,
          column: 4
        },
        end: {
          line: 95,
          column: 22
        }
      },
      "36": {
        start: {
          line: 97,
          column: 4
        },
        end: {
          line: 97,
          column: 36
        }
      },
      "37": {
        start: {
          line: 109,
          column: 37
        },
        end: {
          line: 125,
          column: 1
        }
      },
      "38": {
        start: {
          line: 110,
          column: 25
        },
        end: {
          line: 110,
          column: 41
        }
      },
      "39": {
        start: {
          line: 111,
          column: 14
        },
        end: {
          line: 121,
          column: 3
        }
      },
      "40": {
        start: {
          line: 122,
          column: 17
        },
        end: {
          line: 122,
          column: 33
        }
      },
      "41": {
        start: {
          line: 123,
          column: 18
        },
        end: {
          line: 123,
          column: 41
        }
      },
      "42": {
        start: {
          line: 124,
          column: 2
        },
        end: {
          line: 124,
          column: 20
        }
      },
      "43": {
        start: {
          line: 134,
          column: 32
        },
        end: {
          line: 147,
          column: 1
        }
      },
      "44": {
        start: {
          line: 135,
          column: 17
        },
        end: {
          line: 135,
          column: 33
        }
      },
      "45": {
        start: {
          line: 136,
          column: 20
        },
        end: {
          line: 136,
          column: 42
        }
      },
      "46": {
        start: {
          line: 138,
          column: 2
        },
        end: {
          line: 146,
          column: 3
        }
      },
      "47": {
        start: {
          line: 141,
          column: 4
        },
        end: {
          line: 141,
          column: 58
        }
      },
      "48": {
        start: {
          line: 145,
          column: 4
        },
        end: {
          line: 145,
          column: 59
        }
      },
      "49": {
        start: {
          line: 149,
          column: 41
        },
        end: {
          line: 174,
          column: 1
        }
      },
      "50": {
        start: {
          line: 156,
          column: 25
        },
        end: {
          line: 156,
          column: 44
        }
      },
      "51": {
        start: {
          line: 157,
          column: 24
        },
        end: {
          line: 157,
          column: 26
        }
      },
      "52": {
        start: {
          line: 158,
          column: 2
        },
        end: {
          line: 172,
          column: 5
        }
      },
      "53": {
        start: {
          line: 161,
          column: 41
        },
        end: {
          line: 163,
          column: 16
        }
      },
      "54": {
        start: {
          line: 162,
          column: 25
        },
        end: {
          line: 162,
          column: 29
        }
      },
      "55": {
        start: {
          line: 164,
          column: 23
        },
        end: {
          line: 169,
          column: 6
        }
      },
      "56": {
        start: {
          line: 171,
          column: 4
        },
        end: {
          line: 171,
          column: 37
        }
      },
      "57": {
        start: {
          line: 173,
          column: 2
        },
        end: {
          line: 173,
          column: 23
        }
      },
      "58": {
        start: {
          line: 190,
          column: 33
        },
        end: {
          line: 219,
          column: 1
        }
      },
      "59": {
        start: {
          line: 196,
          column: 22
        },
        end: {
          line: 196,
          column: 49
        }
      },
      "60": {
        start: {
          line: 198,
          column: 26
        },
        end: {
          line: 198,
          column: 50
        }
      },
      "61": {
        start: {
          line: 199,
          column: 45
        },
        end: {
          line: 205,
          column: 6
        }
      },
      "62": {
        start: {
          line: 203,
          column: 4
        },
        end: {
          line: 203,
          column: 38
        }
      },
      "63": {
        start: {
          line: 207,
          column: 19
        },
        end: {
          line: 207,
          column: 59
        }
      },
      "64": {
        start: {
          line: 209,
          column: 20
        },
        end: {
          line: 209,
          column: 42
        }
      },
      "65": {
        start: {
          line: 210,
          column: 23
        },
        end: {
          line: 212,
          column: 7
        }
      },
      "66": {
        start: {
          line: 211,
          column: 4
        },
        end: {
          line: 211,
          column: 38
        }
      },
      "67": {
        start: {
          line: 214,
          column: 2
        },
        end: {
          line: 218,
          column: 4
        }
      },
      "68": {
        start: {
          line: 226,
          column: 36
        },
        end: {
          line: 263,
          column: 1
        }
      },
      "69": {
        start: {
          line: 227,
          column: 23
        },
        end: {
          line: 227,
          column: 25
        }
      },
      "70": {
        start: {
          line: 228,
          column: 24
        },
        end: {
          line: 228,
          column: 30
        }
      },
      "71": {
        start: {
          line: 230,
          column: 19
        },
        end: {
          line: 230,
          column: 20
        }
      },
      "72": {
        start: {
          line: 231,
          column: 2
        },
        end: {
          line: 257,
          column: 5
        }
      },
      "73": {
        start: {
          line: 232,
          column: 35
        },
        end: {
          line: 232,
          column: 56
        }
      },
      "74": {
        start: {
          line: 233,
          column: 28
        },
        end: {
          line: 233,
          column: 76
        }
      },
      "75": {
        start: {
          line: 234,
          column: 4
        },
        end: {
          line: 237,
          column: 5
        }
      },
      "76": {
        start: {
          line: 236,
          column: 6
        },
        end: {
          line: 236,
          column: 70
        }
      },
      "77": {
        start: {
          line: 238,
          column: 30
        },
        end: {
          line: 238,
          column: 51
        }
      },
      "78": {
        start: {
          line: 239,
          column: 28
        },
        end: {
          line: 239,
          column: 53
        }
      },
      "79": {
        start: {
          line: 240,
          column: 22
        },
        end: {
          line: 240,
          column: 79
        }
      },
      "80": {
        start: {
          line: 241,
          column: 30
        },
        end: {
          line: 241,
          column: 55
        }
      },
      "81": {
        start: {
          line: 242,
          column: 23
        },
        end: {
          line: 242,
          column: 76
        }
      },
      "82": {
        start: {
          line: 243,
          column: 24
        },
        end: {
          line: 243,
          column: 62
        }
      },
      "83": {
        start: {
          line: 244,
          column: 28
        },
        end: {
          line: 249,
          column: 5
        }
      },
      "84": {
        start: {
          line: 250,
          column: 4
        },
        end: {
          line: 250,
          column: 41
        }
      },
      "85": {
        start: {
          line: 252,
          column: 34
        },
        end: {
          line: 252,
          column: 59
        }
      },
      "86": {
        start: {
          line: 253,
          column: 4
        },
        end: {
          line: 253,
          column: 67
        }
      },
      "87": {
        start: {
          line: 255,
          column: 4
        },
        end: {
          line: 255,
          column: 41
        }
      },
      "88": {
        start: {
          line: 256,
          column: 4
        },
        end: {
          line: 256,
          column: 35
        }
      },
      "89": {
        start: {
          line: 258,
          column: 2
        },
        end: {
          line: 261,
          column: 3
        }
      },
      "90": {
        start: {
          line: 260,
          column: 4
        },
        end: {
          line: 260,
          column: 68
        }
      },
      "91": {
        start: {
          line: 262,
          column: 2
        },
        end: {
          line: 262,
          column: 24
        }
      },
      "92": {
        start: {
          line: 271,
          column: 34
        },
        end: {
          line: 287,
          column: 1
        }
      },
      "93": {
        start: {
          line: 272,
          column: 15
        },
        end: {
          line: 272,
          column: 17
        }
      },
      "94": {
        start: {
          line: 273,
          column: 2
        },
        end: {
          line: 285,
          column: 5
        }
      },
      "95": {
        start: {
          line: 274,
          column: 4
        },
        end: {
          line: 284,
          column: 5
        }
      },
      "96": {
        start: {
          line: 276,
          column: 25
        },
        end: {
          line: 276,
          column: 53
        }
      },
      "97": {
        start: {
          line: 277,
          column: 30
        },
        end: {
          line: 279,
          column: 29
        }
      },
      "98": {
        start: {
          line: 280,
          column: 20
        },
        end: {
          line: 280,
          column: 42
        }
      },
      "99": {
        start: {
          line: 281,
          column: 18
        },
        end: {
          line: 281,
          column: 51
        }
      },
      "100": {
        start: {
          line: 282,
          column: 20
        },
        end: {
          line: 282,
          column: 32
        }
      },
      "101": {
        start: {
          line: 283,
          column: 6
        },
        end: {
          line: 283,
          column: 25
        }
      },
      "102": {
        start: {
          line: 286,
          column: 2
        },
        end: {
          line: 286,
          column: 16
        }
      },
      "103": {
        start: {
          line: 295,
          column: 41
        },
        end: {
          line: 301,
          column: 1
        }
      },
      "104": {
        start: {
          line: 296,
          column: 27
        },
        end: {
          line: 296,
          column: 29
        }
      },
      "105": {
        start: {
          line: 297,
          column: 2
        },
        end: {
          line: 297,
          column: 54
        }
      },
      "106": {
        start: {
          line: 298,
          column: 17
        },
        end: {
          line: 298,
          column: 55
        }
      },
      "107": {
        start: {
          line: 299,
          column: 2
        },
        end: {
          line: 299,
          column: 60
        }
      },
      "108": {
        start: {
          line: 300,
          column: 2
        },
        end: {
          line: 300,
          column: 28
        }
      },
      "109": {
        start: {
          line: 308,
          column: 30
        },
        end: {
          line: 341,
          column: 1
        }
      },
      "110": {
        start: {
          line: 309,
          column: 24
        },
        end: {
          line: 309,
          column: 26
        }
      },
      "111": {
        start: {
          line: 310,
          column: 2
        },
        end: {
          line: 310,
          column: 41
        }
      },
      "112": {
        start: {
          line: 310,
          column: 27
        },
        end: {
          line: 310,
          column: 41
        }
      },
      "113": {
        start: {
          line: 311,
          column: 2
        },
        end: {
          line: 311,
          column: 49
        }
      },
      "114": {
        start: {
          line: 311,
          column: 39
        },
        end: {
          line: 311,
          column: 47
        }
      },
      "115": {
        start: {
          line: 312,
          column: 2
        },
        end: {
          line: 312,
          column: 49
        }
      },
      "116": {
        start: {
          line: 312,
          column: 39
        },
        end: {
          line: 312,
          column: 47
        }
      },
      "117": {
        start: {
          line: 313,
          column: 2
        },
        end: {
          line: 313,
          column: 26
        }
      },
      "118": {
        start: {
          line: 315,
          column: 21
        },
        end: {
          line: 315,
          column: 23
        }
      },
      "119": {
        start: {
          line: 316,
          column: 2
        },
        end: {
          line: 339,
          column: 5
        }
      },
      "120": {
        start: {
          line: 317,
          column: 25
        },
        end: {
          line: 317,
          column: 40
        }
      },
      "121": {
        start: {
          line: 318,
          column: 23
        },
        end: {
          line: 318,
          column: 38
        }
      },
      "122": {
        start: {
          line: 319,
          column: 23
        },
        end: {
          line: 319,
          column: 38
        }
      },
      "123": {
        start: {
          line: 320,
          column: 21
        },
        end: {
          line: 320,
          column: 36
        }
      },
      "124": {
        start: {
          line: 321,
          column: 4
        },
        end: {
          line: 334,
          column: 5
        }
      },
      "125": {
        start: {
          line: 323,
          column: 6
        },
        end: {
          line: 329,
          column: 7
        }
      },
      "126": {
        start: {
          line: 328,
          column: 8
        },
        end: {
          line: 328,
          column: 50
        }
      },
      "127": {
        start: {
          line: 332,
          column: 6
        },
        end: {
          line: 332,
          column: 72
        }
      },
      "128": {
        start: {
          line: 332,
          column: 37
        },
        end: {
          line: 332,
          column: 72
        }
      },
      "129": {
        start: {
          line: 333,
          column: 6
        },
        end: {
          line: 333,
          column: 34
        }
      },
      "130": {
        start: {
          line: 335,
          column: 4
        },
        end: {
          line: 338,
          column: 5
        }
      },
      "131": {
        start: {
          line: 337,
          column: 6
        },
        end: {
          line: 337,
          column: 41
        }
      },
      "132": {
        start: {
          line: 340,
          column: 2
        },
        end: {
          line: 340,
          column: 25
        }
      },
      "133": {
        start: {
          line: 349,
          column: 30
        },
        end: {
          line: 354,
          column: 1
        }
      },
      "134": {
        start: {
          line: 350,
          column: 23
        },
        end: {
          line: 350,
          column: 25
        }
      },
      "135": {
        start: {
          line: 351,
          column: 15
        },
        end: {
          line: 351,
          column: 68
        }
      },
      "136": {
        start: {
          line: 352,
          column: 2
        },
        end: {
          line: 352,
          column: 71
        }
      },
      "137": {
        start: {
          line: 353,
          column: 2
        },
        end: {
          line: 353,
          column: 24
        }
      },
      "138": {
        start: {
          line: 369,
          column: 34
        },
        end: {
          line: 391,
          column: 1
        }
      },
      "139": {
        start: {
          line: 370,
          column: 19
        },
        end: {
          line: 370,
          column: 21
        }
      },
      "140": {
        start: {
          line: 371,
          column: 2
        },
        end: {
          line: 389,
          column: 5
        }
      },
      "141": {
        start: {
          line: 372,
          column: 18
        },
        end: {
          line: 372,
          column: 26
        }
      },
      "142": {
        start: {
          line: 373,
          column: 16
        },
        end: {
          line: 373,
          column: 24
        }
      },
      "143": {
        start: {
          line: 374,
          column: 19
        },
        end: {
          line: 374,
          column: 34
        }
      },
      "144": {
        start: {
          line: 375,
          column: 22
        },
        end: {
          line: 375,
          column: 50
        }
      },
      "145": {
        start: {
          line: 376,
          column: 23
        },
        end: {
          line: 376,
          column: 46
        }
      },
      "146": {
        start: {
          line: 377,
          column: 26
        },
        end: {
          line: 377,
          column: 68
        }
      },
      "147": {
        start: {
          line: 378,
          column: 23
        },
        end: {
          line: 378,
          column: 40
        }
      },
      "148": {
        start: {
          line: 379,
          column: 24
        },
        end: {
          line: 379,
          column: 62
        }
      },
      "149": {
        start: {
          line: 380,
          column: 22
        },
        end: {
          line: 384,
          column: 5
        }
      },
      "150": {
        start: {
          line: 385,
          column: 4
        },
        end: {
          line: 388,
          column: 5
        }
      },
      "151": {
        start: {
          line: 387,
          column: 6
        },
        end: {
          line: 387,
          column: 33
        }
      },
      "152": {
        start: {
          line: 390,
          column: 2
        },
        end: {
          line: 390,
          column: 20
        }
      },
      "153": {
        start: {
          line: 399,
          column: 34
        },
        end: {
          line: 410,
          column: 1
        }
      },
      "154": {
        start: {
          line: 402,
          column: 2
        },
        end: {
          line: 405,
          column: 5
        }
      },
      "155": {
        start: {
          line: 403,
          column: 27
        },
        end: {
          line: 403,
          column: 70
        }
      },
      "156": {
        start: {
          line: 404,
          column: 4
        },
        end: {
          line: 404,
          column: 47
        }
      },
      "157": {
        start: {
          line: 406,
          column: 15
        },
        end: {
          line: 406,
          column: 53
        }
      },
      "158": {
        start: {
          line: 407,
          column: 2
        },
        end: {
          line: 407,
          column: 34
        }
      },
      "159": {
        start: {
          line: 408,
          column: 2
        },
        end: {
          line: 408,
          column: 59
        }
      },
      "160": {
        start: {
          line: 409,
          column: 2
        },
        end: {
          line: 409,
          column: 29
        }
      },
      "161": {
        start: {
          line: 418,
          column: 45
        },
        end: {
          line: 433,
          column: 1
        }
      },
      "162": {
        start: {
          line: 423,
          column: 2
        },
        end: {
          line: 423,
          column: 38
        }
      },
      "163": {
        start: {
          line: 424,
          column: 2
        },
        end: {
          line: 430,
          column: 4
        }
      },
      "164": {
        start: {
          line: 426,
          column: 6
        },
        end: {
          line: 429,
          column: 7
        }
      },
      "165": {
        start: {
          line: 431,
          column: 2
        },
        end: {
          line: 431,
          column: 54
        }
      },
      "166": {
        start: {
          line: 432,
          column: 2
        },
        end: {
          line: 432,
          column: 20
        }
      },
      "167": {
        start: {
          line: 441,
          column: 40
        },
        end: {
          line: 446,
          column: 1
        }
      },
      "168": {
        start: {
          line: 442,
          column: 2
        },
        end: {
          line: 442,
          column: 38
        }
      },
      "169": {
        start: {
          line: 443,
          column: 2
        },
        end: {
          line: 443,
          column: 29
        }
      },
      "170": {
        start: {
          line: 444,
          column: 2
        },
        end: {
          line: 444,
          column: 54
        }
      },
      "171": {
        start: {
          line: 445,
          column: 2
        },
        end: {
          line: 445,
          column: 20
        }
      },
      "172": {
        start: {
          line: 454,
          column: 42
        },
        end: {
          line: 475,
          column: 1
        }
      },
      "173": {
        start: {
          line: 455,
          column: 10
        },
        end: {
          line: 455,
          column: 11
        }
      },
      "174": {
        start: {
          line: 456,
          column: 2
        },
        end: {
          line: 456,
          column: 38
        }
      },
      "175": {
        start: {
          line: 456,
          column: 29
        },
        end: {
          line: 456,
          column: 38
        }
      },
      "176": {
        start: {
          line: 457,
          column: 2
        },
        end: {
          line: 463,
          column: 3
        }
      },
      "177": {
        start: {
          line: 458,
          column: 22
        },
        end: {
          line: 458,
          column: 42
        }
      },
      "178": {
        start: {
          line: 459,
          column: 4
        },
        end: {
          line: 461,
          column: 7
        }
      },
      "179": {
        start: {
          line: 460,
          column: 6
        },
        end: {
          line: 460,
          column: 62
        }
      },
      "180": {
        start: {
          line: 462,
          column: 4
        },
        end: {
          line: 462,
          column: 13
        }
      },
      "181": {
        start: {
          line: 464,
          column: 2
        },
        end: {
          line: 464,
          column: 76
        }
      },
      "182": {
        start: {
          line: 464,
          column: 33
        },
        end: {
          line: 464,
          column: 76
        }
      },
      "183": {
        start: {
          line: 465,
          column: 16
        },
        end: {
          line: 465,
          column: 55
        }
      },
      "184": {
        start: {
          line: 467,
          column: 2
        },
        end: {
          line: 473,
          column: 3
        }
      },
      "185": {
        start: {
          line: 469,
          column: 4
        },
        end: {
          line: 471,
          column: 5
        }
      },
      "186": {
        start: {
          line: 470,
          column: 6
        },
        end: {
          line: 470,
          column: 24
        }
      },
      "187": {
        start: {
          line: 472,
          column: 4
        },
        end: {
          line: 472,
          column: 8
        }
      },
      "188": {
        start: {
          line: 474,
          column: 2
        },
        end: {
          line: 474,
          column: 11
        }
      },
      "189": {
        start: {
          line: 485,
          column: 27
        },
        end: {
          line: 498,
          column: 1
        }
      },
      "190": {
        start: {
          line: 486,
          column: 2
        },
        end: {
          line: 486,
          column: 38
        }
      },
      "191": {
        start: {
          line: 486,
          column: 29
        },
        end: {
          line: 486,
          column: 38
        }
      },
      "192": {
        start: {
          line: 487,
          column: 10
        },
        end: {
          line: 487,
          column: 11
        }
      },
      "193": {
        start: {
          line: 488,
          column: 12
        },
        end: {
          line: 488,
          column: 13
        }
      },
      "194": {
        start: {
          line: 489,
          column: 13
        },
        end: {
          line: 489,
          column: 29
        }
      },
      "195": {
        start: {
          line: 491,
          column: 2
        },
        end: {
          line: 496,
          column: 3
        }
      },
      "196": {
        start: {
          line: 492,
          column: 4
        },
        end: {
          line: 492,
          column: 41
        }
      },
      "197": {
        start: {
          line: 493,
          column: 4
        },
        end: {
          line: 493,
          column: 26
        }
      },
      "198": {
        start: {
          line: 493,
          column: 20
        },
        end: {
          line: 493,
          column: 26
        }
      },
      "199": {
        start: {
          line: 494,
          column: 4
        },
        end: {
          line: 494,
          column: 8
        }
      },
      "200": {
        start: {
          line: 495,
          column: 4
        },
        end: {
          line: 495,
          column: 16
        }
      },
      "201": {
        start: {
          line: 497,
          column: 2
        },
        end: {
          line: 497,
          column: 11
        }
      },
      "202": {
        start: {
          line: 507,
          column: 41
        },
        end: {
          line: 513,
          column: 1
        }
      },
      "203": {
        start: {
          line: 508,
          column: 2
        },
        end: {
          line: 511,
          column: 5
        }
      },
      "204": {
        start: {
          line: 509,
          column: 16
        },
        end: {
          line: 509,
          column: 51
        }
      },
      "205": {
        start: {
          line: 510,
          column: 4
        },
        end: {
          line: 510,
          column: 43
        }
      },
      "206": {
        start: {
          line: 512,
          column: 2
        },
        end: {
          line: 512,
          column: 20
        }
      },
      "207": {
        start: {
          line: 523,
          column: 35
        },
        end: {
          line: 535,
          column: 1
        }
      },
      "208": {
        start: {
          line: 524,
          column: 2
        },
        end: {
          line: 524,
          column: 38
        }
      },
      "209": {
        start: {
          line: 524,
          column: 29
        },
        end: {
          line: 524,
          column: 38
        }
      },
      "210": {
        start: {
          line: 525,
          column: 20
        },
        end: {
          line: 525,
          column: 21
        }
      },
      "211": {
        start: {
          line: 526,
          column: 17
        },
        end: {
          line: 526,
          column: 18
        }
      },
      "212": {
        start: {
          line: 527,
          column: 13
        },
        end: {
          line: 527,
          column: 29
        }
      },
      "213": {
        start: {
          line: 528,
          column: 2
        },
        end: {
          line: 533,
          column: 3
        }
      },
      "214": {
        start: {
          line: 529,
          column: 4
        },
        end: {
          line: 529,
          column: 51
        }
      },
      "215": {
        start: {
          line: 530,
          column: 4
        },
        end: {
          line: 530,
          column: 31
        }
      },
      "216": {
        start: {
          line: 530,
          column: 25
        },
        end: {
          line: 530,
          column: 31
        }
      },
      "217": {
        start: {
          line: 531,
          column: 4
        },
        end: {
          line: 531,
          column: 18
        }
      },
      "218": {
        start: {
          line: 532,
          column: 4
        },
        end: {
          line: 532,
          column: 21
        }
      },
      "219": {
        start: {
          line: 534,
          column: 2
        },
        end: {
          line: 534,
          column: 21
        }
      },
      "220": {
        start: {
          line: 537,
          column: 18
        },
        end: {
          line: 543,
          column: 1
        }
      },
      "221": {
        start: {
          line: 538,
          column: 2
        },
        end: {
          line: 542,
          column: 5
        }
      },
      "222": {
        start: {
          line: 545,
          column: 31
        },
        end: {
          line: 548,
          column: 1
        }
      },
      "223": {
        start: {
          line: 546,
          column: 21
        },
        end: {
          line: 546,
          column: 48
        }
      },
      "224": {
        start: {
          line: 547,
          column: 2
        },
        end: {
          line: 547,
          column: 20
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 50
          },
          end: {
            line: 6,
            column: 51
          }
        },
        loc: {
          start: {
            line: 10,
            column: 6
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 19,
            column: 39
          },
          end: {
            line: 19,
            column: 40
          }
        },
        loc: {
          start: {
            line: 19,
            column: 62
          },
          end: {
            line: 29,
            column: 1
          }
        },
        line: 19
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 21,
            column: 68
          },
          end: {
            line: 21,
            column: 69
          }
        },
        loc: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 26,
            column: 3
          }
        },
        line: 24
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 31,
            column: 44
          },
          end: {
            line: 31,
            column: 45
          }
        },
        loc: {
          start: {
            line: 35,
            column: 6
          },
          end: {
            line: 80,
            column: 1
          }
        },
        line: 35
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 54,
            column: 20
          },
          end: {
            line: 54,
            column: 21
          }
        },
        loc: {
          start: {
            line: 54,
            column: 41
          },
          end: {
            line: 78,
            column: 3
          }
        },
        line: 54
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 75,
            column: 26
          },
          end: {
            line: 75,
            column: 27
          }
        },
        loc: {
          start: {
            line: 75,
            column: 44
          },
          end: {
            line: 75,
            column: 73
          }
        },
        line: 75
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 89,
            column: 53
          },
          end: {
            line: 89,
            column: 54
          }
        },
        loc: {
          start: {
            line: 93,
            column: 5
          },
          end: {
            line: 99,
            column: 1
          }
        },
        line: 93
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 109,
            column: 37
          },
          end: {
            line: 109,
            column: 38
          }
        },
        loc: {
          start: {
            line: 109,
            column: 69
          },
          end: {
            line: 125,
            column: 1
          }
        },
        line: 109
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 134,
            column: 32
          },
          end: {
            line: 134,
            column: 33
          }
        },
        loc: {
          start: {
            line: 134,
            column: 78
          },
          end: {
            line: 147,
            column: 1
          }
        },
        line: 134
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 149,
            column: 41
          },
          end: {
            line: 149,
            column: 42
          }
        },
        loc: {
          start: {
            line: 153,
            column: 6
          },
          end: {
            line: 174,
            column: 1
          }
        },
        line: 153
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 158,
            column: 25
          },
          end: {
            line: 158,
            column: 26
          }
        },
        loc: {
          start: {
            line: 158,
            column: 44
          },
          end: {
            line: 172,
            column: 3
          }
        },
        line: 158
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 162,
            column: 11
          },
          end: {
            line: 162,
            column: 12
          }
        },
        loc: {
          start: {
            line: 162,
            column: 25
          },
          end: {
            line: 162,
            column: 29
          }
        },
        line: 162
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 190,
            column: 33
          },
          end: {
            line: 190,
            column: 34
          }
        },
        loc: {
          start: {
            line: 194,
            column: 6
          },
          end: {
            line: 219,
            column: 1
          }
        },
        line: 194
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 199,
            column: 68
          },
          end: {
            line: 199,
            column: 69
          }
        },
        loc: {
          start: {
            line: 202,
            column: 4
          },
          end: {
            line: 204,
            column: 3
          }
        },
        line: 202
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 210,
            column: 40
          },
          end: {
            line: 210,
            column: 41
          }
        },
        loc: {
          start: {
            line: 210,
            column: 58
          },
          end: {
            line: 212,
            column: 3
          }
        },
        line: 210
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 226,
            column: 36
          },
          end: {
            line: 226,
            column: 37
          }
        },
        loc: {
          start: {
            line: 226,
            column: 56
          },
          end: {
            line: 263,
            column: 1
          }
        },
        line: 226
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 231,
            column: 17
          },
          end: {
            line: 231,
            column: 18
          }
        },
        loc: {
          start: {
            line: 231,
            column: 34
          },
          end: {
            line: 257,
            column: 3
          }
        },
        line: 231
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 271,
            column: 34
          },
          end: {
            line: 271,
            column: 35
          }
        },
        loc: {
          start: {
            line: 271,
            column: 58
          },
          end: {
            line: 287,
            column: 1
          }
        },
        line: 271
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 273,
            column: 21
          },
          end: {
            line: 273,
            column: 22
          }
        },
        loc: {
          start: {
            line: 273,
            column: 36
          },
          end: {
            line: 285,
            column: 3
          }
        },
        line: 273
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 295,
            column: 41
          },
          end: {
            line: 295,
            column: 42
          }
        },
        loc: {
          start: {
            line: 295,
            column: 65
          },
          end: {
            line: 301,
            column: 1
          }
        },
        line: 295
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 308,
            column: 30
          },
          end: {
            line: 308,
            column: 31
          }
        },
        loc: {
          start: {
            line: 308,
            column: 42
          },
          end: {
            line: 341,
            column: 1
          }
        },
        line: 308
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 311,
            column: 28
          },
          end: {
            line: 311,
            column: 29
          }
        },
        loc: {
          start: {
            line: 311,
            column: 39
          },
          end: {
            line: 311,
            column: 47
          }
        },
        line: 311
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 312,
            column: 28
          },
          end: {
            line: 312,
            column: 29
          }
        },
        loc: {
          start: {
            line: 312,
            column: 39
          },
          end: {
            line: 312,
            column: 47
          }
        },
        line: 312
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 316,
            column: 17
          },
          end: {
            line: 316,
            column: 18
          }
        },
        loc: {
          start: {
            line: 316,
            column: 42
          },
          end: {
            line: 339,
            column: 3
          }
        },
        line: 316
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 349,
            column: 30
          },
          end: {
            line: 349,
            column: 31
          }
        },
        loc: {
          start: {
            line: 349,
            column: 54
          },
          end: {
            line: 354,
            column: 1
          }
        },
        line: 349
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 369,
            column: 34
          },
          end: {
            line: 369,
            column: 35
          }
        },
        loc: {
          start: {
            line: 369,
            column: 54
          },
          end: {
            line: 391,
            column: 1
          }
        },
        line: 369
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 371,
            column: 17
          },
          end: {
            line: 371,
            column: 18
          }
        },
        loc: {
          start: {
            line: 371,
            column: 28
          },
          end: {
            line: 389,
            column: 3
          }
        },
        line: 371
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 399,
            column: 34
          },
          end: {
            line: 399,
            column: 35
          }
        },
        loc: {
          start: {
            line: 399,
            column: 58
          },
          end: {
            line: 410,
            column: 1
          }
        },
        line: 399
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 402,
            column: 33
          },
          end: {
            line: 402,
            column: 34
          }
        },
        loc: {
          start: {
            line: 402,
            column: 48
          },
          end: {
            line: 405,
            column: 3
          }
        },
        line: 402
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 418,
            column: 45
          },
          end: {
            line: 418,
            column: 46
          }
        },
        loc: {
          start: {
            line: 422,
            column: 5
          },
          end: {
            line: 433,
            column: 1
          }
        },
        line: 422
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 425,
            column: 4
          },
          end: {
            line: 425,
            column: 5
          }
        },
        loc: {
          start: {
            line: 426,
            column: 6
          },
          end: {
            line: 429,
            column: 7
          }
        },
        line: 426
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 441,
            column: 40
          },
          end: {
            line: 441,
            column: 41
          }
        },
        loc: {
          start: {
            line: 441,
            column: 75
          },
          end: {
            line: 446,
            column: 1
          }
        },
        line: 441
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 454,
            column: 42
          },
          end: {
            line: 454,
            column: 43
          }
        },
        loc: {
          start: {
            line: 454,
            column: 65
          },
          end: {
            line: 475,
            column: 1
          }
        },
        line: 454
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 459,
            column: 24
          },
          end: {
            line: 459,
            column: 25
          }
        },
        loc: {
          start: {
            line: 459,
            column: 37
          },
          end: {
            line: 461,
            column: 5
          }
        },
        line: 459
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 485,
            column: 27
          },
          end: {
            line: 485,
            column: 28
          }
        },
        loc: {
          start: {
            line: 485,
            column: 50
          },
          end: {
            line: 498,
            column: 1
          }
        },
        line: 485
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 507,
            column: 41
          },
          end: {
            line: 507,
            column: 42
          }
        },
        loc: {
          start: {
            line: 507,
            column: 65
          },
          end: {
            line: 513,
            column: 1
          }
        },
        line: 507
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 508,
            column: 33
          },
          end: {
            line: 508,
            column: 34
          }
        },
        loc: {
          start: {
            line: 508,
            column: 48
          },
          end: {
            line: 511,
            column: 3
          }
        },
        line: 508
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 523,
            column: 35
          },
          end: {
            line: 523,
            column: 36
          }
        },
        loc: {
          start: {
            line: 523,
            column: 58
          },
          end: {
            line: 535,
            column: 1
          }
        },
        line: 523
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 537,
            column: 18
          },
          end: {
            line: 537,
            column: 19
          }
        },
        loc: {
          start: {
            line: 537,
            column: 28
          },
          end: {
            line: 543,
            column: 1
          }
        },
        line: 537
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 545,
            column: 31
          },
          end: {
            line: 545,
            column: 32
          }
        },
        loc: {
          start: {
            line: 545,
            column: 43
          },
          end: {
            line: 548,
            column: 1
          }
        },
        line: 545
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 12,
            column: 2
          },
          end: {
            line: 15,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 12,
            column: 2
          },
          end: {
            line: 15,
            column: 3
          }
        }, {
          start: {
            line: 12,
            column: 2
          },
          end: {
            line: 15,
            column: 3
          }
        }],
        line: 12
      },
      "1": {
        loc: {
          start: {
            line: 12,
            column: 6
          },
          end: {
            line: 12,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 12,
            column: 6
          },
          end: {
            line: 12,
            column: 11
          }
        }, {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 12,
            column: 38
          }
        }],
        line: 12
      },
      "2": {
        loc: {
          start: {
            line: 43,
            column: 2
          },
          end: {
            line: 45,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 2
          },
          end: {
            line: 45,
            column: 3
          }
        }, {
          start: {
            line: 43,
            column: 2
          },
          end: {
            line: 45,
            column: 3
          }
        }],
        line: 43
      },
      "3": {
        loc: {
          start: {
            line: 43,
            column: 6
          },
          end: {
            line: 43,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 43,
            column: 6
          },
          end: {
            line: 43,
            column: 17
          }
        }, {
          start: {
            line: 43,
            column: 21
          },
          end: {
            line: 43,
            column: 38
          }
        }],
        line: 43
      },
      "4": {
        loc: {
          start: {
            line: 47,
            column: 2
          },
          end: {
            line: 50,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 2
          },
          end: {
            line: 50,
            column: 3
          }
        }, {
          start: {
            line: 47,
            column: 2
          },
          end: {
            line: 50,
            column: 3
          }
        }],
        line: 47
      },
      "5": {
        loc: {
          start: {
            line: 47,
            column: 6
          },
          end: {
            line: 47,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 47,
            column: 6
          },
          end: {
            line: 47,
            column: 23
          }
        }, {
          start: {
            line: 47,
            column: 27
          },
          end: {
            line: 47,
            column: 49
          }
        }],
        line: 47
      },
      "6": {
        loc: {
          start: {
            line: 94,
            column: 2
          },
          end: {
            line: 98,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 2
          },
          end: {
            line: 98,
            column: 3
          }
        }, {
          start: {
            line: 94,
            column: 2
          },
          end: {
            line: 98,
            column: 3
          }
        }],
        line: 94
      },
      "7": {
        loc: {
          start: {
            line: 94,
            column: 6
          },
          end: {
            line: 94,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 94,
            column: 6
          },
          end: {
            line: 94,
            column: 23
          }
        }, {
          start: {
            line: 94,
            column: 27
          },
          end: {
            line: 94,
            column: 38
          }
        }],
        line: 94
      },
      "8": {
        loc: {
          start: {
            line: 123,
            column: 18
          },
          end: {
            line: 123,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 123,
            column: 18
          },
          end: {
            line: 123,
            column: 35
          }
        }, {
          start: {
            line: 123,
            column: 39
          },
          end: {
            line: 123,
            column: 41
          }
        }],
        line: 123
      },
      "9": {
        loc: {
          start: {
            line: 134,
            column: 64
          },
          end: {
            line: 134,
            column: 73
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 134,
            column: 72
          },
          end: {
            line: 134,
            column: 73
          }
        }],
        line: 134
      },
      "10": {
        loc: {
          start: {
            line: 138,
            column: 2
          },
          end: {
            line: 146,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 138,
            column: 2
          },
          end: {
            line: 146,
            column: 3
          }
        }, {
          start: {
            line: 138,
            column: 2
          },
          end: {
            line: 146,
            column: 3
          }
        }],
        line: 138
      },
      "11": {
        loc: {
          start: {
            line: 234,
            column: 4
          },
          end: {
            line: 237,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 234,
            column: 4
          },
          end: {
            line: 237,
            column: 5
          }
        }, {
          start: {
            line: 234,
            column: 4
          },
          end: {
            line: 237,
            column: 5
          }
        }],
        line: 234
      },
      "12": {
        loc: {
          start: {
            line: 258,
            column: 2
          },
          end: {
            line: 261,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 258,
            column: 2
          },
          end: {
            line: 261,
            column: 3
          }
        }, {
          start: {
            line: 258,
            column: 2
          },
          end: {
            line: 261,
            column: 3
          }
        }],
        line: 258
      },
      "13": {
        loc: {
          start: {
            line: 274,
            column: 4
          },
          end: {
            line: 284,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 274,
            column: 4
          },
          end: {
            line: 284,
            column: 5
          }
        }, {
          start: {
            line: 274,
            column: 4
          },
          end: {
            line: 284,
            column: 5
          }
        }],
        line: 274
      },
      "14": {
        loc: {
          start: {
            line: 274,
            column: 8
          },
          end: {
            line: 274,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 274,
            column: 8
          },
          end: {
            line: 274,
            column: 14
          }
        }, {
          start: {
            line: 274,
            column: 18
          },
          end: {
            line: 274,
            column: 49
          }
        }],
        line: 274
      },
      "15": {
        loc: {
          start: {
            line: 310,
            column: 2
          },
          end: {
            line: 310,
            column: 41
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 310,
            column: 2
          },
          end: {
            line: 310,
            column: 41
          }
        }, {
          start: {
            line: 310,
            column: 2
          },
          end: {
            line: 310,
            column: 41
          }
        }],
        line: 310
      },
      "16": {
        loc: {
          start: {
            line: 321,
            column: 4
          },
          end: {
            line: 334,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 321,
            column: 4
          },
          end: {
            line: 334,
            column: 5
          }
        }, {
          start: {
            line: 321,
            column: 4
          },
          end: {
            line: 334,
            column: 5
          }
        }],
        line: 321
      },
      "17": {
        loc: {
          start: {
            line: 321,
            column: 8
          },
          end: {
            line: 321,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 321,
            column: 8
          },
          end: {
            line: 321,
            column: 36
          }
        }, {
          start: {
            line: 321,
            column: 40
          },
          end: {
            line: 321,
            column: 70
          }
        }],
        line: 321
      },
      "18": {
        loc: {
          start: {
            line: 323,
            column: 6
          },
          end: {
            line: 329,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 323,
            column: 6
          },
          end: {
            line: 329,
            column: 7
          }
        }, {
          start: {
            line: 323,
            column: 6
          },
          end: {
            line: 329,
            column: 7
          }
        }],
        line: 323
      },
      "19": {
        loc: {
          start: {
            line: 323,
            column: 10
          },
          end: {
            line: 323,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 323,
            column: 10
          },
          end: {
            line: 323,
            column: 36
          }
        }, {
          start: {
            line: 323,
            column: 40
          },
          end: {
            line: 323,
            column: 64
          }
        }],
        line: 323
      },
      "20": {
        loc: {
          start: {
            line: 332,
            column: 6
          },
          end: {
            line: 332,
            column: 72
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 332,
            column: 6
          },
          end: {
            line: 332,
            column: 72
          }
        }, {
          start: {
            line: 332,
            column: 6
          },
          end: {
            line: 332,
            column: 72
          }
        }],
        line: 332
      },
      "21": {
        loc: {
          start: {
            line: 335,
            column: 4
          },
          end: {
            line: 338,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 335,
            column: 4
          },
          end: {
            line: 338,
            column: 5
          }
        }, {
          start: {
            line: 335,
            column: 4
          },
          end: {
            line: 338,
            column: 5
          }
        }],
        line: 335
      },
      "22": {
        loc: {
          start: {
            line: 335,
            column: 8
          },
          end: {
            line: 335,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 335,
            column: 8
          },
          end: {
            line: 335,
            column: 35
          }
        }, {
          start: {
            line: 335,
            column: 39
          },
          end: {
            line: 335,
            column: 69
          }
        }],
        line: 335
      },
      "23": {
        loc: {
          start: {
            line: 385,
            column: 4
          },
          end: {
            line: 388,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 385,
            column: 4
          },
          end: {
            line: 388,
            column: 5
          }
        }, {
          start: {
            line: 385,
            column: 4
          },
          end: {
            line: 388,
            column: 5
          }
        }],
        line: 385
      },
      "24": {
        loc: {
          start: {
            line: 427,
            column: 8
          },
          end: {
            line: 428,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 427,
            column: 8
          },
          end: {
            line: 427,
            column: 54
          }
        }, {
          start: {
            line: 428,
            column: 8
          },
          end: {
            line: 428,
            column: 42
          }
        }],
        line: 427
      },
      "25": {
        loc: {
          start: {
            line: 456,
            column: 2
          },
          end: {
            line: 456,
            column: 38
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 456,
            column: 2
          },
          end: {
            line: 456,
            column: 38
          }
        }, {
          start: {
            line: 456,
            column: 2
          },
          end: {
            line: 456,
            column: 38
          }
        }],
        line: 456
      },
      "26": {
        loc: {
          start: {
            line: 457,
            column: 2
          },
          end: {
            line: 463,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 457,
            column: 2
          },
          end: {
            line: 463,
            column: 3
          }
        }, {
          start: {
            line: 457,
            column: 2
          },
          end: {
            line: 463,
            column: 3
          }
        }],
        line: 457
      },
      "27": {
        loc: {
          start: {
            line: 464,
            column: 2
          },
          end: {
            line: 464,
            column: 76
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 464,
            column: 2
          },
          end: {
            line: 464,
            column: 76
          }
        }, {
          start: {
            line: 464,
            column: 2
          },
          end: {
            line: 464,
            column: 76
          }
        }],
        line: 464
      },
      "28": {
        loc: {
          start: {
            line: 469,
            column: 4
          },
          end: {
            line: 471,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 469,
            column: 4
          },
          end: {
            line: 471,
            column: 5
          }
        }, {
          start: {
            line: 469,
            column: 4
          },
          end: {
            line: 471,
            column: 5
          }
        }],
        line: 469
      },
      "29": {
        loc: {
          start: {
            line: 486,
            column: 2
          },
          end: {
            line: 486,
            column: 38
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 486,
            column: 2
          },
          end: {
            line: 486,
            column: 38
          }
        }, {
          start: {
            line: 486,
            column: 2
          },
          end: {
            line: 486,
            column: 38
          }
        }],
        line: 486
      },
      "30": {
        loc: {
          start: {
            line: 493,
            column: 4
          },
          end: {
            line: 493,
            column: 26
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 493,
            column: 4
          },
          end: {
            line: 493,
            column: 26
          }
        }, {
          start: {
            line: 493,
            column: 4
          },
          end: {
            line: 493,
            column: 26
          }
        }],
        line: 493
      },
      "31": {
        loc: {
          start: {
            line: 524,
            column: 2
          },
          end: {
            line: 524,
            column: 38
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 524,
            column: 2
          },
          end: {
            line: 524,
            column: 38
          }
        }, {
          start: {
            line: 524,
            column: 2
          },
          end: {
            line: 524,
            column: 38
          }
        }],
        line: 524
      },
      "32": {
        loc: {
          start: {
            line: 530,
            column: 4
          },
          end: {
            line: 530,
            column: 31
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 530,
            column: 4
          },
          end: {
            line: 530,
            column: 31
          }
        }, {
          start: {
            line: 530,
            column: 4
          },
          end: {
            line: 530,
            column: 31
          }
        }],
        line: 530
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "26616be738278d7bf3a7658b8c28de5d4c18a712"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];

  cov_2mx2g0skd4 = function () {
    return actualCoverage;
  };

  return actualCoverage;
}

cov_2mx2g0skd4();

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

cov_2mx2g0skd4().s[0]++;

var selectionsFromQuoteAndVerseObjects = ({
  quote,
  verseObjects,
  occurrence
}) => {
  cov_2mx2g0skd4().f[0]++;
  var selections = (cov_2mx2g0skd4().s[1]++, []);
  cov_2mx2g0skd4().s[2]++;

  if ((cov_2mx2g0skd4().b[1][0]++, quote) && (cov_2mx2g0skd4().b[1][1]++, verseObjects.length > 0)) {
    cov_2mx2g0skd4().b[0][0]++;
    var string = (cov_2mx2g0skd4().s[3]++, (0, _verseObjects.verseObjectsToString)(verseObjects));
    cov_2mx2g0skd4().s[4]++;
    selections = selectionsFromQuoteAndString({
      quote,
      string,
      occurrence
    });
  } else {
    cov_2mx2g0skd4().b[0][1]++;
  }

  cov_2mx2g0skd4().s[5]++;
  return selections;
};

exports.selectionsFromQuoteAndVerseObjects = selectionsFromQuoteAndVerseObjects;
cov_2mx2g0skd4().s[6]++;

var getPrecedingOccurrences = (_string, subquote) => {
  cov_2mx2g0skd4().f[1]++;
  var precedingTokens = (cov_2mx2g0skd4().s[7]++, tokenizer(_string));
  var precedingOccurrencesInPreviousString = (cov_2mx2g0skd4().s[8]++, precedingTokens.reduce(function (n, val) {
    cov_2mx2g0skd4().f[2]++;
    cov_2mx2g0skd4().s[9]++;
    return n + (val === subquote);
  }, 0));
  cov_2mx2g0skd4().s[10]++;
  return precedingOccurrencesInPreviousString;
};

exports.getPrecedingOccurrences = getPrecedingOccurrences;
cov_2mx2g0skd4().s[11]++;

var selectionsFromQuoteAndString = ({
  quote,
  string: rawString,
  occurrence
}) => {
  cov_2mx2g0skd4().f[3]++;
  var string = (cov_2mx2g0skd4().s[12]++, normalizeString(rawString)); // Calculate hasEllipsis before normalizing quote.

  var subquotes = (cov_2mx2g0skd4().s[13]++, quote.split('…').map(normalizeString));
  var selections = (cov_2mx2g0skd4().s[14]++, []);
  var hasEllipsis = (cov_2mx2g0skd4().s[15]++, subquotes.length > 1);
  cov_2mx2g0skd4().s[16]++;
  quote = normalizeString(quote);
  cov_2mx2g0skd4().s[17]++;

  if ((cov_2mx2g0skd4().b[3][0]++, hasEllipsis) && (cov_2mx2g0skd4().b[3][1]++, occurrence === -1)) {
    cov_2mx2g0skd4().b[2][0]++;
    cov_2mx2g0skd4().s[18]++;
    return [];
  } else {
    cov_2mx2g0skd4().b[2][1]++;
  }

  cov_2mx2g0skd4().s[19]++;

  if ((cov_2mx2g0skd4().b[5][0]++, occurrence === -1) && (cov_2mx2g0skd4().b[5][1]++, subquotes.length === 1)) {
    cov_2mx2g0skd4().b[4][0]++;

    var _occurrences = (cov_2mx2g0skd4().s[20]++, occurrencesInString(string, quote));

    cov_2mx2g0skd4().s[21]++;
    subquotes = new Array(_occurrences).fill(quote);
  } else {
    cov_2mx2g0skd4().b[4][1]++;
  }

  var precedingOccurrences = (cov_2mx2g0skd4().s[22]++, 0);
  var precedingText = (cov_2mx2g0skd4().s[23]++, '');
  cov_2mx2g0skd4().s[24]++;
  subquotes.forEach((subquote, index) => {
    cov_2mx2g0skd4().f[4]++;
    cov_2mx2g0skd4().s[25]++;
    precedingOccurrences = getPrecedingOccurrences(precedingText, subquote);
    var currentOccurrence = (cov_2mx2g0skd4().s[26]++, getCurrentOccurrenceFromPrecedingText(occurrence, index, precedingOccurrences));
    cov_2mx2g0skd4().s[27]++;
    precedingText = getPrecedingText(string, subquote, currentOccurrence, index);
    var subSelections = (cov_2mx2g0skd4().s[28]++, subSelectionsFromSubquote({
      subquote,
      index,
      precedingText,
      string
    }));
    cov_2mx2g0skd4().s[29]++;
    subSelections.forEach(subSelection => {
      cov_2mx2g0skd4().f[5]++;
      cov_2mx2g0skd4().s[30]++;
      return selections.push(subSelection);
    });
    /** Adding the previous subquote to account for repeated ellipsis words i.e. Θεοῦ…Θεοῦ */

    cov_2mx2g0skd4().s[31]++;
    precedingText += subquote;
  });
  cov_2mx2g0skd4().s[32]++;
  return selections;
};
/**
 * This function gets the correct amount of occurrences to provide the function getPrecedingText
 *
 * @param {number} occurrence - The occurrence of the subquote in the string
 * @param {number} index - The current index of the subquotes
 * @param {number} precedingOccurrences - The number of occurrences before the current subquote in the string
 */


exports.selectionsFromQuoteAndString = selectionsFromQuoteAndString;
cov_2mx2g0skd4().s[33]++;

var getCurrentOccurrenceFromPrecedingText = (occurrence, index, precedingOccurrences) => {
  cov_2mx2g0skd4().f[6]++;
  cov_2mx2g0skd4().s[34]++;

  if ((cov_2mx2g0skd4().b[7][0]++, occurrence === -1) || (cov_2mx2g0skd4().b[7][1]++, index === 0)) {
    cov_2mx2g0skd4().b[6][0]++;
    cov_2mx2g0skd4().s[35]++;
    return occurrence;
  } else {
    cov_2mx2g0skd4().b[6][1]++;
    cov_2mx2g0skd4().s[36]++;
    return precedingOccurrences + 1;
  }
};
/**
 * This function will return the text in between
 * to ellipsis (inclusive of the container words) given the occurrence
 *
 * @param {string} _string - The string to search
 * @param {*} quote - The substring which contains an ellipsis to search for
 * @param {*} occurrence - The occurrence of the quote to search for
 */


exports.getCurrentOccurrenceFromPrecedingText = getCurrentOccurrenceFromPrecedingText;
cov_2mx2g0skd4().s[37]++;

var getStringFromEllipsis = (_string, quote, occurrence) => {
  cov_2mx2g0skd4().f[7]++;

  var _ref = (cov_2mx2g0skd4().s[38]++, quote.split('…')),
      _ref2 = _slicedToArray(_ref, 2),
      lower = _ref2[0],
      upper = _ref2[1];

  var reg = (cov_2mx2g0skd4().s[39]++, new RegExp('(?:.*?' + lower + '.*' + upper + "){".concat(occurrence - 1, "}.*?(") + lower + '.*' + upper + ').*'));
  var string = (cov_2mx2g0skd4().s[40]++, _string.slice(0));
  var matches = (cov_2mx2g0skd4().s[41]++, (cov_2mx2g0skd4().b[8][0]++, string.match(reg)) || (cov_2mx2g0skd4().b[8][1]++, []));
  cov_2mx2g0skd4().s[42]++;
  return matches[1];
};
/**
 *
 * @param {string} _string - The entire string to use to find the preceding text
 * @param {string} subquote - The subquote to find the preceding text of
 * @param {number} occurrence - The occurrence of the string in the entire string
 * @param {number} index - The index of the subquote
 */


exports.getStringFromEllipsis = getStringFromEllipsis;
cov_2mx2g0skd4().s[43]++;

var getPrecedingText = (_string, subquote, occurrence, index = (cov_2mx2g0skd4().b[9][0]++, 0)) => {
  cov_2mx2g0skd4().f[8]++;
  var string = (cov_2mx2g0skd4().s[44]++, _string.slice(0));
  var splitString = (cov_2mx2g0skd4().s[45]++, string.split(subquote));
  cov_2mx2g0skd4().s[46]++;

  if (occurrence === -1) {
    cov_2mx2g0skd4().b[10][0]++;
    cov_2mx2g0skd4().s[47]++;
    //Need every occurrence of the subquote
    //Using the index instead of the occurrence
    return splitString.slice(0, index + 1).join(subquote);
  } else {
    cov_2mx2g0skd4().b[10][1]++;
    cov_2mx2g0skd4().s[48]++;
    //Return the subquote at the specified occurrence
    //of the entire string
    return splitString.slice(0, occurrence).join(subquote);
  }
};

exports.getPrecedingText = getPrecedingText;
cov_2mx2g0skd4().s[49]++;

var subSelectionsFromSubquote = ({
  subquote,
  precedingText: _precedingText,
  string
}) => {
  cov_2mx2g0skd4().f[9]++;
  //Splitting by tokenization here causes issues because we are still
  //comparing those characters at this level
  var selectedTokens = (cov_2mx2g0skd4().s[50]++, subquote.split(' '));
  var subSelections = (cov_2mx2g0skd4().s[51]++, []);
  cov_2mx2g0skd4().s[52]++;
  selectedTokens.forEach(_selectedText => {
    cov_2mx2g0skd4().f[10]++;
    //Adding the preceding text from the subSelections to ensure that
    //Repeated words are accounted for
    var precedingTextInSubselections = (cov_2mx2g0skd4().s[53]++, subSelections.map(({
      text
    }) => {
      cov_2mx2g0skd4().f[11]++;
      cov_2mx2g0skd4().s[54]++;
      return text;
    }).join(' '));
    var subSelection = (cov_2mx2g0skd4().s[55]++, generateSelection({
      selectedText: _selectedText,
      precedingText: _precedingText + precedingTextInSubselections,
      entireText: string,
      subSelections
    }));
    cov_2mx2g0skd4().s[56]++;
    subSelections.push(subSelection);
  });
  cov_2mx2g0skd4().s[57]++;
  return subSelections;
};
/**
 * Most everything below this is borrowed and adapted from
 * https://github.com/unfoldingWord/selections/blob/master/src/js/selections.js
 * and
 * https://github.com/unfoldingWord/tc-strings/blob/master/src/js/strings.js
 */

/**
 * @description - generates a selection object from the selected text, precedingText and whole text
 * @param {String} selectedText - the text that is selected
 * @param {String} precedingText - the text that prescedes the selection
 * @param {String} entireText - the text that the selection should be in
 * @return {Object} - the selection object to be used
 */


exports.subSelectionsFromSubquote = subSelectionsFromSubquote;
cov_2mx2g0skd4().s[58]++;

var generateSelection = ({
  selectedText,
  precedingText,
  entireText
}) => {
  cov_2mx2g0skd4().f[12]++;

  // replace more than one contiguous space with a single one since HTML/selection only renders 1
  var _entireText = (cov_2mx2g0skd4().s[59]++, normalizeString(entireText)); // Getting the occurrences before the current token


  var precedingTokens = (cov_2mx2g0skd4().s[60]++, tokenizer(precedingText));
  var precedingOccurrencesInPreviousString = (cov_2mx2g0skd4().s[61]++, precedingTokens.reduce(function (n, val) {
    cov_2mx2g0skd4().f[13]++;
    cov_2mx2g0skd4().s[62]++;
    return n + (val === selectedText);
  }, 0)); // calculate this occurrence number by adding it to the preceding ones

  var occurrence = (cov_2mx2g0skd4().s[63]++, precedingOccurrencesInPreviousString + 1); // get the total occurrences from the verse

  var allTokens = (cov_2mx2g0skd4().s[64]++, tokenizer(_entireText));
  var allOccurrences = (cov_2mx2g0skd4().s[65]++, allTokens.reduce(function (n, val) {
    cov_2mx2g0skd4().f[14]++;
    cov_2mx2g0skd4().s[66]++;
    return n + (val === selectedText);
  }, 0));
  cov_2mx2g0skd4().s[67]++;
  return {
    text: selectedText,
    occurrence: occurrence,
    occurrences: allOccurrences
  };
};
/**
 * @description - Splice string into array of ranges, flagging what is selected
 * @param {array} ranges - array of ranges [[int,int],...]
 * @returns {array} - array of objects [obj,...]
 */


exports.generateSelection = generateSelection;
cov_2mx2g0skd4().s[68]++;

var spliceStringOnRanges = (string, ranges) => {
  cov_2mx2g0skd4().f[15]++;
  var selectionArray = (cov_2mx2g0skd4().s[69]++, []); // response

  var remainingString = (cov_2mx2g0skd4().s[70]++, string); // shift the range since the loop is destructive by working on the remainingString and not original string

  var rangeShift = (cov_2mx2g0skd4().s[71]++, 0); // start the range shift at the first character

  cov_2mx2g0skd4().s[72]++;
  ranges.forEach(function (range) {
    cov_2mx2g0skd4().f[16]++;
    var firstCharacterPosition = (cov_2mx2g0skd4().s[73]++, range[0] - rangeShift); // original range start - the rangeShift

    var beforeSelection = (cov_2mx2g0skd4().s[74]++, remainingString.slice(0, firstCharacterPosition)); // save all the text before the selection

    cov_2mx2g0skd4().s[75]++;

    if (beforeSelection) {
      cov_2mx2g0skd4().b[11][0]++;
      cov_2mx2g0skd4().s[76]++;
      // only add to the array if string isn't empty
      selectionArray.push({
        text: beforeSelection,
        selected: false
      });
    } else {
      cov_2mx2g0skd4().b[11][1]++;
    }

    var shiftedRangeStart = (cov_2mx2g0skd4().s[77]++, range[0] - rangeShift); // range start - the rangeShift

    var shiftedRangeEnd = (cov_2mx2g0skd4().s[78]++, range[1] + 1 - rangeShift); // range end - rangeShift + 1 to include last character

    var selection = (cov_2mx2g0skd4().s[79]++, remainingString.slice(shiftedRangeStart, shiftedRangeEnd)); // save the text in the selection

    var stringBeforeRange = (cov_2mx2g0skd4().s[80]++, string.slice(0, range[0]));
    var occurrence = (cov_2mx2g0skd4().s[81]++, occurrencesInString(stringBeforeRange, selection) + 1);
    var occurrences = (cov_2mx2g0skd4().s[82]++, occurrencesInString(string, selection));
    var selectionObject = (cov_2mx2g0skd4().s[83]++, {
      text: selection,
      selected: true,
      occurrence: occurrence,
      occurrences: occurrences
    });
    cov_2mx2g0skd4().s[84]++;
    selectionArray.push(selectionObject); // add the selection to the response array
    // next iteration is using remaining string

    var lastCharacterPosition = (cov_2mx2g0skd4().s[85]++, range[1] - rangeShift + 1); // original range end position - the rangeShift + 1 to not include the last range character in the remaining string

    cov_2mx2g0skd4().s[86]++;
    remainingString = remainingString.slice(lastCharacterPosition); // update the remainingString to after the range
    // shift the range up to last char of substring (before+sub)

    cov_2mx2g0skd4().s[87]++;
    rangeShift += beforeSelection.length; // adjust the rangeShift by the length prior to the selection

    cov_2mx2g0skd4().s[88]++;
    rangeShift += selection.length; // adjust the rangeShift by the length of the selection itself
  });
  cov_2mx2g0skd4().s[89]++;

  if (remainingString) {
    cov_2mx2g0skd4().b[12][0]++;
    cov_2mx2g0skd4().s[90]++;
    // only add to the array if string isn't empty
    selectionArray.push({
      text: remainingString,
      selected: false
    });
  } else {
    cov_2mx2g0skd4().b[12][1]++;
  }

  cov_2mx2g0skd4().s[91]++;
  return selectionArray;
};
/**
 * @description - This converts ranges to array of selection objects
 * @param {string} string - text used to get the ranges of
 * @param {array} selections - array of selections [obj,...]
 * @returns {array} - array of range objects
 */


exports.spliceStringOnRanges = spliceStringOnRanges;
cov_2mx2g0skd4().s[92]++;

var selectionsToRanges = (string, selections) => {
  cov_2mx2g0skd4().f[17]++;
  var ranges = (cov_2mx2g0skd4().s[93]++, []); // response

  cov_2mx2g0skd4().s[94]++;
  selections.forEach(selection => {
    cov_2mx2g0skd4().f[18]++;
    cov_2mx2g0skd4().s[95]++;

    if ((cov_2mx2g0skd4().b[14][0]++, string) && (cov_2mx2g0skd4().b[14][1]++, string.includes(selection.text))) {
      cov_2mx2g0skd4().b[13][0]++;
      // conditions to prevent errors
      var splitArray = (cov_2mx2g0skd4().s[96]++, string.split(selection.text)); // split the string to get the text between occurrences

      var beforeSelection = (cov_2mx2g0skd4().s[97]++, splitArray.slice(0, selection.occurrence).join(selection.text)); // get the text before the selection to handle multiple occurrences

      var start = (cov_2mx2g0skd4().s[98]++, beforeSelection.length); // the start position happens at the length of the string that comes before it

      var end = (cov_2mx2g0skd4().s[99]++, start + selection.text.length - 1); // the end position happens at the end of the selection text, but length doesn't account for 0 based position start

      var range = (cov_2mx2g0skd4().s[100]++, [start, end]); // new range

      cov_2mx2g0skd4().s[101]++;
      ranges.push(range); // add the new range
    } else {
      cov_2mx2g0skd4().b[13][1]++;
    }
  });
  cov_2mx2g0skd4().s[102]++;
  return ranges;
};
/**
 * @description - Splice string into array of substrings, flagging what is selected
 * @param {string} string - text used to get the ranges of
 * @param {array} selections - array of selections [obj,...]
 * @returns {array} - array of objects
 */


exports.selectionsToRanges = selectionsToRanges;
cov_2mx2g0skd4().s[103]++;

var selectionsToStringSplices = (string, selections) => {
  cov_2mx2g0skd4().f[19]++;
  var splicedStringArray = (cov_2mx2g0skd4().s[104]++, []); // response

  cov_2mx2g0skd4().s[105]++;
  selections = optimizeSelections(string, selections); // optimize them before converting

  var ranges = (cov_2mx2g0skd4().s[106]++, selectionsToRanges(string, selections)); // convert the selections to ranges

  cov_2mx2g0skd4().s[107]++;
  splicedStringArray = spliceStringOnRanges(string, ranges); // splice the string on the ranges

  cov_2mx2g0skd4().s[108]++;
  return splicedStringArray; // return the spliced string
};
/**
 * @description - This abstracts complex handling of ranges such as order, deduping, concatenating, overlaps
 * @param {array}  ranges - array of ranges [[int,int],...]
 * @returns {array} - array of optimized ranges [[int,int],...]
 */


exports.selectionsToStringSplices = selectionsToStringSplices;
cov_2mx2g0skd4().s[109]++;

var optimizeRanges = ranges => {
  cov_2mx2g0skd4().f[20]++;
  var optimizedRanges = (cov_2mx2g0skd4().s[110]++, []); // response

  cov_2mx2g0skd4().s[111]++;

  if (ranges.length === 1) {
    cov_2mx2g0skd4().b[15][0]++;
    cov_2mx2g0skd4().s[112]++;
    return ranges;
  } else {
    cov_2mx2g0skd4().b[15][1]++;
  } // if there's only one, return it


  cov_2mx2g0skd4().s[113]++;
  ranges = _lodash.default.sortBy(ranges, range => {
    cov_2mx2g0skd4().f[21]++;
    cov_2mx2g0skd4().s[114]++;
    return range[1];
  }); // order ranges by end char index as secondary

  cov_2mx2g0skd4().s[115]++;
  ranges = _lodash.default.sortBy(ranges, range => {
    cov_2mx2g0skd4().f[22]++;
    cov_2mx2g0skd4().s[116]++;
    return range[0];
  }); // order ranges by start char index as primary

  cov_2mx2g0skd4().s[117]++;
  ranges = _lodash.default.uniq(ranges); // remove duplicates
  // combine overlapping and contiguous ranges

  var runningRange = (cov_2mx2g0skd4().s[118]++, []); // the running range to merge overlapping and contiguous ranges

  cov_2mx2g0skd4().s[119]++;
  ranges.forEach((currentRange, index) => {
    cov_2mx2g0skd4().f[23]++;
    var currentStart = (cov_2mx2g0skd4().s[120]++, currentRange[0]);
    var currentEnd = (cov_2mx2g0skd4().s[121]++, currentRange[1]);
    var runningStart = (cov_2mx2g0skd4().s[122]++, runningRange[0]);
    var runningEnd = (cov_2mx2g0skd4().s[123]++, runningRange[1]);
    cov_2mx2g0skd4().s[124]++;

    if ((cov_2mx2g0skd4().b[17][0]++, currentStart >= runningStart) && (cov_2mx2g0skd4().b[17][1]++, currentStart <= runningEnd + 1)) {
      cov_2mx2g0skd4().b[16][0]++;
      cov_2mx2g0skd4().s[125]++;

      // the start occurs in the running range and +1 handles contiguous
      if ((cov_2mx2g0skd4().b[19][0]++, currentEnd >= runningStart) && (cov_2mx2g0skd4().b[19][1]++, currentEnd <= runningEnd)) {// if the start occurs inside running range then let's check the end
        // if the end occurs inside the running range then it's inside it and doesn't matter

        cov_2mx2g0skd4().b[18][0]++;
      } else {
        cov_2mx2g0skd4().b[18][1]++;
        cov_2mx2g0skd4().s[126]++;
        // the end doesn't occur inside the running range
        runningRange[1] = runningEnd = currentEnd; // extend running range
      }
    } else {
      cov_2mx2g0skd4().b[16][1]++;
      cov_2mx2g0skd4().s[127]++;

      // the start does not occur in the running range
      if (runningRange.length !== 0) {
        cov_2mx2g0skd4().b[20][0]++;
        cov_2mx2g0skd4().s[128]++;
        optimizedRanges.push(runningRange);
      } else {
        cov_2mx2g0skd4().b[20][1]++;
      } // the running range is closed push it to optimizedRanges


      cov_2mx2g0skd4().s[129]++;
      runningRange = currentRange; // reset the running range to this one
    }

    cov_2mx2g0skd4().s[130]++;

    if ((cov_2mx2g0skd4().b[22][0]++, ranges.length === index + 1) && (cov_2mx2g0skd4().b[22][1]++, runningEnd - runningStart >= 0)) {
      cov_2mx2g0skd4().b[21][0]++;
      cov_2mx2g0skd4().s[131]++;
      // this is the last one and it isn't blank
      optimizedRanges.push(runningRange); // push the last one to optimizedRanges
    } else {
      cov_2mx2g0skd4().b[21][1]++;
    }
  });
  cov_2mx2g0skd4().s[132]++;
  return optimizedRanges;
};
/**
 * Splice string into array of substrings, flagging what is selected
 * @param {string} string - text used to get the ranges of
 * @param {array} selections - array of selections [obj,...]
 * @return {array} - array of objects
 */


exports.optimizeRanges = optimizeRanges;
cov_2mx2g0skd4().s[133]++;

var selectionArray = (string, selections) => {
  cov_2mx2g0skd4().f[24]++;
  var selectionArray = (cov_2mx2g0skd4().s[134]++, []);
  var ranges = (cov_2mx2g0skd4().s[135]++, module.exports.selectionsToRanges(string, selections));
  cov_2mx2g0skd4().s[136]++;
  selectionArray = module.exports.spliceStringOnRanges(string, ranges);
  cov_2mx2g0skd4().s[137]++;
  return selectionArray;
}; //
// Use the following lines to test the previous function
// let string = "01 234 56789qwertyuiopasdfghjklzxcvbnmtyui01 234 567890"
// let selections = [
//   { text: '234', occurrence: 2, occurrences: 2 },
// ]
// console.log(module.exports.selectionArray(string, selections))

/**
 * @description - This converts ranges to array of selection objects
 * @param {string} string - text used to get the ranges of
 * @param {array} ranges - array of ranges [[int,int],...]
 * @return {array} - array of selection objects
 */


exports.selectionArray = selectionArray;
cov_2mx2g0skd4().s[138]++;

var rangesToSelections = (string, ranges) => {
  cov_2mx2g0skd4().f[25]++;
  var selections = (cov_2mx2g0skd4().s[139]++, []);
  cov_2mx2g0skd4().s[140]++;
  ranges.forEach(range => {
    cov_2mx2g0skd4().f[26]++;
    var start = (cov_2mx2g0skd4().s[141]++, range[0]); // set the start point

    var end = (cov_2mx2g0skd4().s[142]++, range[1]); // set the end point

    var length = (cov_2mx2g0skd4().s[143]++, end - start + 1); // get the length of the sub string

    var subString = (cov_2mx2g0skd4().s[144]++, string.substr(start, length)); // get text of the sub string

    var beforeText = (cov_2mx2g0skd4().s[145]++, string.substr(0, start)); // get the string prior to the range

    var beforeMatches = (cov_2mx2g0skd4().s[146]++, occurrencesInString(beforeText, subString)); // get occurrences prior to range

    var occurrence = (cov_2mx2g0skd4().s[147]++, beforeMatches + 1); // get number of this occurrence

    var occurrences = (cov_2mx2g0skd4().s[148]++, occurrencesInString(string, subString)); // get occurrences in string

    var selection = (cov_2mx2g0skd4().s[149]++, {
      text: subString,
      occurrence: occurrence,
      occurrences: occurrences
    });
    cov_2mx2g0skd4().s[150]++;

    if (occurrences > 0) {
      cov_2mx2g0skd4().b[23][0]++;
      cov_2mx2g0skd4().s[151]++;
      // there are some edge cases where empty strings get through but don't have occurrences
      selections.push(selection);
    } else {
      cov_2mx2g0skd4().b[23][1]++;
    }
  });
  cov_2mx2g0skd4().s[152]++;
  return selections;
};
/**
 * @description - This abstracts complex handling of selections such as order, deduping, concatenating, overlapping ranges
 * @param {string} string - the text selections are found in
 * @param {array}  selections - array of selection objects [Obj,...]
 * @returns {array} - array of selection objects
 */


exports.rangesToSelections = rangesToSelections;
cov_2mx2g0skd4().s[153]++;

var optimizeSelections = (string, selections) => {
  cov_2mx2g0skd4().f[27]++;
  var optimizedSelections; // return
  // filter out the random clicks from the UI

  cov_2mx2g0skd4().s[154]++;
  selections = selections.filter(selection => {
    cov_2mx2g0skd4().f[28]++;
    var blankSelection = (cov_2mx2g0skd4().s[155]++, {
      text: '',
      occurrence: 1,
      occurrences: 0
    });
    cov_2mx2g0skd4().s[156]++;
    return !(0, _deepEqual.default)(selection, blankSelection);
  });
  var ranges = (cov_2mx2g0skd4().s[157]++, selectionsToRanges(string, selections)); // get char ranges of each selection

  cov_2mx2g0skd4().s[158]++;
  ranges = optimizeRanges(ranges); // optimize the ranges

  cov_2mx2g0skd4().s[159]++;
  optimizedSelections = rangesToSelections(string, ranges); // convert optimized ranges into selections

  cov_2mx2g0skd4().s[160]++;
  return optimizedSelections;
};
/**
 * @description - Removes a selection if found in the array of selections
 * @param {Object} selection - the selection to remove
 * @param {Array}  selections - array of selection objects [Obj,...]
 * @param {string} string - the text selections are found in
 * @returns {Array} - array of selection objects
 */


exports.optimizeSelections = optimizeSelections;
cov_2mx2g0skd4().s[161]++;

var removeSelectionFromSelections = (selection, selections, string) => {
  cov_2mx2g0skd4().f[29]++;
  cov_2mx2g0skd4().s[162]++;
  selections = Array.from(selections);
  cov_2mx2g0skd4().s[163]++;
  selections = selections.filter(_selection => {
    cov_2mx2g0skd4().f[30]++;
    cov_2mx2g0skd4().s[164]++;
    return !((cov_2mx2g0skd4().b[24][0]++, _selection.occurrence === selection.occurrence) && (cov_2mx2g0skd4().b[24][1]++, _selection.text === selection.text));
  });
  cov_2mx2g0skd4().s[165]++;
  selections = optimizeSelections(string, selections);
  cov_2mx2g0skd4().s[166]++;
  return selections;
};
/**
 * @description - Removes a selection if found in the array of selections
 * @param {Object} selection - the selection to remove
 * @param {Array}  selections - array of selection objects [Obj,...]
 * @param {string} string - the text selections are found in
 * @returns {Array} - array of selection objects
 */


exports.removeSelectionFromSelections = removeSelectionFromSelections;
cov_2mx2g0skd4().s[167]++;

var addSelectionToSelections = (selection, selections, string) => {
  cov_2mx2g0skd4().f[31]++;
  cov_2mx2g0skd4().s[168]++;
  selections = Array.from(selections);
  cov_2mx2g0skd4().s[169]++;
  selections.push(selection);
  cov_2mx2g0skd4().s[170]++;
  selections = optimizeSelections(string, selections);
  cov_2mx2g0skd4().s[171]++;
  return selections;
};
/**
 *
 * @param {string} string - Entire string to search within 'Blessed be the name of the Lord'
 * @param {string} subString - substring to search for inside of entire string i.e. 'bless, blessed, blessing'
 * @return {number}
 */


exports.addSelectionToSelections = addSelectionToSelections;
cov_2mx2g0skd4().s[172]++;

var getQuoteOccurrencesInVerse = (string, subString) => {
  cov_2mx2g0skd4().f[32]++;
  var n = (cov_2mx2g0skd4().s[173]++, 0);
  cov_2mx2g0skd4().s[174]++;

  if (subString.length <= 0) {
    cov_2mx2g0skd4().b[25][0]++;
    cov_2mx2g0skd4().s[175]++;
    return 0;
  } else {
    cov_2mx2g0skd4().b[25][1]++;
  }

  cov_2mx2g0skd4().s[176]++;

  if (subString.split(',').length > 1) {
    cov_2mx2g0skd4().b[26][0]++;
    var stringArray = (cov_2mx2g0skd4().s[177]++, subString.split(','));
    cov_2mx2g0skd4().s[178]++;
    stringArray.forEach(element => {
      cov_2mx2g0skd4().f[33]++;
      cov_2mx2g0skd4().s[179]++;
      n += getQuoteOccurrencesInVerse(string, element.trim());
    });
    cov_2mx2g0skd4().s[180]++;
    return n;
  } else {
    cov_2mx2g0skd4().b[26][1]++;
  }

  cov_2mx2g0skd4().s[181]++;

  if (subString.includes('...')) {
    cov_2mx2g0skd4().b[27][0]++;
    cov_2mx2g0skd4().s[182]++;
    subString = subString.replace('...', '.*');
  } else {
    cov_2mx2g0skd4().b[27][1]++;
  }

  var regex = (cov_2mx2g0skd4().s[183]++, new RegExp("\\W+".concat(subString, "\\W+"), 'g'));
  var matchedSubstring;
  cov_2mx2g0skd4().s[184]++;

  while ((matchedSubstring = regex.exec(string)) !== null) {
    cov_2mx2g0skd4().s[185]++;

    // This is necessary to avoid infinite loops with zero-width matchedSubstring
    if (matchedSubstring.index === regex.lastIndex) {
      cov_2mx2g0skd4().b[28][0]++;
      cov_2mx2g0skd4().s[186]++;
      regex.lastIndex++;
    } else {
      cov_2mx2g0skd4().b[28][1]++;
    }

    cov_2mx2g0skd4().s[187]++;
    n++;
  }

  cov_2mx2g0skd4().s[188]++;
  return n;
};
/**
 * @description Function that count occurrences of a substring in a string
 * @param {String} string - The string to search in
 * @param {String} subString - The sub string to search for
 * @return {Integer} - the count of the occurrences
 * @see http://stackoverflow.com/questions/4009756/how-to-count-string-occurrence-in-string/7924240#7924240
 * modified to fit our use cases, return zero for '' substring, and no use case for overlapping.
 */


exports.getQuoteOccurrencesInVerse = getQuoteOccurrencesInVerse;
cov_2mx2g0skd4().s[189]++;

var occurrences = (string, subString) => {
  cov_2mx2g0skd4().f[34]++;
  cov_2mx2g0skd4().s[190]++;

  if (subString.length <= 0) {
    cov_2mx2g0skd4().b[29][0]++;
    cov_2mx2g0skd4().s[191]++;
    return 0;
  } else {
    cov_2mx2g0skd4().b[29][1]++;
  }

  var n = (cov_2mx2g0skd4().s[192]++, 0);
  var pos = (cov_2mx2g0skd4().s[193]++, 0);
  var step = (cov_2mx2g0skd4().s[194]++, subString.length); // eslint-disable-next-line no-constant-condition

  cov_2mx2g0skd4().s[195]++;

  while (true) {
    cov_2mx2g0skd4().s[196]++;
    pos = string.indexOf(subString, pos);
    cov_2mx2g0skd4().s[197]++;

    if (pos === -1) {
      cov_2mx2g0skd4().b[30][0]++;
      cov_2mx2g0skd4().s[198]++;
      break;
    } else {
      cov_2mx2g0skd4().b[30][1]++;
    }

    cov_2mx2g0skd4().s[199]++;
    ++n;
    cov_2mx2g0skd4().s[200]++;
    pos += step;
  }

  cov_2mx2g0skd4().s[201]++;
  return n;
};
/**
 * @description This checks to see if the string still has the same number of occurrences.
 * It should remove the selections that the occurrences do not match
 * @param {string} string - the text selections are found in
 * @param {array}  selections - array of selection objects [Obj,...]
 * @returns {array} - array of selection objects
 */


exports.occurrences = occurrences;
cov_2mx2g0skd4().s[202]++;

var checkSelectionOccurrences = (string, selections) => {
  cov_2mx2g0skd4().f[35]++;
  cov_2mx2g0skd4().s[203]++;
  selections = selections.filter(selection => {
    cov_2mx2g0skd4().f[36]++;
    var count = (cov_2mx2g0skd4().s[204]++, occurrences(string, selection.text));
    cov_2mx2g0skd4().s[205]++;
    return count === selection.occurrences;
  });
  cov_2mx2g0skd4().s[206]++;
  return selections;
};
/**
 * @description Function that count occurrences of a substring in a string
 * @param {String} string - The string to search in
 * @param {String} subString - The sub string to search for
 * @return {Integer} - the count of the occurrences
 * @see http://stackoverflow.com/questions/4009756/how-to-count-string-occurrence-in-string/7924240#7924240
 * modified to fit our use cases, return zero for '' substring, and no use case for overlapping.
 */


exports.checkSelectionOccurrences = checkSelectionOccurrences;
cov_2mx2g0skd4().s[207]++;

var occurrencesInString = (string, subString) => {
  cov_2mx2g0skd4().f[37]++;
  cov_2mx2g0skd4().s[208]++;

  if (subString.length <= 0) {
    cov_2mx2g0skd4().b[31][0]++;
    cov_2mx2g0skd4().s[209]++;
    return 0;
  } else {
    cov_2mx2g0skd4().b[31][1]++;
  }

  var occurrences = (cov_2mx2g0skd4().s[210]++, 0);
  var position = (cov_2mx2g0skd4().s[211]++, 0);
  var step = (cov_2mx2g0skd4().s[212]++, subString.length);
  cov_2mx2g0skd4().s[213]++;

  while (position < string.length) {
    cov_2mx2g0skd4().s[214]++;
    position = string.indexOf(subString, position);
    cov_2mx2g0skd4().s[215]++;

    if (position === -1) {
      cov_2mx2g0skd4().b[32][0]++;
      cov_2mx2g0skd4().s[216]++;
      break;
    } else {
      cov_2mx2g0skd4().b[32][1]++;
    }

    cov_2mx2g0skd4().s[217]++;
    ++occurrences;
    cov_2mx2g0skd4().s[218]++;
    position += step;
  }

  cov_2mx2g0skd4().s[219]++;
  return occurrences;
};

exports.occurrencesInString = occurrencesInString;
cov_2mx2g0skd4().s[220]++;

var tokenizer = text => {
  cov_2mx2g0skd4().f[38]++;
  cov_2mx2g0skd4().s[221]++;
  return (0, _stringPunctuationTokenizer.tokenize)({
    text: text,
    greedy: true,
    normalize: true
  });
};

cov_2mx2g0skd4().s[222]++;

var normalizeString = string => {
  cov_2mx2g0skd4().f[39]++;
  var normalized = (cov_2mx2g0skd4().s[223]++, tokenizer(string).join(' '));
  cov_2mx2g0skd4().s[224]++;
  return normalized;
};

exports.normalizeString = normalizeString;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,