"use strict";

var _tokenizer = require("./tokenizer");

function cov_69ublkhns() {
  var path = "D:\\Projects-unfoldingWord\\scripture-resources-rcl\\src\\core\\selections\\tokenizer.spec.js";
  var hash = "d080347bbc95d46302d3e28d9170f37345591b9c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\Projects-unfoldingWord\\scripture-resources-rcl\\src\\core\\selections\\tokenizer.spec.js",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 35,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 16
        },
        end: {
          line: 6,
          column: 26
        }
      },
      "2": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 33
        }
      },
      "3": {
        start: {
          line: 8,
          column: 19
        },
        end: {
          line: 33,
          column: 3
        }
      },
      "4": {
        start: {
          line: 34,
          column: 2
        },
        end: {
          line: 34,
          column: 41
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 5,
            column: 28
          },
          end: {
            line: 5,
            column: 29
          }
        },
        loc: {
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 35,
            column: 1
          }
        },
        line: 5
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    f: {
      "0": 0
    },
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d080347bbc95d46302d3e28d9170f37345591b9c"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];

  cov_69ublkhns = function () {
    return actualCoverage;
  };

  return actualCoverage;
}

cov_69ublkhns();
cov_69ublkhns().s[0]++;
test('tokenizer tokenizes', () => {
  cov_69ublkhns().f[0]++;
  var input = (cov_69ublkhns().s[1]++, "ὁ λόγος,");
  var output = (cov_69ublkhns().s[2]++, (0, _tokenizer.tokenizer)(input));
  var expected = (cov_69ublkhns().s[3]++, [{
    "occurrence": 1,
    "occurrences": 1,
    "token": "ὁ",
    "type": "word"
  }, {
    "occurrence": 1,
    "occurrences": 1,
    "token": " ",
    "type": "whitespace"
  }, {
    "occurrence": 1,
    "occurrences": 1,
    "token": "λόγος",
    "type": "word"
  }, {
    "occurrence": 1,
    "occurrences": 1,
    "token": ",",
    "type": "punctuation"
  }]);
  cov_69ublkhns().s[4]++;
  expect(output).toStrictEqual(expected);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb3JlL3NlbGVjdGlvbnMvdG9rZW5pemVyLnNwZWMuanMiXSwibmFtZXMiOlsidGVzdCIsImlucHV0Iiwib3V0cHV0IiwiZXhwZWN0ZWQiLCJleHBlY3QiLCJ0b1N0cmljdEVxdWFsIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUlBQSxJQUFJLENBQUMscUJBQUQsRUFBd0IsTUFBTTtBQUFBO0FBQ2hDLE1BQU1DLEtBQUssNEJBQUcsVUFBSCxDQUFYO0FBQ0EsTUFBTUMsTUFBTSw0QkFBRywwQkFBVUQsS0FBVixDQUFILENBQVo7QUFDQSxNQUFNRSxRQUFRLDRCQUFHLENBQ2Y7QUFDRSxrQkFBYyxDQURoQjtBQUVFLG1CQUFlLENBRmpCO0FBR0UsYUFBUyxHQUhYO0FBSUUsWUFBUTtBQUpWLEdBRGUsRUFPZjtBQUNFLGtCQUFjLENBRGhCO0FBRUUsbUJBQWUsQ0FGakI7QUFHRSxhQUFTLEdBSFg7QUFJRSxZQUFRO0FBSlYsR0FQZSxFQWFmO0FBQ0Usa0JBQWMsQ0FEaEI7QUFFRSxtQkFBZSxDQUZqQjtBQUdFLGFBQVMsT0FIWDtBQUlFLFlBQVE7QUFKVixHQWJlLEVBbUJmO0FBQ0Usa0JBQWMsQ0FEaEI7QUFFRSxtQkFBZSxDQUZqQjtBQUdFLGFBQVMsR0FIWDtBQUlFLFlBQVE7QUFKVixHQW5CZSxDQUFILENBQWQ7QUFIZ0M7QUE2QmhDQyxFQUFBQSxNQUFNLENBQUNGLE1BQUQsQ0FBTixDQUFlRyxhQUFmLENBQTZCRixRQUE3QjtBQUNELENBOUJHLENBQUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIHRva2VuaXplcixcclxufSBmcm9tICcuL3Rva2VuaXplcic7XHJcblxyXG50ZXN0KCd0b2tlbml6ZXIgdG9rZW5pemVzJywgKCkgPT4ge1xyXG4gIGNvbnN0IGlucHV0ID0gXCLhvYEgzrvPjM6zzr/PgixcIjtcclxuICBjb25zdCBvdXRwdXQgPSB0b2tlbml6ZXIoaW5wdXQpO1xyXG4gIGNvbnN0IGV4cGVjdGVkID0gW1xyXG4gICAge1xyXG4gICAgICBcIm9jY3VycmVuY2VcIjogMSxcclxuICAgICAgXCJvY2N1cnJlbmNlc1wiOiAxLFxyXG4gICAgICBcInRva2VuXCI6IFwi4b2BXCIsXHJcbiAgICAgIFwidHlwZVwiOiBcIndvcmRcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwib2NjdXJyZW5jZVwiOiAxLFxyXG4gICAgICBcIm9jY3VycmVuY2VzXCI6IDEsXHJcbiAgICAgIFwidG9rZW5cIjogXCIgXCIsXHJcbiAgICAgIFwidHlwZVwiOiBcIndoaXRlc3BhY2VcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwib2NjdXJyZW5jZVwiOiAxLFxyXG4gICAgICBcIm9jY3VycmVuY2VzXCI6IDEsXHJcbiAgICAgIFwidG9rZW5cIjogXCLOu8+MzrPOv8+CXCIsXHJcbiAgICAgIFwidHlwZVwiOiBcIndvcmRcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwib2NjdXJyZW5jZVwiOiAxLFxyXG4gICAgICBcIm9jY3VycmVuY2VzXCI6IDEsXHJcbiAgICAgIFwidG9rZW5cIjogXCIsXCIsXHJcbiAgICAgIFwidHlwZVwiOiBcInB1bmN0dWF0aW9uXCIsXHJcbiAgICB9XHJcbiAgXTtcclxuICBleHBlY3Qob3V0cHV0KS50b1N0cmljdEVxdWFsKGV4cGVjdGVkKTtcclxufSk7Il19