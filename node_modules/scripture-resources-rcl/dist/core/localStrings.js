"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.localString = void 0;

function cov_2ra0bpy41() {
  var path = "D:\\Projects-unfoldingWord\\scripture-resources-rcl\\src\\core\\localStrings.js";
  var hash = "39f53daa6f20f5cee2e8d51d33ceab45b6c1b756";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\Projects-unfoldingWord\\scripture-resources-rcl\\src\\core\\localStrings.js",
    statementMap: {
      "0": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 39,
          column: 1
        }
      },
      "1": {
        start: {
          line: 41,
          column: 27
        },
        end: {
          line: 58,
          column: 1
        }
      },
      "2": {
        start: {
          line: 42,
          column: 13
        },
        end: {
          line: 42,
          column: 47
        }
      },
      "3": {
        start: {
          line: 44,
          column: 2
        },
        end: {
          line: 46,
          column: 3
        }
      },
      "4": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 45,
          column: 16
        }
      },
      "5": {
        start: {
          line: 48,
          column: 2
        },
        end: {
          line: 51,
          column: 3
        }
      },
      "6": {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 49,
          column: 16
        }
      },
      "7": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 50,
          column: 45
        }
      },
      "8": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 52,
          column: 33
        }
      },
      "9": {
        start: {
          line: 54,
          column: 2
        },
        end: {
          line: 56,
          column: 3
        }
      },
      "10": {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 55,
          column: 42
        }
      },
      "11": {
        start: {
          line: 57,
          column: 2
        },
        end: {
          line: 57,
          column: 17
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 41,
            column: 27
          },
          end: {
            line: 41,
            column: 28
          }
        },
        loc: {
          start: {
            line: 41,
            column: 35
          },
          end: {
            line: 58,
            column: 1
          }
        },
        line: 41
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 44,
            column: 2
          },
          end: {
            line: 46,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 2
          },
          end: {
            line: 46,
            column: 3
          }
        }, {
          start: {
            line: 44,
            column: 2
          },
          end: {
            line: 46,
            column: 3
          }
        }],
        line: 44
      },
      "1": {
        loc: {
          start: {
            line: 48,
            column: 2
          },
          end: {
            line: 51,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 2
          },
          end: {
            line: 51,
            column: 3
          }
        }, {
          start: {
            line: 48,
            column: 2
          },
          end: {
            line: 51,
            column: 3
          }
        }],
        line: 48
      },
      "2": {
        loc: {
          start: {
            line: 54,
            column: 2
          },
          end: {
            line: 56,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 2
          },
          end: {
            line: 56,
            column: 3
          }
        }, {
          start: {
            line: 54,
            column: 2
          },
          end: {
            line: 56,
            column: 3
          }
        }],
        line: 54
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "39f53daa6f20f5cee2e8d51d33ceab45b6c1b756"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];

  cov_2ra0bpy41 = function () {
    return actualCoverage;
  };

  return actualCoverage;
}

cov_2ra0bpy41();
//
// Translate strings into different languages
// Then use localString(id) to return the language specific string to use
//
// To use:
// 1. Import:
//    import { Tooltip } from '@material-ui/core';
//    import { localString } from '../../core/localStrings';
//
// 2. Update string ids as needed
// 3. Wrap button (if a tooltip):
// <Tooltip title={localString(iconTooltip)} arrow>
//   <Translate />
// </Tooltip>
// 4. -or- just call exported function, where a string is needed:
//
//    localString(stringid)
//
var strings = (cov_2ra0bpy41().s[0]++, {
  en: {
    //ViewVersions: 'View Versions',
    ManageVersions: 'Manage Versions',
    AddResource: 'Add Resource',
    AddResourceError: 'Error: Could not add the resource. Please check the URL.',
    ResourcePath: 'Resource Path',
    ExpandChapter: 'Expand Chapter',
    CollapseChapter: 'Collapse Chapter',
    ViewLicense: 'View License',
    ExpandScripturePane: 'Expand Scripture Pane',
    CloseScripturePane: 'Close Scripture Pane',
    Remove: 'Remove',

    /* do not remove these two */
    StringMissing: 'String Id missing',
    LangNotSupported: 'Language not supported'
  },
  el: {
    StringMissing: 'λείπει το εργαλείο'
  }
});
cov_2ra0bpy41().s[1]++;

var localString = id => {
  cov_2ra0bpy41().f[0]++;
  var lang = (cov_2ra0bpy41().s[2]++, navigator.language.split(/-|_/)[0]); // if language is unknown (not sure this can actually happen)

  cov_2ra0bpy41().s[3]++;

  if (lang === undefined) {
    cov_2ra0bpy41().b[0][0]++;
    cov_2ra0bpy41().s[4]++;
    lang = 'en';
  } else {
    cov_2ra0bpy41().b[0][1]++;
  } // if there are no strings for the language


  cov_2ra0bpy41().s[5]++;

  if (strings[lang] === undefined) {
    cov_2ra0bpy41().b[1][0]++;
    cov_2ra0bpy41().s[6]++;
    lang = 'en';
    cov_2ra0bpy41().s[7]++;
    return strings[lang]['LangNotSupported'];
  } else {
    cov_2ra0bpy41().b[1][1]++;
  }

  var lstring = (cov_2ra0bpy41().s[8]++, strings[lang][id]); // if a string for the message id is missing

  cov_2ra0bpy41().s[9]++;

  if (lstring === undefined) {
    cov_2ra0bpy41().b[2][0]++;
    cov_2ra0bpy41().s[10]++;
    return strings[lang]['StringMissing'];
  } else {
    cov_2ra0bpy41().b[2][1]++;
  }

  cov_2ra0bpy41().s[11]++;
  return lstring;
};

exports.localString = localString;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb3JlL2xvY2FsU3RyaW5ncy5qcyJdLCJuYW1lcyI6WyJzdHJpbmdzIiwiZW4iLCJNYW5hZ2VWZXJzaW9ucyIsIkFkZFJlc291cmNlIiwiQWRkUmVzb3VyY2VFcnJvciIsIlJlc291cmNlUGF0aCIsIkV4cGFuZENoYXB0ZXIiLCJDb2xsYXBzZUNoYXB0ZXIiLCJWaWV3TGljZW5zZSIsIkV4cGFuZFNjcmlwdHVyZVBhbmUiLCJDbG9zZVNjcmlwdHVyZVBhbmUiLCJSZW1vdmUiLCJTdHJpbmdNaXNzaW5nIiwiTGFuZ05vdFN1cHBvcnRlZCIsImVsIiwibG9jYWxTdHJpbmciLCJpZCIsImxhbmciLCJuYXZpZ2F0b3IiLCJsYW5ndWFnZSIsInNwbGl0IiwidW5kZWZpbmVkIiwibHN0cmluZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQU1BLE9BQU8sNEJBQUc7QUFDZEMsRUFBQUEsRUFBRSxFQUFFO0FBQ0Y7QUFDQUMsSUFBQUEsY0FBYyxFQUFFLGlCQUZkO0FBR0ZDLElBQUFBLFdBQVcsRUFBRSxjQUhYO0FBSUZDLElBQUFBLGdCQUFnQixFQUFFLDBEQUpoQjtBQUtGQyxJQUFBQSxZQUFZLEVBQUUsZUFMWjtBQU1GQyxJQUFBQSxhQUFhLEVBQUUsZ0JBTmI7QUFPRkMsSUFBQUEsZUFBZSxFQUFFLGtCQVBmO0FBUUZDLElBQUFBLFdBQVcsRUFBRSxjQVJYO0FBU0ZDLElBQUFBLG1CQUFtQixFQUFFLHVCQVRuQjtBQVVGQyxJQUFBQSxrQkFBa0IsRUFBRSxzQkFWbEI7QUFXRkMsSUFBQUEsTUFBTSxFQUFFLFFBWE47O0FBWUY7QUFDQUMsSUFBQUEsYUFBYSxFQUFFLG1CQWJiO0FBY0ZDLElBQUFBLGdCQUFnQixFQUFFO0FBZGhCLEdBRFU7QUFpQmRDLEVBQUFBLEVBQUUsRUFBRTtBQUNGRixJQUFBQSxhQUFhLEVBQUU7QUFEYjtBQWpCVSxDQUFILENBQWI7OztBQXNCTyxJQUFNRyxXQUFXLEdBQUlDLEVBQUQsSUFBUTtBQUFBO0FBQ2pDLE1BQUlDLElBQUksNEJBQUdDLFNBQVMsQ0FBQ0MsUUFBVixDQUFtQkMsS0FBbkIsQ0FBeUIsS0FBekIsRUFBZ0MsQ0FBaEMsQ0FBSCxDQUFSLENBRGlDLENBRWpDOztBQUZpQzs7QUFHakMsTUFBSUgsSUFBSSxLQUFLSSxTQUFiLEVBQXdCO0FBQUE7QUFBQTtBQUN0QkosSUFBQUEsSUFBSSxHQUFHLElBQVA7QUFDRCxHQUZEO0FBQUE7QUFBQSxHQUhpQyxDQU1qQzs7O0FBTmlDOztBQU9qQyxNQUFJakIsT0FBTyxDQUFDaUIsSUFBRCxDQUFQLEtBQWtCSSxTQUF0QixFQUFpQztBQUFBO0FBQUE7QUFDL0JKLElBQUFBLElBQUksR0FBRyxJQUFQO0FBRCtCO0FBRS9CLFdBQU9qQixPQUFPLENBQUNpQixJQUFELENBQVAsQ0FBYyxrQkFBZCxDQUFQO0FBQ0QsR0FIRDtBQUFBO0FBQUE7O0FBSUEsTUFBSUssT0FBTyw0QkFBR3RCLE9BQU8sQ0FBQ2lCLElBQUQsQ0FBUCxDQUFjRCxFQUFkLENBQUgsQ0FBWCxDQVhpQyxDQVlqQzs7QUFaaUM7O0FBYWpDLE1BQUlNLE9BQU8sS0FBS0QsU0FBaEIsRUFBMkI7QUFBQTtBQUFBO0FBQ3pCLFdBQU9yQixPQUFPLENBQUNpQixJQUFELENBQVAsQ0FBYyxlQUFkLENBQVA7QUFDRCxHQUZEO0FBQUE7QUFBQTs7QUFiaUM7QUFnQmpDLFNBQU9LLE9BQVA7QUFDRCxDQWpCTSIsInNvdXJjZXNDb250ZW50IjpbIi8vXHJcbi8vIFRyYW5zbGF0ZSBzdHJpbmdzIGludG8gZGlmZmVyZW50IGxhbmd1YWdlc1xyXG4vLyBUaGVuIHVzZSBsb2NhbFN0cmluZyhpZCkgdG8gcmV0dXJuIHRoZSBsYW5ndWFnZSBzcGVjaWZpYyBzdHJpbmcgdG8gdXNlXHJcbi8vXHJcbi8vIFRvIHVzZTpcclxuLy8gMS4gSW1wb3J0OlxyXG4vLyAgICBpbXBvcnQgeyBUb29sdGlwIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUnO1xyXG4vLyAgICBpbXBvcnQgeyBsb2NhbFN0cmluZyB9IGZyb20gJy4uLy4uL2NvcmUvbG9jYWxTdHJpbmdzJztcclxuLy9cclxuLy8gMi4gVXBkYXRlIHN0cmluZyBpZHMgYXMgbmVlZGVkXHJcbi8vIDMuIFdyYXAgYnV0dG9uIChpZiBhIHRvb2x0aXApOlxyXG4vLyA8VG9vbHRpcCB0aXRsZT17bG9jYWxTdHJpbmcoaWNvblRvb2x0aXApfSBhcnJvdz5cclxuLy8gICA8VHJhbnNsYXRlIC8+XHJcbi8vIDwvVG9vbHRpcD5cclxuLy8gNC4gLW9yLSBqdXN0IGNhbGwgZXhwb3J0ZWQgZnVuY3Rpb24sIHdoZXJlIGEgc3RyaW5nIGlzIG5lZWRlZDpcclxuLy9cclxuLy8gICAgbG9jYWxTdHJpbmcoc3RyaW5naWQpXHJcbi8vXHJcbmNvbnN0IHN0cmluZ3MgPSB7XHJcbiAgZW46IHtcclxuICAgIC8vVmlld1ZlcnNpb25zOiAnVmlldyBWZXJzaW9ucycsXHJcbiAgICBNYW5hZ2VWZXJzaW9uczogJ01hbmFnZSBWZXJzaW9ucycsXHJcbiAgICBBZGRSZXNvdXJjZTogJ0FkZCBSZXNvdXJjZScsXHJcbiAgICBBZGRSZXNvdXJjZUVycm9yOiAnRXJyb3I6IENvdWxkIG5vdCBhZGQgdGhlIHJlc291cmNlLiBQbGVhc2UgY2hlY2sgdGhlIFVSTC4nLFxyXG4gICAgUmVzb3VyY2VQYXRoOiAnUmVzb3VyY2UgUGF0aCcsXHJcbiAgICBFeHBhbmRDaGFwdGVyOiAnRXhwYW5kIENoYXB0ZXInLFxyXG4gICAgQ29sbGFwc2VDaGFwdGVyOiAnQ29sbGFwc2UgQ2hhcHRlcicsXHJcbiAgICBWaWV3TGljZW5zZTogJ1ZpZXcgTGljZW5zZScsXHJcbiAgICBFeHBhbmRTY3JpcHR1cmVQYW5lOiAnRXhwYW5kIFNjcmlwdHVyZSBQYW5lJyxcclxuICAgIENsb3NlU2NyaXB0dXJlUGFuZTogJ0Nsb3NlIFNjcmlwdHVyZSBQYW5lJyxcclxuICAgIFJlbW92ZTogJ1JlbW92ZScsXHJcbiAgICAvKiBkbyBub3QgcmVtb3ZlIHRoZXNlIHR3byAqL1xyXG4gICAgU3RyaW5nTWlzc2luZzogJ1N0cmluZyBJZCBtaXNzaW5nJyxcclxuICAgIExhbmdOb3RTdXBwb3J0ZWQ6ICdMYW5ndWFnZSBub3Qgc3VwcG9ydGVkJyxcclxuICB9LFxyXG4gIGVsOiB7XHJcbiAgICBTdHJpbmdNaXNzaW5nOiAnzrvOtc6vz4DOtc65IM+Ezr8gzrXPgc6zzrHOu861zq/OvycsXHJcbiAgfSxcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBsb2NhbFN0cmluZyA9IChpZCkgPT4ge1xyXG4gIGxldCBsYW5nID0gbmF2aWdhdG9yLmxhbmd1YWdlLnNwbGl0KC8tfF8vKVswXTtcclxuICAvLyBpZiBsYW5ndWFnZSBpcyB1bmtub3duIChub3Qgc3VyZSB0aGlzIGNhbiBhY3R1YWxseSBoYXBwZW4pXHJcbiAgaWYgKGxhbmcgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgbGFuZyA9ICdlbic7XHJcbiAgfVxyXG4gIC8vIGlmIHRoZXJlIGFyZSBubyBzdHJpbmdzIGZvciB0aGUgbGFuZ3VhZ2VcclxuICBpZiAoc3RyaW5nc1tsYW5nXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICBsYW5nID0gJ2VuJztcclxuICAgIHJldHVybiBzdHJpbmdzW2xhbmddWydMYW5nTm90U3VwcG9ydGVkJ107XHJcbiAgfVxyXG4gIGxldCBsc3RyaW5nID0gc3RyaW5nc1tsYW5nXVtpZF07XHJcbiAgLy8gaWYgYSBzdHJpbmcgZm9yIHRoZSBtZXNzYWdlIGlkIGlzIG1pc3NpbmdcclxuICBpZiAobHN0cmluZyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICByZXR1cm4gc3RyaW5nc1tsYW5nXVsnU3RyaW5nTWlzc2luZyddO1xyXG4gIH1cclxuICByZXR1cm4gbHN0cmluZztcclxufTtcclxuIl19