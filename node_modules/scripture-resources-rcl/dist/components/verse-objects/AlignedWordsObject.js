"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styles = require("@material-ui/core/styles");

var _core = require("@material-ui/core");

var _Selections = require("../selections/Selections.context");

var _ = require(".");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function cov_280equv70u() {
  var path = "D:\\Projects-unfoldingWord\\scripture-resources-rcl\\src\\components\\verse-objects\\AlignedWordsObject.js";
  var hash = "980fd11493b39964ead116890d92b37f76291cae";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\Projects-unfoldingWord\\scripture-resources-rcl\\src\\components\\verse-objects\\AlignedWordsObject.js",
    statementMap: {
      "0": {
        start: {
          line: 11,
          column: 18
        },
        end: {
          line: 11,
          column: 29
        }
      },
      "1": {
        start: {
          line: 12,
          column: 34
        },
        end: {
          line: 12,
          column: 48
        }
      },
      "2": {
        start: {
          line: 14,
          column: 21
        },
        end: {
          line: 16,
          column: 3
        }
      },
      "3": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 15,
          column: 37
        }
      },
      "4": {
        start: {
          line: 18,
          column: 22
        },
        end: {
          line: 20,
          column: 3
        }
      },
      "5": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 19,
          column: 22
        }
      },
      "6": {
        start: {
          line: 25,
          column: 29
        },
        end: {
          line: 25,
          column: 58
        }
      },
      "7": {
        start: {
          line: 27,
          column: 2
        },
        end: {
          line: 33,
          column: 3
        }
      },
      "8": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 26
        }
      },
      "9": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 32,
          column: 42
        }
      },
      "10": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 47,
          column: 4
        }
      },
      "11": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 46,
          column: 11
        }
      },
      "12": {
        start: {
          line: 49,
          column: 18
        },
        end: {
          line: 49,
          column: 23
        }
      },
      "13": {
        start: {
          line: 51,
          column: 2
        },
        end: {
          line: 90,
          column: 3
        }
      },
      "14": {
        start: {
          line: 52,
          column: 17
        },
        end: {
          line: 52,
          column: 34
        }
      },
      "15": {
        start: {
          line: 53,
          column: 15
        },
        end: {
          line: 53,
          column: 43
        }
      },
      "16": {
        start: {
          line: 54,
          column: 27
        },
        end: {
          line: 56,
          column: 6
        }
      },
      "17": {
        start: {
          line: 55,
          column: 6
        },
        end: {
          line: 55,
          column: 66
        }
      },
      "18": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 89,
          column: 6
        }
      },
      "19": {
        start: {
          line: 92,
          column: 2
        },
        end: {
          line: 92,
          column: 26
        }
      },
      "20": {
        start: {
          line: 95,
          column: 0
        },
        end: {
          line: 100,
          column: 2
        }
      },
      "21": {
        start: {
          line: 102,
          column: 18
        },
        end: {
          line: 108,
          column: 3
        }
      },
      "22": {
        start: {
          line: 102,
          column: 41
        },
        end: {
          line: 108,
          column: 1
        }
      }
    },
    fnMap: {
      "0": {
        name: "AlignedWordsObject",
        decl: {
          start: {
            line: 10,
            column: 9
          },
          end: {
            line: 10,
            column: 27
          }
        },
        loc: {
          start: {
            line: 10,
            column: 77
          },
          end: {
            line: 93,
            column: 1
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 21
          },
          end: {
            line: 14,
            column: 22
          }
        },
        loc: {
          start: {
            line: 14,
            column: 32
          },
          end: {
            line: 16,
            column: 3
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 18,
            column: 22
          },
          end: {
            line: 18,
            column: 23
          }
        },
        loc: {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 20,
            column: 3
          }
        },
        line: 18
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 35,
            column: 29
          },
          end: {
            line: 35,
            column: 30
          }
        },
        loc: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 46,
            column: 11
          }
        },
        line: 36
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 54,
            column: 45
          },
          end: {
            line: 54,
            column: 46
          }
        },
        loc: {
          start: {
            line: 55,
            column: 6
          },
          end: {
            line: 55,
            column: 66
          }
        },
        line: 55
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 102,
            column: 29
          },
          end: {
            line: 102,
            column: 30
          }
        },
        loc: {
          start: {
            line: 102,
            column: 41
          },
          end: {
            line: 108,
            column: 1
          }
        },
        line: 102
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 27,
            column: 2
          },
          end: {
            line: 33,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 2
          },
          end: {
            line: 33,
            column: 3
          }
        }, {
          start: {
            line: 27,
            column: 2
          },
          end: {
            line: 33,
            column: 3
          }
        }],
        line: 27
      },
      "1": {
        loc: {
          start: {
            line: 40,
            column: 17
          },
          end: {
            line: 40,
            column: 56
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 40,
            column: 28
          },
          end: {
            line: 40,
            column: 44
          }
        }, {
          start: {
            line: 40,
            column: 47
          },
          end: {
            line: 40,
            column: 56
          }
        }],
        line: 40
      },
      "2": {
        loc: {
          start: {
            line: 51,
            column: 2
          },
          end: {
            line: 90,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 2
          },
          end: {
            line: 90,
            column: 3
          }
        }, {
          start: {
            line: 51,
            column: 2
          },
          end: {
            line: 90,
            column: 3
          }
        }],
        line: 51
      },
      "3": {
        loc: {
          start: {
            line: 53,
            column: 15
          },
          end: {
            line: 53,
            column: 43
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 53,
            column: 22
          },
          end: {
            line: 53,
            column: 31
          }
        }, {
          start: {
            line: 53,
            column: 34
          },
          end: {
            line: 53,
            column: 43
          }
        }],
        line: 53
      },
      "4": {
        loc: {
          start: {
            line: 65,
            column: 21
          },
          end: {
            line: 65,
            column: 57
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 65,
            column: 28
          },
          end: {
            line: 65,
            column: 40
          }
        }, {
          start: {
            line: 65,
            column: 43
          },
          end: {
            line: 65,
            column: 57
          }
        }],
        line: 65
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "980fd11493b39964ead116890d92b37f76291cae"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];

  cov_280equv70u = function () {
    return actualCoverage;
  };

  return actualCoverage;
}

cov_280equv70u();

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function AlignedWordsObject({
  children,
  originalWords,
  disableWordPopover
}) {
  cov_280equv70u().f[0]++;
  var classes = (cov_280equv70u().s[0]++, useStyles());

  var _ref = (cov_280equv70u().s[1]++, (0, _react.useState)(null)),
      _ref2 = _slicedToArray(_ref, 2),
      anchorEl = _ref2[0],
      setAnchorEl = _ref2[1];

  cov_280equv70u().s[2]++;

  var handleOpen = event => {
    cov_280equv70u().f[1]++;
    cov_280equv70u().s[3]++;
    setAnchorEl(event.currentTarget);
  };

  cov_280equv70u().s[4]++;

  var handleClose = () => {
    cov_280equv70u().f[2]++;
    cov_280equv70u().s[5]++;
    setAnchorEl(null);
  };

  var selected;

  var _selectionsContext = (cov_280equv70u().s[6]++, (0, _react.useContext)(_Selections.SelectionsContext));

  cov_280equv70u().s[7]++;

  if (_selectionsContext) {
    cov_280equv70u().b[0][0]++;

    var _ref3 = (cov_280equv70u().s[8]++, _selectionsContext),
        selections = _ref3.state,
        _ref3$actions = _ref3.actions,
        areSelected = _ref3$actions.areSelected,
        addSelections = _ref3$actions.addSelections,
        removeSelections = _ref3$actions.removeSelections;

    cov_280equv70u().s[9]++;
    selected = areSelected(originalWords);
  } else {
    cov_280equv70u().b[0][1]++;
  }

  var words = (cov_280equv70u().s[10]++, children.map((verseObject, index) => {
    cov_280equv70u().f[3]++;
    cov_280equv70u().s[11]++;
    return _react.default.createElement("span", {
      "data-test": "aligned-word-object",
      "data-testselected": selected,
      key: index,
      className: selected ? (cov_280equv70u().b[1][0]++, classes.selected) : (cov_280equv70u().b[1][1]++, undefined)
    }, _react.default.createElement(_.WordObject, {
      verseObject: verseObject,
      disableWordPopover: disableWordPopover
    }));
  }));
  var component = (cov_280equv70u().s[12]++, words);
  cov_280equv70u().s[13]++;

  if (!disableWordPopover) {
    cov_280equv70u().b[2][0]++;
    var open = (cov_280equv70u().s[14]++, Boolean(anchorEl));
    var id = (cov_280equv70u().s[15]++, open ? (cov_280equv70u().b[3][0]++, 'popover') : (cov_280equv70u().b[3][1]++, undefined));

    var _originalWords = (cov_280equv70u().s[16]++, originalWords.map((verseObject, index) => {
      cov_280equv70u().f[4]++;
      cov_280equv70u().s[17]++;
      return _react.default.createElement(_.OriginalWordObject, {
        key: index,
        verseObject: verseObject
      });
    }));

    cov_280equv70u().s[18]++;
    component = _react.default.createElement(_react.default.Fragment, null, _react.default.createElement("span", {
      "aria-describedby": id,
      "aria-haspopup": "true",
      onMouseEnter: handleOpen,
      onMouseLeave: handleClose,
      className: open ? (cov_280equv70u().b[4][0]++, classes.open) : (cov_280equv70u().b[4][1]++, classes.closed)
    }, words), _react.default.createElement(_core.Popover, {
      id: id,
      open: open,
      anchorEl: anchorEl,
      onClose: handleClose,
      className: classes.popover,
      classes: {
        paper: classes.paper
      },
      anchorOrigin: {
        vertical: 'bottom',
        horizontal: 'left'
      },
      transformOrigin: {
        vertical: 'top',
        horizontal: 'left'
      },
      disableRestoreFocus: true
    }, _react.default.createElement(_react.default.Fragment, null, _originalWords)));
  } else {
    cov_280equv70u().b[2][1]++;
  }

  cov_280equv70u().s[19]++;
  return _react.default.createElement(_react.default.Fragment, null, component);
}

cov_280equv70u().s[20]++;
AlignedWordsObject.propTypes = {
  children: _propTypes.default.arrayOf(_propTypes.default.object).isRequired,
  originalWords: _propTypes.default.arrayOf(_propTypes.default.object),

  /** disable popovers for aligned and original language words */
  disableWordPopover: _propTypes.default.bool
};
var useStyles = (cov_280equv70u().s[21]++, (0, _styles.makeStyles)(theme => {
  cov_280equv70u().f[5]++;
  cov_280equv70u().s[22]++;
  return {
    open: {
      backgroundColor: 'lightgoldenrodyellow'
    },
    closed: {},
    popover: {
      pointerEvents: 'none'
    },
    paper: {
      padding: theme.spacing(1)
    },
    selected: {
      backgroundColor: 'yellow'
    }
  };
}));
var _default = AlignedWordsObject;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,