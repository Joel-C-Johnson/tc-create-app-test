"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useFixCursorOnNewLine = useFixCursorOnNewLine;
exports.useHandleUndo = useHandleUndo;
exports.useHandlePaste = useHandlePaste;

var _react = require("react");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function useFixCursorOnNewLine(el) {
  var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      savedSelection = _useState2[0],
      setSavedSelection = _useState2[1];

  var saveSelection = (0, _react.useCallback)(function (containerEl) {
    if (window.getSelection().rangeCount > 0) {
      var range = window.getSelection().getRangeAt(0);
      var preSelectionRange = range.cloneRange();
      preSelectionRange.selectNodeContents(containerEl);
      preSelectionRange.setEnd(range.startContainer, range.startOffset);
      var start = preSelectionRange.toString().length;
      /** Adding plus one to account for newline */

      setSavedSelection({
        start: start + 1,

        /** Adding plus one to account for newline */
        end: start + range.toString().length + 1
      });
    } else {
      setSavedSelection({
        start: 0,
        end: 0
      });
    }
  }, []);
  var restoreSelection = (0, _react.useCallback)(function (containerEl, _savedSelection) {
    var charIndex = 0,
        range = document.createRange();
    range.setStart(containerEl, 0);
    range.collapse(true);
    var nodeStack = [containerEl],
        node,
        foundStart = false,
        stop = false;

    while (!stop && (node = nodeStack.pop())) {
      if (node.nodeType == 3) {
        var nextCharIndex = charIndex + node.length;

        if (!foundStart && _savedSelection.start >= charIndex && _savedSelection.start <= nextCharIndex) {
          range.setStart(node, _savedSelection.start - charIndex);
          foundStart = true;
        }

        if (foundStart && _savedSelection.end >= charIndex && _savedSelection.end <= nextCharIndex) {
          range.setEnd(node, _savedSelection.end - charIndex);
          stop = true;
        }

        charIndex = nextCharIndex;
      } else {
        var i = node.childNodes.length;

        while (i--) {
          nodeStack.push(node.childNodes[i]);
        }
      }
    }

    var sel = window.getSelection();
    sel.removeAllRanges();
    sel.addRange(range);
  }, []);
  var handleRestore = (0, _react.useCallback)(function (e) {
    /** Only listening for newline key character code */
    if (e.keyCode === 13) {
      restoreSelection(el, savedSelection);
    }
  }, [el, restoreSelection, savedSelection]);
  var handleSaveSelection = (0, _react.useCallback)(function () {
    saveSelection(el);
  }, [el, saveSelection]);
  (0, _react.useEffect)(function () {
    if (el) {
      el.addEventListener('keyup', handleRestore);
      el.addEventListener('keydown', handleSaveSelection);
    }

    ;
    return function () {
      if (el) {
        el.removeEventListener('keyup', handleRestore);
        el.addEventListener('keydown', handleSaveSelection);
      }
    };
  }, [el, handleRestore, handleSaveSelection, restoreSelection, saveSelection]);
}

function useHandleUndo(el, initialState) {
  var _useState3 = (0, _react.useState)([initialState]),
      _useState4 = _slicedToArray(_useState3, 2),
      lastValues = _useState4[0],
      setLastValues = _useState4[1];

  var handleUndo = (0, _react.useCallback)(function (e) {
    if (e.metaKey && e.key === 'z' && lastValues.length) {
      e.target.innerHTML = lastValues.pop();
    }

    if (!e.metaKey || e.metaKey && e.key === 'v') {
      var copy = lastValues.slice(0);
      copy.push(e.target.innerHTML);
      setLastValues(copy);
    }
  }, [lastValues]);
  (0, _react.useEffect)(function () {
    if (el) {
      el.addEventListener('keydown', handleUndo);
    }

    ;
    return function () {
      if (el) {
        el.removeEventListener('keydown', handleUndo);
      }
    };
  }, [el, handleUndo]);
}

function useHandlePaste(el, preview) {
  var handlePaste = (0, _react.useCallback)(function (e) {
    e.preventDefault();
    var pastedData = e.clipboardData.getData('text/plain');
    var doc = new DOMParser().parseFromString(pastedData, 'text/html');
    var text = doc.body.textContent || '';
    document.execCommand('insertHTML', false, text);
  }, []);
  (0, _react.useEffect)(function () {
    if (el) {
      el.addEventListener('paste', handlePaste);
    }

    ;
    return function () {
      if (el) {
        el.removeEventListener('paste', handlePaste);
      }
    };
  }, [el, handlePaste, preview]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,