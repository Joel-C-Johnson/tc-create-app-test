"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = BlockEditable;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _core = require("../../core/");

var _Markdown = require("../Markdown.context");

var _useStyles = require("./useStyles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function BlockEditable(_ref) {
  var markdown = _ref.markdown,
      onEdit = _ref.onEdit,
      inputFilters = _ref.inputFilters,
      outputFilters = _ref.outputFilters,
      style = _ref.style,
      preview = _ref.preview,
      editable = _ref.editable,
      fontSize = _ref.fontSize;
  var classes = (0, _useStyles.useStyles)();

  var _useContext = (0, _react.useContext)(_Markdown.MarkdownContext),
      actions = _useContext.actions;

  var _oldMarkdown = {
    markdown: markdown
  };

  var _style = (0, _react.useMemo)(function () {
    return (0, _core.isHebrew)(markdown) ? _objectSpread(_objectSpread({}, style), {}, {
      fontSize: '1.5em'
    }) : style;
  }, [style, markdown]);

  var handleBlur = function handleBlur(_markdown) {
    var oldHTML = (0, _core.markdownToHtml)({
      markdown: _oldMarkdown.markdown,
      inputFilters: inputFilters
    });
    var newHTML = (0, _core.markdownToHtml)({
      markdown: _markdown,
      inputFilters: inputFilters
    }); // TODO: do we need to calculate HTML each time??

    if (oldHTML !== newHTML || _oldMarkdown.markdown !== _markdown) {
      _oldMarkdown.markdown = _markdown;
      onEdit(_markdown);
    }
  };

  var handleHTMLBlur = function handleHTMLBlur(e) {
    var html = e.target.innerHTML;

    var _markdown = (0, _core.htmlToMarkdown)({
      html: html,
      outputFilters: outputFilters
    });

    handleBlur(_markdown);
  };

  var handleRawBlur = function handleRawBlur(e) {
    var string = e.target.innerText;
    string = (0, _core.fromDisplay)(string);

    var _markdown = (0, _core.filter)({
      string: string,
      filters: outputFilters
    });

    handleBlur(_markdown);
  };

  var handleKeyPress = function handleKeyPress(keycode) {
    if (actions && actions.setIsChanged) {
      actions.setIsChanged(true);
    }
  };

  var handledKeyCodes = [8
  /*Delete/Backspace*/
  ];

  var handleKeyUp = function handleKeyUp(event) {
    if (actions && actions.setIsChanged) {
      if (handledKeyCodes.includes(event.keyCode)) {
        // NOTE: we don't want to convert HTML on key keyUp.
        // So we cant test for changes.
        actions.setIsChanged(true);
      }
    }
  };

  var handleCutPaste = function handleCutPaste() {
    if (actions && actions.setIsChanged) {
      actions.setIsChanged(true);
    }

    if (actions && actions.setIsAutoSaveChanged) {
      actions.setIsAutoSaveChanged(true);
    }
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: classes.root
  }, !preview ? /*#__PURE__*/_react.default.createElement(RawMarkdown, {
    _style: _style,
    classes: classes,
    fontSize: fontSize,
    markdown: markdown,
    editable: editable,
    handleKeyUp: handleKeyUp,
    inputFilters: inputFilters,
    handleRawBlur: handleRawBlur,
    handleKeyPress: handleKeyPress,
    handleCutPaste: handleCutPaste
  }) : /*#__PURE__*/_react.default.createElement("div", {
    style: _objectSpread(_objectSpread({}, _style), {}, {
      fontSize: fontSize
    }),
    className: classes.html,
    dir: "auto",
    contentEditable: editable,
    onBlur: handleHTMLBlur,
    onKeyPress: handleKeyPress,
    onKeyUp: handleKeyUp,
    onCut: handleCutPaste,
    onPaste: handleCutPaste,
    dangerouslySetInnerHTML: {
      __html: (0, _core.markdownToHtml)({
        markdown: markdown,
        inputFilters: inputFilters
      })
    }
  }));
}

BlockEditable.propTypes = {
  /** Initial markdown for the editor. */
  markdown: _propTypes.default.string.isRequired,

  /** Function to propogate changes to the markdown. */
  onEdit: _propTypes.default.func,

  /** Replace strings before rendering. */
  inputFilters: _propTypes.default.array,

  /** Replace strings after editing. */
  outputFilters: _propTypes.default.array,

  /** CSS for the component. */
  style: _propTypes.default.object,

  /** Display Raw Markdown or HTML. */
  preview: _propTypes.default.bool,

  /** Enable/Disable editability. */
  editable: _propTypes.default.bool,

  /** fontSize e.g. '100%' */
  fontSize: _propTypes.default.string
};
BlockEditable.defaultProps = {
  markdown: '',
  onEdit: function onEdit() {},
  inputFilters: [],
  outputFilters: [],
  style: {},
  preview: true,
  editable: true
};

var RawMarkdown = function RawMarkdown(_ref2) {
  var _style = _ref2._style,
      classes = _ref2.classes,
      fontSize = _ref2.fontSize,
      markdown = _ref2.markdown,
      editable = _ref2.editable,
      handleKeyUp = _ref2.handleKeyUp,
      inputFilters = _ref2.inputFilters,
      handleRawBlur = _ref2.handleRawBlur,
      handleKeyPress = _ref2.handleKeyPress,
      handleCutPaste = _ref2.handleCutPaste;
  var code = (0, _core.filter)({
    string: markdown,
    filters: inputFilters
  });
  code = (0, _core.toDisplay)(code);
  var dangerouslySetInnerHTML = {
    __html: code
  };
  return /*#__PURE__*/_react.default.createElement("pre", {
    className: classes.pre
  }, /*#__PURE__*/_react.default.createElement("code", {
    className: classes.markdown,
    style: _objectSpread(_objectSpread({}, _style), {}, {
      fontSize: fontSize
    }),
    dir: "auto",
    contentEditable: editable,
    dangerouslySetInnerHTML: dangerouslySetInnerHTML,
    onBlur: handleRawBlur,
    onKeyPress: handleKeyPress,
    onKeyUp: handleKeyUp,
    onCut: handleCutPaste,
    onPaste: handleCutPaste
  }));
};

RawMarkdown.propTypes = {
  /** CSS for the component. */
  _style: _propTypes.default.object,

  /** CSS classes for the component. */
  classes: _propTypes.default.object,

  /** fontSize e.g. '100%' */
  fontSize: _propTypes.default.string,

  /** Initial markdown for the editor. */
  markdown: _propTypes.default.string.isRequired,

  /** Enable/Disable editability. */
  editable: _propTypes.default.bool,

  /** Function to handle Key Up. */
  handleKeyUp: _propTypes.default.func,

  /** Replace strings before rendering. */
  inputFilters: _propTypes.default.array,

  /** Function to handle raw on blur. */
  handleRawBlur: _propTypes.default.func,

  /** Function to handle key pres. */
  handleKeyPress: _propTypes.default.func,

  /** Function to handle cur & paste. */
  handleCutPaste: _propTypes.default.func
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,