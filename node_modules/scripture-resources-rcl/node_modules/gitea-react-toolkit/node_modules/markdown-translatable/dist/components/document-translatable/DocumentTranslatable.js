"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styles = require("@material-ui/core/styles");

var _md = _interopRequireDefault(require("md5"));

var _sectionTranslatable = _interopRequireDefault(require("../section-translatable"));

var _core = require("../../core/");

var _itemsReducer = require("../../core/itemsReducer");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    root: {
      marginTop: "".concat(theme.spacing(2), "px")
    }
  };
});

function DocumentTranslatable(_ref) {
  var original = _ref.original,
      translation = _ref.translation,
      preview = _ref.preview,
      inputFilters = _ref.inputFilters,
      outputFilters = _ref.outputFilters,
      onTranslation = _ref.onTranslation,
      blockable = _ref.blockable,
      style = _ref.style;
  var classes = useStyles();

  var _useState = (0, _react.useState)(0),
      _useState2 = _slicedToArray(_useState, 2),
      sectionFocus = _useState2[0],
      setSectionFocus = _useState2[1];

  var _useState3 = (0, _react.useState)(translation),
      _useState4 = _slicedToArray(_useState3, 2),
      editedTranslation = _useState4[0],
      setEditedTranslation = _useState4[1];

  var _translationSections = (0, _react.useMemo)(function () {
    return (0, _core.sectionsFromMarkdown)({
      markdown: editedTranslation
    });
  }, [editedTranslation]);

  var _useReducer = (0, _react.useReducer)(_itemsReducer.itemsReducer, _translationSections),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      translationSections = _useReducer2[0],
      dispatch = _useReducer2[1];

  var originalSections = (0, _react.useMemo)(function () {
    return (0, _core.sectionsFromMarkdown)({
      markdown: original
    });
  }, [original]);
  (0, _react.useEffect)(function () {
    var _translationSections = (0, _core.sectionsFromMarkdown)({
      markdown: translation
    });

    dispatch({
      type: 'SET_ITEMS',
      value: {
        items: _translationSections
      }
    });
  }, [translation]);
  (0, _react.useEffect)(function () {
    var _translation = (0, _core.markdownFromSections)({
      sections: translationSections
    });

    setEditedTranslation(_translation);
  }, [translationSections]);
  (0, _react.useEffect)(function () {
    if (editedTranslation !== translation) {
      onTranslation(editedTranslation); //console.log('DocumentTranslatable got updated editedTranslation');
    }
  }, [editedTranslation, onTranslation, translation]); // adding onTranslation to memoized array causes infinite loop

  var setTranslationSection = (0, _react.useCallback)(function (_ref2) {
    var index = _ref2.index,
        item = _ref2.item;
    dispatch({
      type: 'SET_ITEM',
      value: {
        index: index,
        item: item
      }
    });
  }, []);

  var sectionTranslatables = function sectionTranslatables() {
    var totalSections = originalSections.length > translationSections.length ? originalSections.length : translationSections.length;
    var _sectionsTranslatables = [];

    var _loop = function _loop(i) {
      var originalSection = originalSections[i];
      var translationSection = translationSections[i];
      var key = (0, _md.default)(i + JSON.stringify(originalSection) + JSON.stringify(translationSection));

      var __onTranslation = function __onTranslation(item) {
        return setTranslationSection({
          index: i,
          item: item
        });
      };

      var onExpanded = function onExpanded(expanded) {
        if (expanded) {
          setSectionFocus(i);
        } else {
          setSectionFocus(null);
        }
      };

      var expanded = sectionFocus === i;

      _sectionsTranslatables.push( /*#__PURE__*/_react.default.createElement(_sectionTranslatable.default, {
        key: key,
        original: originalSection,
        translation: translationSection,
        inputFilters: inputFilters,
        outputFilters: outputFilters,
        onTranslation: __onTranslation,
        onExpanded: onExpanded,
        expanded: expanded,
        preview: preview,
        blockable: blockable,
        style: style
      }));
    };

    for (var i = 0; i < totalSections; i++) {
      _loop(i);
    }

    ;
    return _sectionsTranslatables;
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: classes.root
  }, sectionTranslatables());
}

;
DocumentTranslatable.propTypes = {
  /** Original markdown for the editor. */
  original: _propTypes.default.string.isRequired,

  /** Translation markdown for the editor. */
  translation: _propTypes.default.string.isRequired,

  /** Preview HTML rendered vs Raw Markdown */
  preview: _propTypes.default.bool,

  /** Callback to set preview */
  onPreview: _propTypes.default.func,

  /** Function to propogate changes to the translation. */
  onTranslation: _propTypes.default.func.isRequired,

  /** Divide segments by blocks */
  blockable: _propTypes.default.bool,

  /** Replace strings before rendering. */
  inputFilters: _propTypes.default.array,

  /** Replace strings after editing. */
  outputFilters: _propTypes.default.array,

  /** CSS for the component. */
  style: _propTypes.default.object
};
DocumentTranslatable.defaultProps = {
  blockable: true,
  inputFilters: [],
  outputFilters: []
};
var _default = DocumentTranslatable;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,