"use strict";

var _authentication = require("../../authentication");

var _orgs = require("./orgs");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

jest.mock('../../http', function () {
  return {
    get: function get() {
      return Promise.resolve([{
        'avatar_url': 'https://bg.door43.org/avatars/17918',
        'description': '',
        'full_name': '',
        'id': 17918,
        'location': '',
        'username': 'TC-Create-Test-Org',
        'visibility': 'public',
        'website': ''
      }]);
    },
    apiPath: 'api/v1'
  };
});
describe('Organization Lists', function () {
  it('should list organizations with correct config', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var username, password, expected, authHeaders, config, organizations;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            username = 'test';
            password = 'password';
            expected = [{
              'avatar_url': 'https://bg.door43.org/avatars/17918',
              'description': '',
              'full_name': '',
              'id': 17918,
              'location': '',
              'username': 'TC-Create-Test-Org',
              'visibility': 'public',
              'website': ''
            }];
            authHeaders = (0, _authentication.authorizationHeaders)({
              username: username,
              password: password
            });
            config = {
              server: 'https://bg.door43.org/',
              headers: _objectSpread({}, authHeaders)
            };
            _context.next = 7;
            return (0, _orgs.getCurrentUserOrgs)({
              config: config
            });

          case 7:
            organizations = _context.sent;
            expect(organizations).toMatchObject(expected);

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb3JlL2dpdGVhLWFwaS91c2Vycy9vcmdzL29yZ3Muc3BlYy50cyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsImdldCIsIlByb21pc2UiLCJyZXNvbHZlIiwiYXBpUGF0aCIsImRlc2NyaWJlIiwiaXQiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiZXhwZWN0ZWQiLCJhdXRoSGVhZGVycyIsImNvbmZpZyIsInNlcnZlciIsImhlYWRlcnMiLCJvcmdhbml6YXRpb25zIiwiZXhwZWN0IiwidG9NYXRjaE9iamVjdCJdLCJtYXBwaW5ncyI6Ijs7QUFDQTs7QUFDQTs7Ozs7Ozs7Ozs7O0FBQ0FBLElBQUksQ0FBQ0MsSUFBTCxDQUFVLFlBQVYsRUFBd0I7QUFBQSxTQUFPO0FBQzdCQyxJQUFBQSxHQUFHLEVBQUU7QUFBQSxhQUFNQyxPQUFPLENBQUNDLE9BQVIsQ0FBZ0IsQ0FBQztBQUMxQixzQkFBYyxxQ0FEWTtBQUUxQix1QkFBZSxFQUZXO0FBRzFCLHFCQUFhLEVBSGE7QUFJMUIsY0FBTSxLQUpvQjtBQUsxQixvQkFBWSxFQUxjO0FBTTFCLG9CQUFZLG9CQU5jO0FBTzFCLHNCQUFjLFFBUFk7QUFRMUIsbUJBQVc7QUFSZSxPQUFELENBQWhCLENBQU47QUFBQSxLQUR3QjtBQVV4QkMsSUFBQUEsT0FBTyxFQUFFO0FBVmUsR0FBUDtBQUFBLENBQXhCO0FBYUFDLFFBQVEsQ0FBQyxvQkFBRCxFQUF1QixZQUFNO0FBQ25DQyxFQUFBQSxFQUFFLENBQUMsK0NBQUQsdUVBQWtEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUM1Q0MsWUFBQUEsUUFENEMsR0FDakMsTUFEaUM7QUFFNUNDLFlBQUFBLFFBRjRDLEdBRWpDLFVBRmlDO0FBRzVDQyxZQUFBQSxRQUg0QyxHQUdqQyxDQUNmO0FBQ0UsNEJBQWMscUNBRGhCO0FBRUUsNkJBQWUsRUFGakI7QUFHRSwyQkFBYSxFQUhmO0FBSUUsb0JBQU0sS0FKUjtBQUtFLDBCQUFZLEVBTGQ7QUFNRSwwQkFBWSxvQkFOZDtBQU9FLDRCQUFjLFFBUGhCO0FBUUUseUJBQVc7QUFSYixhQURlLENBSGlDO0FBZ0I1Q0MsWUFBQUEsV0FoQjRDLEdBZ0I5QiwwQ0FBcUI7QUFBRUgsY0FBQUEsUUFBUSxFQUFSQSxRQUFGO0FBQVlDLGNBQUFBLFFBQVEsRUFBUkE7QUFBWixhQUFyQixDQWhCOEI7QUFpQjVDRyxZQUFBQSxNQWpCNEMsR0FpQm5DO0FBQUVDLGNBQUFBLE1BQU0sRUFBRSx3QkFBVjtBQUFvQ0MsY0FBQUEsT0FBTyxvQkFBT0gsV0FBUDtBQUEzQyxhQWpCbUM7QUFBQTtBQUFBLG1CQWtCdEIsOEJBQW1CO0FBQUVDLGNBQUFBLE1BQU0sRUFBTkE7QUFBRixhQUFuQixDQWxCc0I7O0FBQUE7QUFrQjVDRyxZQUFBQSxhQWxCNEM7QUFtQmxEQyxZQUFBQSxNQUFNLENBQUNELGFBQUQsQ0FBTixDQUFzQkUsYUFBdEIsQ0FBb0NQLFFBQXBDOztBQW5Ca0Q7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsR0FBbEQsR0FBRjtBQXFCRCxDQXRCTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgdHlwZXM9XCJqZXN0XCIgLz5cclxuaW1wb3J0IHsgYXV0aG9yaXphdGlvbkhlYWRlcnMgfSBmcm9tICcuLi8uLi9hdXRoZW50aWNhdGlvbic7XHJcbmltcG9ydCB7IGdldEN1cnJlbnRVc2VyT3JncyB9IGZyb20gJy4vb3Jncyc7XHJcbmplc3QubW9jaygnLi4vLi4vaHR0cCcsICgpID0+ICh7XHJcbiAgZ2V0OiAoKSA9PiBQcm9taXNlLnJlc29sdmUoW3tcclxuICAgICdhdmF0YXJfdXJsJzogJ2h0dHBzOi8vYmcuZG9vcjQzLm9yZy9hdmF0YXJzLzE3OTE4JyxcclxuICAgICdkZXNjcmlwdGlvbic6ICcnLFxyXG4gICAgJ2Z1bGxfbmFtZSc6ICcnLFxyXG4gICAgJ2lkJzogMTc5MTgsXHJcbiAgICAnbG9jYXRpb24nOiAnJyxcclxuICAgICd1c2VybmFtZSc6ICdUQy1DcmVhdGUtVGVzdC1PcmcnLFxyXG4gICAgJ3Zpc2liaWxpdHknOiAncHVibGljJyxcclxuICAgICd3ZWJzaXRlJzogJycsXHJcbiAgfV0pLCBhcGlQYXRoOiAnYXBpL3YxJyxcclxufSkpO1xyXG5cclxuZGVzY3JpYmUoJ09yZ2FuaXphdGlvbiBMaXN0cycsICgpID0+IHtcclxuICBpdCgnc2hvdWxkIGxpc3Qgb3JnYW5pemF0aW9ucyB3aXRoIGNvcnJlY3QgY29uZmlnJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgdXNlcm5hbWUgPSAndGVzdCc7XHJcbiAgICBjb25zdCBwYXNzd29yZCA9ICdwYXNzd29yZCc7XHJcbiAgICBjb25zdCBleHBlY3RlZCA9IFtcclxuICAgICAge1xyXG4gICAgICAgICdhdmF0YXJfdXJsJzogJ2h0dHBzOi8vYmcuZG9vcjQzLm9yZy9hdmF0YXJzLzE3OTE4JyxcclxuICAgICAgICAnZGVzY3JpcHRpb24nOiAnJyxcclxuICAgICAgICAnZnVsbF9uYW1lJzogJycsXHJcbiAgICAgICAgJ2lkJzogMTc5MTgsXHJcbiAgICAgICAgJ2xvY2F0aW9uJzogJycsXHJcbiAgICAgICAgJ3VzZXJuYW1lJzogJ1RDLUNyZWF0ZS1UZXN0LU9yZycsXHJcbiAgICAgICAgJ3Zpc2liaWxpdHknOiAncHVibGljJyxcclxuICAgICAgICAnd2Vic2l0ZSc6ICcnLFxyXG4gICAgICB9LFxyXG4gICAgXTtcclxuXHJcbiAgICBjb25zdCBhdXRoSGVhZGVycyA9IGF1dGhvcml6YXRpb25IZWFkZXJzKHsgdXNlcm5hbWUsIHBhc3N3b3JkIH0pO1xyXG4gICAgY29uc3QgY29uZmlnID0geyBzZXJ2ZXI6ICdodHRwczovL2JnLmRvb3I0My5vcmcvJywgaGVhZGVyczogeyAuLi5hdXRoSGVhZGVycyB9IH07XHJcbiAgICBjb25zdCBvcmdhbml6YXRpb25zID0gYXdhaXQgZ2V0Q3VycmVudFVzZXJPcmdzKHsgY29uZmlnIH0pO1xyXG4gICAgZXhwZWN0KG9yZ2FuaXphdGlvbnMpLnRvTWF0Y2hPYmplY3QoZXhwZWN0ZWQpO1xyXG4gIH0pO1xyXG59KTtcclxuIl19