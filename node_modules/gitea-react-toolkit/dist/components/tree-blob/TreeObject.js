"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styles = require("@material-ui/core/styles");

var _core = require("@material-ui/core");

var _icons = require("@material-ui/icons");

var _ = require("./");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    root: {
      paddingRight: '0.7em'
    },
    pathText: {
      paddingLeft: '0.7em'
    }
  };
});
/**
 * A TreeObject Component to render a Git Tree tree object.
 */

function TreeObject(_ref) {
  var path = _ref.path,
      tree = _ref.tree,
      url = _ref.url,
      selected = _ref.selected,
      pathSelected = _ref.pathSelected,
      onBlob = _ref.onBlob,
      depth = _ref.depth,
      filepath = _ref.filepath,
      comparer = _ref.comparer;
  var classes = useStyles();

  var _filepath = _path.default.join(filepath || '', path);

  var icon = selected ? /*#__PURE__*/_react.default.createElement(_icons.Folder, null) : /*#__PURE__*/_react.default.createElement(_icons.FolderOpen, null);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_core.ListItem, {
    button: true,
    selected: selected,
    className: classes.root,
    style: {
      paddingLeft: depth + 'em'
    }
  }, /*#__PURE__*/_react.default.createElement(_core.ListItemIcon, {
    style: {
      marginRight: 0
    }
  }, icon), /*#__PURE__*/_react.default.createElement(_core.ListItemText, {
    className: classes.pathText,
    primary: path + '/'
  })), /*#__PURE__*/_react.default.createElement(_.Tree, {
    pathSelected: pathSelected,
    tree: tree,
    url: url,
    selected: selected,
    onBlob: onBlob,
    depth: depth + 1,
    filepath: _filepath,
    comparer: comparer
  }));
}

TreeObject.propTypes = {
  /** The filename or path in the Git Tree Object */
  path: _propTypes.default.string.isRequired,

  /** An array of paths from the Gitea file tree api. */
  tree: _propTypes.default.arrayOf(_propTypes.default.shape({
    path: _propTypes.default.string.isRequired,
    type: _propTypes.default.oneOf(['tree', 'blob']).isRequired
  })),

  /** The Url to fetch the listing if listing is not provided. */
  url: _propTypes.default.string,

  /** Set whether or not the File object is currently selected. */
  selected: _propTypes.default.bool,

  /** Set which of the File object is currently selected. */
  pathSelected: _propTypes.default.string,

  /** Function to propogate when the Blob is selected. */
  onBlob: _propTypes.default.func,

  /** The depth of the path in the tree sets the inset of the component. */
  depth: _propTypes.default.number,

  /** The nested filepath that will concatenate. */
  filepath: _propTypes.default.string
};
TreeObject.defaultProps = {
  selected: false,
  depth: 1
};
var _default = TreeObject;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3RyZWUtYmxvYi9UcmVlT2JqZWN0LmpzIl0sIm5hbWVzIjpbInVzZVN0eWxlcyIsInRoZW1lIiwicm9vdCIsInBhZGRpbmdSaWdodCIsInBhdGhUZXh0IiwicGFkZGluZ0xlZnQiLCJUcmVlT2JqZWN0IiwicGF0aCIsInRyZWUiLCJ1cmwiLCJzZWxlY3RlZCIsInBhdGhTZWxlY3RlZCIsIm9uQmxvYiIsImRlcHRoIiwiZmlsZXBhdGgiLCJjb21wYXJlciIsImNsYXNzZXMiLCJfZmlsZXBhdGgiLCJQYXRoIiwiam9pbiIsImljb24iLCJtYXJnaW5SaWdodCIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsInN0cmluZyIsImlzUmVxdWlyZWQiLCJhcnJheU9mIiwic2hhcGUiLCJ0eXBlIiwib25lT2YiLCJib29sIiwiZnVuYyIsIm51bWJlciIsImRlZmF1bHRQcm9wcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUtBOztBQUtBOzs7O0FBRUEsSUFBTUEsU0FBUyxHQUFHLHdCQUFXLFVBQUFDLEtBQUs7QUFBQSxTQUFLO0FBQ3JDQyxJQUFBQSxJQUFJLEVBQUU7QUFDSkMsTUFBQUEsWUFBWSxFQUFFO0FBRFYsS0FEK0I7QUFJckNDLElBQUFBLFFBQVEsRUFBRTtBQUNSQyxNQUFBQSxXQUFXLEVBQUU7QUFETDtBQUoyQixHQUFMO0FBQUEsQ0FBaEIsQ0FBbEI7QUFTQTtBQUNBO0FBQ0E7O0FBQ0EsU0FBU0MsVUFBVCxPQVVHO0FBQUEsTUFUREMsSUFTQyxRQVREQSxJQVNDO0FBQUEsTUFSREMsSUFRQyxRQVJEQSxJQVFDO0FBQUEsTUFQREMsR0FPQyxRQVBEQSxHQU9DO0FBQUEsTUFOREMsUUFNQyxRQU5EQSxRQU1DO0FBQUEsTUFMREMsWUFLQyxRQUxEQSxZQUtDO0FBQUEsTUFKREMsTUFJQyxRQUpEQSxNQUlDO0FBQUEsTUFIREMsS0FHQyxRQUhEQSxLQUdDO0FBQUEsTUFGREMsUUFFQyxRQUZEQSxRQUVDO0FBQUEsTUFEREMsUUFDQyxRQUREQSxRQUNDO0FBQ0QsTUFBTUMsT0FBTyxHQUFHaEIsU0FBUyxFQUF6Qjs7QUFDQSxNQUFNaUIsU0FBUyxHQUFHQyxjQUFLQyxJQUFMLENBQVVMLFFBQVEsSUFBSSxFQUF0QixFQUEwQlAsSUFBMUIsQ0FBbEI7O0FBRUEsTUFBTWEsSUFBSSxHQUFHVixRQUFRLGdCQUNuQiw2QkFBQyxhQUFELE9BRG1CLGdCQUVuQiw2QkFBQyxpQkFBRCxPQUZGO0FBSUEsc0JBQ0UseUVBQ0UsNkJBQUMsY0FBRDtBQUNFLElBQUEsTUFBTSxNQURSO0FBRUUsSUFBQSxRQUFRLEVBQUVBLFFBRlo7QUFHRSxJQUFBLFNBQVMsRUFBRU0sT0FBTyxDQUFDZCxJQUhyQjtBQUlFLElBQUEsS0FBSyxFQUFFO0FBQUNHLE1BQUFBLFdBQVcsRUFBRVEsS0FBSyxHQUFHO0FBQXRCO0FBSlQsa0JBTUUsNkJBQUMsa0JBQUQ7QUFBYyxJQUFBLEtBQUssRUFBRTtBQUFFUSxNQUFBQSxXQUFXLEVBQUU7QUFBZjtBQUFyQixLQUNHRCxJQURILENBTkYsZUFTRSw2QkFBQyxrQkFBRDtBQUNFLElBQUEsU0FBUyxFQUFFSixPQUFPLENBQUNaLFFBRHJCO0FBRUUsSUFBQSxPQUFPLEVBQUVHLElBQUksR0FBRztBQUZsQixJQVRGLENBREYsZUFlRSw2QkFBQyxNQUFEO0FBQ0UsSUFBQSxZQUFZLEVBQUVJLFlBRGhCO0FBRUUsSUFBQSxJQUFJLEVBQUVILElBRlI7QUFHRSxJQUFBLEdBQUcsRUFBRUMsR0FIUDtBQUlFLElBQUEsUUFBUSxFQUFFQyxRQUpaO0FBS0UsSUFBQSxNQUFNLEVBQUVFLE1BTFY7QUFNRSxJQUFBLEtBQUssRUFBRUMsS0FBSyxHQUFHLENBTmpCO0FBT0UsSUFBQSxRQUFRLEVBQUVJLFNBUFo7QUFRRSxJQUFBLFFBQVEsRUFBRUY7QUFSWixJQWZGLENBREY7QUE0QkQ7O0FBRURULFVBQVUsQ0FBQ2dCLFNBQVgsR0FBdUI7QUFDckI7QUFDQWYsRUFBQUEsSUFBSSxFQUFFZ0IsbUJBQVVDLE1BQVYsQ0FBaUJDLFVBRkY7O0FBR3JCO0FBQ0FqQixFQUFBQSxJQUFJLEVBQUVlLG1CQUFVRyxPQUFWLENBQWtCSCxtQkFBVUksS0FBVixDQUFnQjtBQUN0Q3BCLElBQUFBLElBQUksRUFBRWdCLG1CQUFVQyxNQUFWLENBQWlCQyxVQURlO0FBRXRDRyxJQUFBQSxJQUFJLEVBQUVMLG1CQUFVTSxLQUFWLENBQWdCLENBQUMsTUFBRCxFQUFRLE1BQVIsQ0FBaEIsRUFBaUNKO0FBRkQsR0FBaEIsQ0FBbEIsQ0FKZTs7QUFRckI7QUFDQWhCLEVBQUFBLEdBQUcsRUFBRWMsbUJBQVVDLE1BVE07O0FBVXJCO0FBQ0FkLEVBQUFBLFFBQVEsRUFBRWEsbUJBQVVPLElBWEM7O0FBWXJCO0FBQ0FuQixFQUFBQSxZQUFZLEVBQUVZLG1CQUFVQyxNQWJIOztBQWNyQjtBQUNBWixFQUFBQSxNQUFNLEVBQUVXLG1CQUFVUSxJQWZHOztBQWdCckI7QUFDQWxCLEVBQUFBLEtBQUssRUFBRVUsbUJBQVVTLE1BakJJOztBQWtCckI7QUFDQWxCLEVBQUFBLFFBQVEsRUFBRVMsbUJBQVVDO0FBbkJDLENBQXZCO0FBc0JBbEIsVUFBVSxDQUFDMkIsWUFBWCxHQUEwQjtBQUN4QnZCLEVBQUFBLFFBQVEsRUFBRSxLQURjO0FBRXhCRyxFQUFBQSxLQUFLLEVBQUU7QUFGaUIsQ0FBMUI7ZUFLZVAsVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQYXRoIGZyb20gJ3BhdGgnO1xyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xyXG5pbXBvcnQgeyBtYWtlU3R5bGVzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzJztcclxuaW1wb3J0IHtcclxuICBMaXN0SXRlbSxcclxuICBMaXN0SXRlbUljb24sXHJcbiAgTGlzdEl0ZW1UZXh0LFxyXG59IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlJztcclxuaW1wb3J0IHtcclxuICBGb2xkZXIsXHJcbiAgRm9sZGVyT3BlbixcclxufSBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMnO1xyXG5cclxuaW1wb3J0IHsgVHJlZSB9IGZyb20gJy4vJztcclxuXHJcbmNvbnN0IHVzZVN0eWxlcyA9IG1ha2VTdHlsZXModGhlbWUgPT4gKHtcclxuICByb290OiB7XHJcbiAgICBwYWRkaW5nUmlnaHQ6ICcwLjdlbScsXHJcbiAgfSxcclxuICBwYXRoVGV4dDoge1xyXG4gICAgcGFkZGluZ0xlZnQ6ICcwLjdlbScsXHJcbiAgfSxcclxufSkpO1xyXG5cclxuLyoqXHJcbiAqIEEgVHJlZU9iamVjdCBDb21wb25lbnQgdG8gcmVuZGVyIGEgR2l0IFRyZWUgdHJlZSBvYmplY3QuXHJcbiAqL1xyXG5mdW5jdGlvbiBUcmVlT2JqZWN0KHtcclxuICBwYXRoLFxyXG4gIHRyZWUsXHJcbiAgdXJsLFxyXG4gIHNlbGVjdGVkLFxyXG4gIHBhdGhTZWxlY3RlZCxcclxuICBvbkJsb2IsXHJcbiAgZGVwdGgsXHJcbiAgZmlsZXBhdGgsXHJcbiAgY29tcGFyZXIsXHJcbn0pIHtcclxuICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKCk7XHJcbiAgY29uc3QgX2ZpbGVwYXRoID0gUGF0aC5qb2luKGZpbGVwYXRoIHx8ICcnLCBwYXRoKTtcclxuXHJcbiAgY29uc3QgaWNvbiA9IHNlbGVjdGVkID9cclxuICAgIDxGb2xkZXIgLz4gOlxyXG4gICAgPEZvbGRlck9wZW4gLz47XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8PlxyXG4gICAgICA8TGlzdEl0ZW1cclxuICAgICAgICBidXR0b25cclxuICAgICAgICBzZWxlY3RlZD17c2VsZWN0ZWR9XHJcbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLnJvb3R9XHJcbiAgICAgICAgc3R5bGU9e3twYWRkaW5nTGVmdDogZGVwdGggKyAnZW0nfX1cclxuICAgICAgPlxyXG4gICAgICAgIDxMaXN0SXRlbUljb24gc3R5bGU9e3sgbWFyZ2luUmlnaHQ6IDAgfX0+XHJcbiAgICAgICAgICB7aWNvbn1cclxuICAgICAgICA8L0xpc3RJdGVtSWNvbj5cclxuICAgICAgICA8TGlzdEl0ZW1UZXh0XHJcbiAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMucGF0aFRleHR9XHJcbiAgICAgICAgICBwcmltYXJ5PXtwYXRoICsgJy8nfVxyXG4gICAgICAgIC8+XHJcbiAgICAgIDwvTGlzdEl0ZW0+XHJcbiAgICAgIDxUcmVlXHJcbiAgICAgICAgcGF0aFNlbGVjdGVkPXtwYXRoU2VsZWN0ZWR9XHJcbiAgICAgICAgdHJlZT17dHJlZX1cclxuICAgICAgICB1cmw9e3VybH1cclxuICAgICAgICBzZWxlY3RlZD17c2VsZWN0ZWR9XHJcbiAgICAgICAgb25CbG9iPXtvbkJsb2J9XHJcbiAgICAgICAgZGVwdGg9e2RlcHRoICsgMX1cclxuICAgICAgICBmaWxlcGF0aD17X2ZpbGVwYXRofVxyXG4gICAgICAgIGNvbXBhcmVyPXtjb21wYXJlcn1cclxuICAgICAgLz5cclxuICAgIDwvPlxyXG4gICk7XHJcbn1cclxuXHJcblRyZWVPYmplY3QucHJvcFR5cGVzID0ge1xyXG4gIC8qKiBUaGUgZmlsZW5hbWUgb3IgcGF0aCBpbiB0aGUgR2l0IFRyZWUgT2JqZWN0ICovXHJcbiAgcGF0aDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxyXG4gIC8qKiBBbiBhcnJheSBvZiBwYXRocyBmcm9tIHRoZSBHaXRlYSBmaWxlIHRyZWUgYXBpLiAqL1xyXG4gIHRyZWU6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zaGFwZSh7XHJcbiAgICBwYXRoOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXHJcbiAgICB0eXBlOiBQcm9wVHlwZXMub25lT2YoWyd0cmVlJywnYmxvYiddKS5pc1JlcXVpcmVkLFxyXG4gIH0pKSxcclxuICAvKiogVGhlIFVybCB0byBmZXRjaCB0aGUgbGlzdGluZyBpZiBsaXN0aW5nIGlzIG5vdCBwcm92aWRlZC4gKi9cclxuICB1cmw6IFByb3BUeXBlcy5zdHJpbmcsXHJcbiAgLyoqIFNldCB3aGV0aGVyIG9yIG5vdCB0aGUgRmlsZSBvYmplY3QgaXMgY3VycmVudGx5IHNlbGVjdGVkLiAqL1xyXG4gIHNlbGVjdGVkOiBQcm9wVHlwZXMuYm9vbCxcclxuICAvKiogU2V0IHdoaWNoIG9mIHRoZSBGaWxlIG9iamVjdCBpcyBjdXJyZW50bHkgc2VsZWN0ZWQuICovXHJcbiAgcGF0aFNlbGVjdGVkOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG4gIC8qKiBGdW5jdGlvbiB0byBwcm9wb2dhdGUgd2hlbiB0aGUgQmxvYiBpcyBzZWxlY3RlZC4gKi9cclxuICBvbkJsb2I6IFByb3BUeXBlcy5mdW5jLFxyXG4gIC8qKiBUaGUgZGVwdGggb2YgdGhlIHBhdGggaW4gdGhlIHRyZWUgc2V0cyB0aGUgaW5zZXQgb2YgdGhlIGNvbXBvbmVudC4gKi9cclxuICBkZXB0aDogUHJvcFR5cGVzLm51bWJlcixcclxuICAvKiogVGhlIG5lc3RlZCBmaWxlcGF0aCB0aGF0IHdpbGwgY29uY2F0ZW5hdGUuICovXHJcbiAgZmlsZXBhdGg6IFByb3BUeXBlcy5zdHJpbmcsXHJcbn07XHJcblxyXG5UcmVlT2JqZWN0LmRlZmF1bHRQcm9wcyA9IHtcclxuICBzZWxlY3RlZDogZmFsc2UsXHJcbiAgZGVwdGg6IDEsXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUcmVlT2JqZWN0O1xyXG4iXX0=