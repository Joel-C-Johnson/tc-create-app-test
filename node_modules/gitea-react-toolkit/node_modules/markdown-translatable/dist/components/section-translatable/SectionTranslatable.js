"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactMarkdown = _interopRequireDefault(require("react-markdown"));

var _md = _interopRequireDefault(require("md5"));

var _core = require("@material-ui/core");

var _icons = require("@material-ui/icons");

var _blockTranslatable = _interopRequireDefault(require("../block-translatable"));

var _core2 = require("../../core/");

var _styles = require("./styles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function SectionTranslatable(_ref) {
  var original = _ref.original,
      translation = _ref.translation,
      preview = _ref.preview,
      inputFilters = _ref.inputFilters,
      outputFilters = _ref.outputFilters,
      onTranslation = _ref.onTranslation,
      onExpanded = _ref.onExpanded,
      expanded = _ref.expanded,
      blockable = _ref.blockable,
      style = _ref.style;
  var classes = (0, _styles.useStyles)();

  var _useState = (0, _react.useState)(translation),
      _useState2 = _slicedToArray(_useState, 2),
      editedTranslation = _useState2[0],
      setEditedTranslation = _useState2[1];

  var originalBlocks = (0, _react.useMemo)(function () {
    return blockable ? (0, _core2.blocksFromMarkdown)({
      markdown: original
    }) : [original];
  }, [blockable, original]);

  var _translationBlocks = (0, _react.useMemo)(function () {
    return blockable ? (0, _core2.blocksFromMarkdown)({
      markdown: translation
    }) : [translation];
  }, [blockable, translation]);

  var _useReducer = (0, _react.useReducer)(_core2.itemsReducer, _translationBlocks),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      translationBlocks = _useReducer2[0],
      dispatch = _useReducer2[1];

  var _onExpanded = (0, _react.useCallback)(onExpanded, []); // update translationBlocks to match blockable chained through _translationBlocks


  (0, _react.useEffect)(function () {
    dispatch({
      type: 'SET_ITEMS',
      value: {
        items: _translationBlocks
      }
    });
  }, [_translationBlocks]); // update onTranslation when translationBlocks are updated

  (0, _react.useEffect)(function () {
    var _translation = (0, _core2.markdownFromBlocks)({
      blocks: translationBlocks
    });

    setEditedTranslation(_translation);
  }, [translationBlocks]);
  (0, _react.useEffect)(function () {
    if (editedTranslation !== translation) {
      onTranslation(editedTranslation); // console.log('SectionTranslatable got updated editedTranslation');
    }
  }, [editedTranslation, onTranslation, translation]);
  var expandedToggle = (0, _react.useCallback)(function () {
    _onExpanded(!expanded);
  }, [_onExpanded, expanded]);
  var setTranslationBlock = (0, _react.useCallback)(function (_ref2) {
    var index = _ref2.index,
        item = _ref2.item;
    dispatch({
      type: 'SET_ITEM',
      value: {
        index: index,
        item: item
      }
    });
  }, []);
  var blockTranslatables = (0, _react.useCallback)(function () {
    var mostBlocks = originalBlocks.length > translationBlocks.length ? originalBlocks : translationBlocks;
    var _blocksTranslatables = [];

    var _loop = function _loop(i) {
      var _onTranslation = function _onTranslation(item) {
        return setTranslationBlock({
          index: i,
          item: item
        });
      };

      var translationBlock = translationBlocks[i];
      var originalBlock = originalBlocks[i];
      var key = i + (0, _md.default)(JSON.stringify(originalBlock + translationBlock));

      _blocksTranslatables.push( /*#__PURE__*/_react.default.createElement(_blockTranslatable.default, {
        key: key,
        original: originalBlock,
        translation: translationBlock,
        inputFilters: inputFilters,
        outputFilters: outputFilters,
        onTranslation: _onTranslation,
        preview: preview
      }));
    };

    for (var i = 0; i < mostBlocks.length; i++) {
      _loop(i);
    }

    ;
    return _blocksTranslatables;
  }, [inputFilters, originalBlocks, outputFilters, preview, setTranslationBlock, translationBlocks]);
  var titleBlock = originalBlocks[0].split('\n\n')[0] || translationBlocks[0].split('\n\n')[0];
  var summaryTitle = (0, _react.useMemo)(function () {
    return expanded ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null) : /*#__PURE__*/_react.default.createElement(_reactMarkdown.default, {
      source: titleBlock,
      escapeHtml: false
    });
  }, [expanded, titleBlock]);
  var component = (0, _react.useMemo)(function () {
    return /*#__PURE__*/_react.default.createElement(_core.Accordion, {
      style: style,
      className: classes.root,
      expanded: expanded
    }, /*#__PURE__*/_react.default.createElement(_core.AccordionSummary, {
      expandIcon: /*#__PURE__*/_react.default.createElement(_icons.ExpandMore, null) // classes={{content: 'summaryContent'}}
      ,
      className: classes.content,
      onClick: expandedToggle
    }, summaryTitle), /*#__PURE__*/_react.default.createElement(_core.AccordionDetails, {
      className: classes.details
    }, blockTranslatables()), /*#__PURE__*/_react.default.createElement(_core.AccordionActions, {
      className: classes.actions
    }, /*#__PURE__*/_react.default.createElement(_core.IconButton, {
      onClick: expandedToggle
    }, /*#__PURE__*/_react.default.createElement(_icons.ExpandLess, null))));
  }, [blockTranslatables, classes, expanded, expandedToggle, style, summaryTitle]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, component);
}

;
SectionTranslatable.propTypes = {
  /** Original markdown for the editor. */
  original: _propTypes.default.string.isRequired,

  /** Translation markdown for the editor. */
  translation: _propTypes.default.string.isRequired,

  /** Function to propogate changes to the translation. */
  onTranslation: _propTypes.default.func.isRequired,

  /** Preview HTML rendered vs Raw Markdown */
  preview: _propTypes.default.bool,

  /** Function to propogate changes to the Section in focus. */
  onExpanded: _propTypes.default.func,

  /** Set the Section in focus. */
  expanded: _propTypes.default.bool,

  /** Divide segments by blocks */
  blockable: _propTypes.default.bool,

  /** Replace strings before rendering. */
  inputFilters: _propTypes.default.array,

  /** Replace strings after editing. */
  outputFilters: _propTypes.default.array,

  /** CSS for the component. */
  style: _propTypes.default.object
};
SectionTranslatable.defaultProps = {
  original: '',
  translation: '',
  inputFilters: [],
  outputFilters: [],
  blockable: true,
  style: {}
};
var _default = SectionTranslatable;
/* code graveyard
  const blockTranslatables = useMemo(() => (
    originalBlocks.map((originalBlock, index) => {
      const _onTranslation = (item) => setTranslationBlock({ index, item });
      const translationBlock = translationBlocks[index];
      const key = index + md5(JSON.stringify(originalBlock + translationBlock));
      return (
        <BlockTranslatable
          key={key}
          original={originalBlock}
          translation={translationBlock}
          inputFilters={inputFilters}
          outputFilters={outputFilters}
          onTranslation={_onTranslation}
          preview={preview}
        />
      );
    })
  ), [originalBlocks, translationBlocks, inputFilters, outputFilters, preview, setTranslationBlock]);
*/

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,