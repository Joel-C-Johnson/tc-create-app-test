"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var helpers = _interopRequireWildcard(require("../../core/"));

var _Markdown = require("../Markdown.context");

var _useStyles = require("./useStyles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function BlockEditable(_ref) {
  var markdown = _ref.markdown,
      onEdit = _ref.onEdit,
      inputFilters = _ref.inputFilters,
      outputFilters = _ref.outputFilters,
      style = _ref.style,
      preview = _ref.preview,
      editable = _ref.editable,
      fontSize = _ref.fontSize;
  var classes = (0, _useStyles.useStyles)();

  var _useContext = (0, _react.useContext)(_Markdown.MarkdownContext),
      actions = _useContext.actions;

  var _oldMarkdown = {
    markdown: markdown
  };

  var _style = (0, _react.useMemo)(function () {
    return helpers.isHebrew(markdown) ? _objectSpread(_objectSpread({}, style), {}, {
      fontSize: '1.5em'
    }) : style;
  }, [style, markdown]);

  var handleBlur = (0, _react.useCallback)(function (_markdown) {
    var oldHTML = (0, helpers.markdownToHtml)({
      markdown: _oldMarkdown.markdown,
      inputFilters: inputFilters
    });
    var newHTML = (0, helpers.markdownToHtml)({
      markdown: _markdown,
      inputFilters: inputFilters
    }); // TODO: do we need to calculate HTML each time??

    if (oldHTML !== newHTML || _oldMarkdown.markdown !== _markdown) {
      _oldMarkdown.markdown = _markdown;
      onEdit(_markdown);
    }
  }, [_oldMarkdown.markdown, inputFilters, onEdit]);
  var handleHTMLBlur = (0, _react.useCallback)(function (e) {
    var html = e.target.innerHTML;

    var _markdown = (0, helpers.htmlToMarkdown)({
      html: html,
      outputFilters: outputFilters
    });

    handleBlur(_markdown);
  }, [handleBlur, outputFilters]);
  var handleRawBlur = (0, _react.useCallback)(function (e) {
    var string = e.target.innerText;
    string = (0, helpers.fromDisplay)(string);

    var _markdown = (0, helpers.filter)({
      string: string,
      filters: outputFilters
    });

    handleBlur(_markdown);
  }, [handleBlur, outputFilters]);
  var handleKeyPress = (0, _react.useCallback)(function (keycode) {
    if (actions && actions.setIsChanged) {
      actions.setIsChanged(true);
    }
  }, [actions]);
  var handledKeyCodes = [8
  /*Delete/Backspace*/
  ];
  var handleKeyUp = (0, _react.useCallback)(function (event) {
    if (actions && actions.setIsChanged) {
      if (handledKeyCodes.includes(event.keyCode)) {
        // NOTE: we don't want to convert HTML on key keyUp.
        // So we cant test for changes.
        actions.setIsChanged(true);
      }
    }
  }, [actions]);
  var handleCutPaste = (0, _react.useCallback)(function () {
    if (actions && actions.setIsChanged) {
      actions.setIsChanged(true);
    }

    if (actions && actions.setIsAutoSaveChanged) {
      actions.setIsAutoSaveChanged(true);
    }
  }, [actions]);
  var component = (0, _react.useMemo)(function () {
    var _component;

    if (!preview) {
      var code = (0, helpers.filter)({
        string: markdown,
        filters: inputFilters
      });
      code = (0, helpers.toDisplay)(code);
      var dangerouslySetInnerHTML = {
        __html: code
      };
      _component = /*#__PURE__*/_react.default.createElement("pre", {
        className: classes.pre
      }, /*#__PURE__*/_react.default.createElement("code", {
        className: classes.markdown,
        style: _objectSpread(_objectSpread({}, _style), {}, {
          fontSize: fontSize
        }),
        dir: "auto",
        contentEditable: editable,
        dangerouslySetInnerHTML: dangerouslySetInnerHTML,
        onBlur: handleRawBlur,
        onKeyPress: handleKeyPress,
        onKeyUp: handleKeyUp,
        onCut: handleCutPaste,
        onPaste: handleCutPaste
      }));
    } else {
      var _dangerouslySetInnerHTML = {
        __html: (0, helpers.markdownToHtml)({
          markdown: markdown,
          inputFilters: inputFilters
        })
      };
      _component = /*#__PURE__*/_react.default.createElement("div", {
        style: _objectSpread(_objectSpread({}, _style), {}, {
          fontSize: fontSize
        }),
        className: classes.html,
        dir: "auto",
        contentEditable: editable,
        dangerouslySetInnerHTML: _dangerouslySetInnerHTML,
        onBlur: handleHTMLBlur,
        onKeyPress: handleKeyPress,
        onKeyUp: handleKeyUp,
        onCut: handleCutPaste,
        onPaste: handleCutPaste
      });
    }

    return _component;
  }, [fontSize, preview, markdown, editable]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: classes.root
  }, component);
}

BlockEditable.propTypes = {
  /** Initial markdown for the editor. */
  markdown: _propTypes.default.string.isRequired,

  /** Function to propogate changes to the markdown. */
  onEdit: _propTypes.default.func,

  /** Replace strings before rendering. */
  inputFilters: _propTypes.default.array,

  /** Replace strings after editing. */
  outputFilters: _propTypes.default.array,

  /** CSS for the component. */
  style: _propTypes.default.object,

  /** Display Raw Markdown or HTML. */
  preview: _propTypes.default.bool,

  /** Enable/Disable editability. */
  editable: _propTypes.default.bool,

  /** fontSize e.g. '100%' */
  fontSize: _propTypes.default.string
};
BlockEditable.defaultProps = {
  markdown: '',
  onEdit: function onEdit() {},
  inputFilters: [],
  outputFilters: [],
  style: {},
  preview: true,
  editable: true
};
var _default = BlockEditable;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,